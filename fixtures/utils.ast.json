{
  "type": "module",
  "text": "import itertools\nfrom typing import Tuple, Any, Union, List\nimport torch.jit\nimport functools\nimport operator\nimport geoopt\n\n__all__ = [\n    \"strip_tuple\",\n    \"size2shape\",\n    \"make_tuple\",\n    \"broadcast_shapes\",\n    \"ismanifold\",\n    \"canonical_manifold\",\n    \"list_range\",\n    \"idx2sign\",\n    \"drop_dims\",\n    \"canonical_dims\",\n    \"sign\",\n    \"prod\",\n    \"clamp_abs\",\n    \"sabs\",\n]\n\nCOMPLEX_DTYPES = {torch.complex64, torch.complex128}\nif hasattr(torch, \"complex32\"):\n    COMPLEX_DTYPES.add(torch.complex32)\n\n\ndef strip_tuple(tup: Tuple) -> Union[Tuple, Any]:\n    if len(tup) == 1:\n        return tup[0]\n    else:\n        return tup\n\n\ndef make_tuple(obj: Union[Tuple, List, Any]) -> Tuple:\n    if isinstance(obj, list):\n        obj = tuple(obj)\n    if not isinstance(obj, tuple):\n        return (obj,)\n    else:\n        return obj\n\n\ndef prod(items):\n    return functools.reduce(operator.mul, items, 1)\n\n\n@torch.jit.script\ndef sign(x):\n    return torch.sign(x.sign() + 0.5)\n\n\n@torch.jit.script\ndef sabs(x, eps: float = 1e-15):\n    return x.abs().add_(eps)\n\n\n@torch.jit.script\ndef clamp_abs(x, eps: float = 1e-15):\n    s = sign(x)\n    return s * sabs(x, eps=eps)\n\n\n@torch.jit.script\ndef idx2sign(idx: int, dim: int, neg: bool = True):\n    \"\"\"\n    Unify idx to be negative or positive, that helps in cases of broadcasting.\n\n    Parameters\n    ----------\n    idx : int\n        current index\n    dim : int\n        maximum dimension\n    neg : bool\n        indicate we need negative index\n\n    Returns\n    -------\n    int\n    \"\"\"\n    if neg:\n        if idx < 0:\n            return idx\n        else:\n            return (idx + 1) % -(dim + 1)\n    else:\n        return idx % dim\n\n\n@torch.jit.script\ndef drop_dims(tensor: torch.Tensor, dims: List[int]):\n    # Workaround to drop several dims in :func:`torch.squeeze`.\n    seen: int = 0\n    for d in dims:\n        tensor = tensor.squeeze(d - seen)\n        seen += 1\n    return tensor\n\n\n@torch.jit.script\ndef list_range(end: int):\n    res: List[int] = []\n    for d in range(end):\n        res.append(d)\n    return res\n\n\n@torch.jit.script\ndef canonical_dims(dims: List[int], maxdim: int):\n    result: List[int] = []\n    for idx in dims:\n        result.append(idx2sign(idx, maxdim, neg=False))\n    return result\n\n\ndef size2shape(*size: Union[Tuple[int], int]) -> Tuple[int]:\n    return make_tuple(strip_tuple(size))\n\n\ndef broadcast_shapes(*shapes: Tuple[int]) -> Tuple[int]:\n    \"\"\"Apply numpy broadcasting rules to shapes.\"\"\"\n    result = []\n    for dims in itertools.zip_longest(*map(reversed, shapes), fillvalue=1):\n        dim: int = 1\n        for d in dims:\n            if dim != 1 and d != 1 and d != dim:\n                raise ValueError(\"Shapes can't be broadcasted\")\n            elif d > dim:\n                dim = d\n        result.append(dim)\n    return tuple(reversed(result))\n\n\ndef ismanifold(instance, cls):\n    \"\"\"\n    Check if interface of an instance is compatible with given class.\n\n    Parameters\n    ----------\n    instance : geoopt.Manifold\n        check if a given manifold is compatible with cls API\n    cls : type\n        manifold type\n\n    Returns\n    -------\n    bool\n        comparison result\n    \"\"\"\n    if not issubclass(cls, geoopt.manifolds.Manifold):\n        raise TypeError(\"`cls` should be a subclass of geoopt.manifolds.Manifold\")\n    if not isinstance(instance, geoopt.manifolds.Manifold):\n        return False\n    else:\n        # this is the case to care about, Scaled class is a proxy, but fails instance checks\n        while isinstance(instance, geoopt.Scaled):\n            instance = instance.base\n        return isinstance(instance, cls)\n\n\ndef canonical_manifold(manifold: \"geoopt.Manifold\"):\n    \"\"\"\n    Get a canonical manifold.\n\n    If a manifold is wrapped with Scaled. Some attributes may not be available. This should help if you really need them.\n\n    Parameters\n    ----------\n    manifold : geoopt.Manifold\n\n    Returns\n    -------\n    geoopt.Maniflold\n        an unwrapped manifold\n    \"\"\"\n    while isinstance(manifold, geoopt.Scaled):\n        manifold = manifold.base\n    return manifold\n",
  "children": [
    {
      "type": "import_statement",
      "text": "import itertools",
      "children": [
        {
          "type": "import",
          "text": "import",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "itertools",
          "children": [
            {
              "type": "identifier",
              "text": "itertools",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "import_from_statement",
      "text": "from typing import Tuple, Any, Union, List",
      "children": [
        {
          "type": "from",
          "text": "from",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "typing",
          "children": [
            {
              "type": "identifier",
              "text": "typing",
              "children": []
            }
          ]
        },
        {
          "type": "import",
          "text": "import",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "Tuple",
          "children": [
            {
              "type": "identifier",
              "text": "Tuple",
              "children": []
            }
          ]
        },
        {
          "type": ",",
          "text": ",",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "Any",
          "children": [
            {
              "type": "identifier",
              "text": "Any",
              "children": []
            }
          ]
        },
        {
          "type": ",",
          "text": ",",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "Union",
          "children": [
            {
              "type": "identifier",
              "text": "Union",
              "children": []
            }
          ]
        },
        {
          "type": ",",
          "text": ",",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "List",
          "children": [
            {
              "type": "identifier",
              "text": "List",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "import_statement",
      "text": "import torch.jit",
      "children": [
        {
          "type": "import",
          "text": "import",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "torch.jit",
          "children": [
            {
              "type": "identifier",
              "text": "torch",
              "children": []
            },
            {
              "type": ".",
              "text": ".",
              "children": []
            },
            {
              "type": "identifier",
              "text": "jit",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "import_statement",
      "text": "import functools",
      "children": [
        {
          "type": "import",
          "text": "import",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "functools",
          "children": [
            {
              "type": "identifier",
              "text": "functools",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "import_statement",
      "text": "import operator",
      "children": [
        {
          "type": "import",
          "text": "import",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "operator",
          "children": [
            {
              "type": "identifier",
              "text": "operator",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "import_statement",
      "text": "import geoopt",
      "children": [
        {
          "type": "import",
          "text": "import",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "geoopt",
          "children": [
            {
              "type": "identifier",
              "text": "geoopt",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "expression_statement",
      "text": "__all__ = [\n    \"strip_tuple\",\n    \"size2shape\",\n    \"make_tuple\",\n    \"broadcast_shapes\",\n    \"ismanifold\",\n    \"canonical_manifold\",\n    \"list_range\",\n    \"idx2sign\",\n    \"drop_dims\",\n    \"canonical_dims\",\n    \"sign\",\n    \"prod\",\n    \"clamp_abs\",\n    \"sabs\",\n]",
      "children": [
        {
          "type": "assignment",
          "text": "__all__ = [\n    \"strip_tuple\",\n    \"size2shape\",\n    \"make_tuple\",\n    \"broadcast_shapes\",\n    \"ismanifold\",\n    \"canonical_manifold\",\n    \"list_range\",\n    \"idx2sign\",\n    \"drop_dims\",\n    \"canonical_dims\",\n    \"sign\",\n    \"prod\",\n    \"clamp_abs\",\n    \"sabs\",\n]",
          "children": [
            {
              "type": "identifier",
              "text": "__all__",
              "children": []
            },
            {
              "type": "=",
              "text": "=",
              "children": []
            },
            {
              "type": "list",
              "text": "[\n    \"strip_tuple\",\n    \"size2shape\",\n    \"make_tuple\",\n    \"broadcast_shapes\",\n    \"ismanifold\",\n    \"canonical_manifold\",\n    \"list_range\",\n    \"idx2sign\",\n    \"drop_dims\",\n    \"canonical_dims\",\n    \"sign\",\n    \"prod\",\n    \"clamp_abs\",\n    \"sabs\",\n]",
              "children": [
                {
                  "type": "[",
                  "text": "[",
                  "children": []
                },
                {
                  "type": "string",
                  "text": "\"strip_tuple\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "string",
                  "text": "\"size2shape\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "string",
                  "text": "\"make_tuple\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "string",
                  "text": "\"broadcast_shapes\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "string",
                  "text": "\"ismanifold\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "string",
                  "text": "\"canonical_manifold\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "string",
                  "text": "\"list_range\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "string",
                  "text": "\"idx2sign\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "string",
                  "text": "\"drop_dims\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "string",
                  "text": "\"canonical_dims\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "string",
                  "text": "\"sign\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "string",
                  "text": "\"prod\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "string",
                  "text": "\"clamp_abs\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "string",
                  "text": "\"sabs\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "]",
                  "text": "]",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "expression_statement",
      "text": "COMPLEX_DTYPES = {torch.complex64, torch.complex128}",
      "children": [
        {
          "type": "assignment",
          "text": "COMPLEX_DTYPES = {torch.complex64, torch.complex128}",
          "children": [
            {
              "type": "identifier",
              "text": "COMPLEX_DTYPES",
              "children": []
            },
            {
              "type": "=",
              "text": "=",
              "children": []
            },
            {
              "type": "set",
              "text": "{torch.complex64, torch.complex128}",
              "children": [
                {
                  "type": "{",
                  "text": "{",
                  "children": []
                },
                {
                  "type": "attribute",
                  "text": "torch.complex64",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "complex64",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "attribute",
                  "text": "torch.complex128",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "complex128",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "}",
                  "text": "}",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "if_statement",
      "text": "if hasattr(torch, \"complex32\"):\n    COMPLEX_DTYPES.add(torch.complex32)",
      "children": [
        {
          "type": "if",
          "text": "if",
          "children": []
        },
        {
          "type": "call",
          "text": "hasattr(torch, \"complex32\")",
          "children": [
            {
              "type": "identifier",
              "text": "hasattr",
              "children": []
            },
            {
              "type": "argument_list",
              "text": "(torch, \"complex32\")",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "torch",
                  "children": []
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "string",
                  "text": "\"complex32\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "COMPLEX_DTYPES.add(torch.complex32)",
          "children": [
            {
              "type": "expression_statement",
              "text": "COMPLEX_DTYPES.add(torch.complex32)",
              "children": [
                {
                  "type": "call",
                  "text": "COMPLEX_DTYPES.add(torch.complex32)",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "COMPLEX_DTYPES.add",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "COMPLEX_DTYPES",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "add",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "text": "(torch.complex32)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "attribute",
                          "text": "torch.complex32",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "complex32",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def strip_tuple(tup: Tuple) -> Union[Tuple, Any]:\n    if len(tup) == 1:\n        return tup[0]\n    else:\n        return tup",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "strip_tuple",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(tup: Tuple)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "tup: Tuple",
              "children": [
                {
                  "type": "identifier",
                  "text": "tup",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "Tuple",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "Tuple",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": "->",
          "text": "->",
          "children": []
        },
        {
          "type": "type",
          "text": "Union[Tuple, Any]",
          "children": [
            {
              "type": "subscript",
              "text": "Union[Tuple, Any]",
              "children": [
                {
                  "type": "identifier",
                  "text": "Union",
                  "children": []
                },
                {
                  "type": "[",
                  "text": "[",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "Tuple",
                  "children": []
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "Any",
                  "children": []
                },
                {
                  "type": "]",
                  "text": "]",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "if len(tup) == 1:\n        return tup[0]\n    else:\n        return tup",
          "children": [
            {
              "type": "if_statement",
              "text": "if len(tup) == 1:\n        return tup[0]\n    else:\n        return tup",
              "children": [
                {
                  "type": "if",
                  "text": "if",
                  "children": []
                },
                {
                  "type": "comparison_operator",
                  "text": "len(tup) == 1",
                  "children": [
                    {
                      "type": "call",
                      "text": "len(tup)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "len",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(tup)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "tup",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "==",
                      "text": "==",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "return tup[0]",
                  "children": [
                    {
                      "type": "return_statement",
                      "text": "return tup[0]",
                      "children": [
                        {
                          "type": "return",
                          "text": "return",
                          "children": []
                        },
                        {
                          "type": "subscript",
                          "text": "tup[0]",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "tup",
                              "children": []
                            },
                            {
                              "type": "[",
                              "text": "[",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "0",
                              "children": []
                            },
                            {
                              "type": "]",
                              "text": "]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "text": "else:\n        return tup",
                  "children": [
                    {
                      "type": "else",
                      "text": "else",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return tup",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return tup",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "tup",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def make_tuple(obj: Union[Tuple, List, Any]) -> Tuple:\n    if isinstance(obj, list):\n        obj = tuple(obj)\n    if not isinstance(obj, tuple):\n        return (obj,)\n    else:\n        return obj",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "make_tuple",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(obj: Union[Tuple, List, Any])",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "obj: Union[Tuple, List, Any]",
              "children": [
                {
                  "type": "identifier",
                  "text": "obj",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "Union[Tuple, List, Any]",
                  "children": [
                    {
                      "type": "subscript",
                      "text": "Union[Tuple, List, Any]",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "Union",
                          "children": []
                        },
                        {
                          "type": "[",
                          "text": "[",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tuple",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "List",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Any",
                          "children": []
                        },
                        {
                          "type": "]",
                          "text": "]",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": "->",
          "text": "->",
          "children": []
        },
        {
          "type": "type",
          "text": "Tuple",
          "children": [
            {
              "type": "identifier",
              "text": "Tuple",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "if isinstance(obj, list):\n        obj = tuple(obj)\n    if not isinstance(obj, tuple):\n        return (obj,)\n    else:\n        return obj",
          "children": [
            {
              "type": "if_statement",
              "text": "if isinstance(obj, list):\n        obj = tuple(obj)",
              "children": [
                {
                  "type": "if",
                  "text": "if",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "isinstance(obj, list)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "isinstance",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(obj, list)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "obj",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "list",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "obj = tuple(obj)",
                  "children": [
                    {
                      "type": "expression_statement",
                      "text": "obj = tuple(obj)",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "obj = tuple(obj)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "obj",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "tuple(obj)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "tuple",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(obj)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "obj",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "text": "if not isinstance(obj, tuple):\n        return (obj,)\n    else:\n        return obj",
              "children": [
                {
                  "type": "if",
                  "text": "if",
                  "children": []
                },
                {
                  "type": "not_operator",
                  "text": "not isinstance(obj, tuple)",
                  "children": [
                    {
                      "type": "not",
                      "text": "not",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "isinstance(obj, tuple)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "isinstance",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(obj, tuple)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "obj",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "tuple",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "return (obj,)",
                  "children": [
                    {
                      "type": "return_statement",
                      "text": "return (obj,)",
                      "children": [
                        {
                          "type": "return",
                          "text": "return",
                          "children": []
                        },
                        {
                          "type": "tuple",
                          "text": "(obj,)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "obj",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "text": "else:\n        return obj",
                  "children": [
                    {
                      "type": "else",
                      "text": "else",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return obj",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return obj",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "obj",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def prod(items):\n    return functools.reduce(operator.mul, items, 1)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "prod",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(items)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "items",
              "children": []
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "return functools.reduce(operator.mul, items, 1)",
          "children": [
            {
              "type": "return_statement",
              "text": "return functools.reduce(operator.mul, items, 1)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "functools.reduce(operator.mul, items, 1)",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "functools.reduce",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "functools",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "reduce",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "text": "(operator.mul, items, 1)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "attribute",
                          "text": "operator.mul",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "operator",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "mul",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "items",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef sign(x):\n    return torch.sign(x.sign() + 0.5)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def sign(x):\n    return torch.sign(x.sign() + 0.5)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "sign",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "return torch.sign(x.sign() + 0.5)",
              "children": [
                {
                  "type": "return_statement",
                  "text": "return torch.sign(x.sign() + 0.5)",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.sign(x.sign() + 0.5)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.sign",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "sign",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(x.sign() + 0.5)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "x.sign() + 0.5",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "x.sign()",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "x.sign",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "sign",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "+",
                                  "text": "+",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "0.5",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef sabs(x, eps: float = 1e-15):\n    return x.abs().add_(eps)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def sabs(x, eps: float = 1e-15):\n    return x.abs().add_(eps)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "sabs",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x, eps: float = 1e-15)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "eps: float = 1e-15",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "eps",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "float",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "float",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "float",
                      "text": "1e-15",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "return x.abs().add_(eps)",
              "children": [
                {
                  "type": "return_statement",
                  "text": "return x.abs().add_(eps)",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "x.abs().add_(eps)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "x.abs().add_",
                          "children": [
                            {
                              "type": "call",
                              "text": "x.abs()",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "x.abs",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "abs",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "add_",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(eps)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "eps",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef clamp_abs(x, eps: float = 1e-15):\n    s = sign(x)\n    return s * sabs(x, eps=eps)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def clamp_abs(x, eps: float = 1e-15):\n    s = sign(x)\n    return s * sabs(x, eps=eps)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "clamp_abs",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x, eps: float = 1e-15)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "eps: float = 1e-15",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "eps",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "float",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "float",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "float",
                      "text": "1e-15",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "s = sign(x)\n    return s * sabs(x, eps=eps)",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "s = sign(x)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "s = sign(x)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "s",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "sign(x)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "sign",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(x)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return s * sabs(x, eps=eps)",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "s * sabs(x, eps=eps)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "s",
                          "children": []
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "sabs(x, eps=eps)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "sabs",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(x, eps=eps)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "eps=eps",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "eps",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "eps",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef idx2sign(idx: int, dim: int, neg: bool = True):\n    \"\"\"\n    Unify idx to be negative or positive, that helps in cases of broadcasting.\n\n    Parameters\n    ----------\n    idx : int\n        current index\n    dim : int\n        maximum dimension\n    neg : bool\n        indicate we need negative index\n\n    Returns\n    -------\n    int\n    \"\"\"\n    if neg:\n        if idx < 0:\n            return idx\n        else:\n            return (idx + 1) % -(dim + 1)\n    else:\n        return idx % dim",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def idx2sign(idx: int, dim: int, neg: bool = True):\n    \"\"\"\n    Unify idx to be negative or positive, that helps in cases of broadcasting.\n\n    Parameters\n    ----------\n    idx : int\n        current index\n    dim : int\n        maximum dimension\n    neg : bool\n        indicate we need negative index\n\n    Returns\n    -------\n    int\n    \"\"\"\n    if neg:\n        if idx < 0:\n            return idx\n        else:\n            return (idx + 1) % -(dim + 1)\n    else:\n        return idx % dim",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "idx2sign",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(idx: int, dim: int, neg: bool = True)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "idx: int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "idx",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "dim: int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "neg: bool = True",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "neg",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "bool",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "bool",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "true",
                      "text": "True",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "\"\"\"\n    Unify idx to be negative or positive, that helps in cases of broadcasting.\n\n    Parameters\n    ----------\n    idx : int\n        current index\n    dim : int\n        maximum dimension\n    neg : bool\n        indicate we need negative index\n\n    Returns\n    -------\n    int\n    \"\"\"\n    if neg:\n        if idx < 0:\n            return idx\n        else:\n            return (idx + 1) % -(dim + 1)\n    else:\n        return idx % dim",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "\"\"\"\n    Unify idx to be negative or positive, that helps in cases of broadcasting.\n\n    Parameters\n    ----------\n    idx : int\n        current index\n    dim : int\n        maximum dimension\n    neg : bool\n        indicate we need negative index\n\n    Returns\n    -------\n    int\n    \"\"\"",
                  "children": [
                    {
                      "type": "string",
                      "text": "\"\"\"\n    Unify idx to be negative or positive, that helps in cases of broadcasting.\n\n    Parameters\n    ----------\n    idx : int\n        current index\n    dim : int\n        maximum dimension\n    neg : bool\n        indicate we need negative index\n\n    Returns\n    -------\n    int\n    \"\"\"",
                      "children": [
                        {
                          "type": "\"",
                          "text": "\"\"\"",
                          "children": []
                        },
                        {
                          "type": "\"",
                          "text": "\"\"\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if neg:\n        if idx < 0:\n            return idx\n        else:\n            return (idx + 1) % -(dim + 1)\n    else:\n        return idx % dim",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "neg",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "if idx < 0:\n            return idx\n        else:\n            return (idx + 1) % -(dim + 1)",
                      "children": [
                        {
                          "type": "if_statement",
                          "text": "if idx < 0:\n            return idx\n        else:\n            return (idx + 1) % -(dim + 1)",
                          "children": [
                            {
                              "type": "if",
                              "text": "if",
                              "children": []
                            },
                            {
                              "type": "comparison_operator",
                              "text": "idx < 0",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "idx",
                                  "children": []
                                },
                                {
                                  "type": "<",
                                  "text": "<",
                                  "children": []
                                },
                                {
                                  "type": "integer",
                                  "text": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ":",
                              "text": ":",
                              "children": []
                            },
                            {
                              "type": "block",
                              "text": "return idx",
                              "children": [
                                {
                                  "type": "return_statement",
                                  "text": "return idx",
                                  "children": [
                                    {
                                      "type": "return",
                                      "text": "return",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "idx",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "else_clause",
                              "text": "else:\n            return (idx + 1) % -(dim + 1)",
                              "children": [
                                {
                                  "type": "else",
                                  "text": "else",
                                  "children": []
                                },
                                {
                                  "type": ":",
                                  "text": ":",
                                  "children": []
                                },
                                {
                                  "type": "block",
                                  "text": "return (idx + 1) % -(dim + 1)",
                                  "children": [
                                    {
                                      "type": "return_statement",
                                      "text": "return (idx + 1) % -(dim + 1)",
                                      "children": [
                                        {
                                          "type": "return",
                                          "text": "return",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "(idx + 1) % -(dim + 1)",
                                          "children": [
                                            {
                                              "type": "parenthesized_expression",
                                              "text": "(idx + 1)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "idx + 1",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "idx",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "+",
                                                      "text": "+",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "%",
                                              "text": "%",
                                              "children": []
                                            },
                                            {
                                              "type": "unary_operator",
                                              "text": "-(dim + 1)",
                                              "children": [
                                                {
                                                  "type": "-",
                                                  "text": "-",
                                                  "children": []
                                                },
                                                {
                                                  "type": "parenthesized_expression",
                                                  "text": "(dim + 1)",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "dim + 1",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "dim",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "+",
                                                          "text": "+",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "1",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "else_clause",
                      "text": "else:\n        return idx % dim",
                      "children": [
                        {
                          "type": "else",
                          "text": "else",
                          "children": []
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return idx % dim",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return idx % dim",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "idx % dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "idx",
                                      "children": []
                                    },
                                    {
                                      "type": "%",
                                      "text": "%",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef drop_dims(tensor: torch.Tensor, dims: List[int]):\n    # Workaround to drop several dims in :func:`torch.squeeze`.\n    seen: int = 0\n    for d in dims:\n        tensor = tensor.squeeze(d - seen)\n        seen += 1\n    return tensor",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def drop_dims(tensor: torch.Tensor, dims: List[int]):\n    # Workaround to drop several dims in :func:`torch.squeeze`.\n    seen: int = 0\n    for d in dims:\n        tensor = tensor.squeeze(d - seen)\n        seen += 1\n    return tensor",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "drop_dims",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(tensor: torch.Tensor, dims: List[int])",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "tensor: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "tensor",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "dims: List[int]",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dims",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "List[int]",
                      "children": [
                        {
                          "type": "subscript",
                          "text": "List[int]",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "List",
                              "children": []
                            },
                            {
                              "type": "[",
                              "text": "[",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "]",
                              "text": "]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "comment",
              "text": "# Workaround to drop several dims in :func:`torch.squeeze`.",
              "children": []
            },
            {
              "type": "block",
              "text": "seen: int = 0\n    for d in dims:\n        tensor = tensor.squeeze(d - seen)\n        seen += 1\n    return tensor",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "seen: int = 0",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "seen: int = 0",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "seen",
                          "children": []
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "type",
                          "text": "int",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "int",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "0",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "for_statement",
                  "text": "for d in dims:\n        tensor = tensor.squeeze(d - seen)\n        seen += 1",
                  "children": [
                    {
                      "type": "for",
                      "text": "for",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "d",
                      "children": []
                    },
                    {
                      "type": "in",
                      "text": "in",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "dims",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "tensor = tensor.squeeze(d - seen)\n        seen += 1",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "tensor = tensor.squeeze(d - seen)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "tensor = tensor.squeeze(d - seen)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "tensor",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "tensor.squeeze(d - seen)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "tensor.squeeze",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "tensor",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "squeeze",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(d - seen)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "d - seen",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "d",
                                              "children": []
                                            },
                                            {
                                              "type": "-",
                                              "text": "-",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "seen",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "seen += 1",
                          "children": [
                            {
                              "type": "augmented_assignment",
                              "text": "seen += 1",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "seen",
                                  "children": []
                                },
                                {
                                  "type": "+=",
                                  "text": "+=",
                                  "children": []
                                },
                                {
                                  "type": "integer",
                                  "text": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return tensor",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "tensor",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef list_range(end: int):\n    res: List[int] = []\n    for d in range(end):\n        res.append(d)\n    return res",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def list_range(end: int):\n    res: List[int] = []\n    for d in range(end):\n        res.append(d)\n    return res",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "list_range",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(end: int)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "end: int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "end",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "res: List[int] = []\n    for d in range(end):\n        res.append(d)\n    return res",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "res: List[int] = []",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "res: List[int] = []",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "res",
                          "children": []
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "type",
                          "text": "List[int]",
                          "children": [
                            {
                              "type": "subscript",
                              "text": "List[int]",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "List",
                                  "children": []
                                },
                                {
                                  "type": "[",
                                  "text": "[",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "int",
                                  "children": []
                                },
                                {
                                  "type": "]",
                                  "text": "]",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "list",
                          "text": "[]",
                          "children": [
                            {
                              "type": "[",
                              "text": "[",
                              "children": []
                            },
                            {
                              "type": "]",
                              "text": "]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "for_statement",
                  "text": "for d in range(end):\n        res.append(d)",
                  "children": [
                    {
                      "type": "for",
                      "text": "for",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "d",
                      "children": []
                    },
                    {
                      "type": "in",
                      "text": "in",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "range(end)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "range",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(end)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "end",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "res.append(d)",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "res.append(d)",
                          "children": [
                            {
                              "type": "call",
                              "text": "res.append(d)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "res.append",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "res",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "append",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(d)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "d",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return res",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "res",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef canonical_dims(dims: List[int], maxdim: int):\n    result: List[int] = []\n    for idx in dims:\n        result.append(idx2sign(idx, maxdim, neg=False))\n    return result",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def canonical_dims(dims: List[int], maxdim: int):\n    result: List[int] = []\n    for idx in dims:\n        result.append(idx2sign(idx, maxdim, neg=False))\n    return result",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "canonical_dims",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(dims: List[int], maxdim: int)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "dims: List[int]",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dims",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "List[int]",
                      "children": [
                        {
                          "type": "subscript",
                          "text": "List[int]",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "List",
                              "children": []
                            },
                            {
                              "type": "[",
                              "text": "[",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "]",
                              "text": "]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "maxdim: int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "maxdim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "result: List[int] = []\n    for idx in dims:\n        result.append(idx2sign(idx, maxdim, neg=False))\n    return result",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "result: List[int] = []",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "result: List[int] = []",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "result",
                          "children": []
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "type",
                          "text": "List[int]",
                          "children": [
                            {
                              "type": "subscript",
                              "text": "List[int]",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "List",
                                  "children": []
                                },
                                {
                                  "type": "[",
                                  "text": "[",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "int",
                                  "children": []
                                },
                                {
                                  "type": "]",
                                  "text": "]",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "list",
                          "text": "[]",
                          "children": [
                            {
                              "type": "[",
                              "text": "[",
                              "children": []
                            },
                            {
                              "type": "]",
                              "text": "]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "for_statement",
                  "text": "for idx in dims:\n        result.append(idx2sign(idx, maxdim, neg=False))",
                  "children": [
                    {
                      "type": "for",
                      "text": "for",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "idx",
                      "children": []
                    },
                    {
                      "type": "in",
                      "text": "in",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "dims",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "result.append(idx2sign(idx, maxdim, neg=False))",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "result.append(idx2sign(idx, maxdim, neg=False))",
                          "children": [
                            {
                              "type": "call",
                              "text": "result.append(idx2sign(idx, maxdim, neg=False))",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "result.append",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "result",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "append",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(idx2sign(idx, maxdim, neg=False))",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "call",
                                      "text": "idx2sign(idx, maxdim, neg=False)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "idx2sign",
                                          "children": []
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(idx, maxdim, neg=False)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "idx",
                                              "children": []
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "maxdim",
                                              "children": []
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "keyword_argument",
                                              "text": "neg=False",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "neg",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "false",
                                                  "text": "False",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return result",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "result",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def size2shape(*size: Union[Tuple[int], int]) -> Tuple[int]:\n    return make_tuple(strip_tuple(size))",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "size2shape",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(*size: Union[Tuple[int], int])",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "*size: Union[Tuple[int], int]",
              "children": [
                {
                  "type": "list_splat_pattern",
                  "text": "*size",
                  "children": [
                    {
                      "type": "*",
                      "text": "*",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "size",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "Union[Tuple[int], int]",
                  "children": [
                    {
                      "type": "subscript",
                      "text": "Union[Tuple[int], int]",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "Union",
                          "children": []
                        },
                        {
                          "type": "[",
                          "text": "[",
                          "children": []
                        },
                        {
                          "type": "subscript",
                          "text": "Tuple[int]",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "Tuple",
                              "children": []
                            },
                            {
                              "type": "[",
                              "text": "[",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "]",
                              "text": "]",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        },
                        {
                          "type": "]",
                          "text": "]",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": "->",
          "text": "->",
          "children": []
        },
        {
          "type": "type",
          "text": "Tuple[int]",
          "children": [
            {
              "type": "subscript",
              "text": "Tuple[int]",
              "children": [
                {
                  "type": "identifier",
                  "text": "Tuple",
                  "children": []
                },
                {
                  "type": "[",
                  "text": "[",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "int",
                  "children": []
                },
                {
                  "type": "]",
                  "text": "]",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "return make_tuple(strip_tuple(size))",
          "children": [
            {
              "type": "return_statement",
              "text": "return make_tuple(strip_tuple(size))",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "make_tuple(strip_tuple(size))",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "make_tuple",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(strip_tuple(size))",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "strip_tuple(size)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "strip_tuple",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(size)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "size",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def broadcast_shapes(*shapes: Tuple[int]) -> Tuple[int]:\n    \"\"\"Apply numpy broadcasting rules to shapes.\"\"\"\n    result = []\n    for dims in itertools.zip_longest(*map(reversed, shapes), fillvalue=1):\n        dim: int = 1\n        for d in dims:\n            if dim != 1 and d != 1 and d != dim:\n                raise ValueError(\"Shapes can't be broadcasted\")\n            elif d > dim:\n                dim = d\n        result.append(dim)\n    return tuple(reversed(result))",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "broadcast_shapes",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(*shapes: Tuple[int])",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "*shapes: Tuple[int]",
              "children": [
                {
                  "type": "list_splat_pattern",
                  "text": "*shapes",
                  "children": [
                    {
                      "type": "*",
                      "text": "*",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "shapes",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "Tuple[int]",
                  "children": [
                    {
                      "type": "subscript",
                      "text": "Tuple[int]",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "Tuple",
                          "children": []
                        },
                        {
                          "type": "[",
                          "text": "[",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        },
                        {
                          "type": "]",
                          "text": "]",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": "->",
          "text": "->",
          "children": []
        },
        {
          "type": "type",
          "text": "Tuple[int]",
          "children": [
            {
              "type": "subscript",
              "text": "Tuple[int]",
              "children": [
                {
                  "type": "identifier",
                  "text": "Tuple",
                  "children": []
                },
                {
                  "type": "[",
                  "text": "[",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "int",
                  "children": []
                },
                {
                  "type": "]",
                  "text": "]",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "\"\"\"Apply numpy broadcasting rules to shapes.\"\"\"\n    result = []\n    for dims in itertools.zip_longest(*map(reversed, shapes), fillvalue=1):\n        dim: int = 1\n        for d in dims:\n            if dim != 1 and d != 1 and d != dim:\n                raise ValueError(\"Shapes can't be broadcasted\")\n            elif d > dim:\n                dim = d\n        result.append(dim)\n    return tuple(reversed(result))",
          "children": [
            {
              "type": "expression_statement",
              "text": "\"\"\"Apply numpy broadcasting rules to shapes.\"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "\"\"\"Apply numpy broadcasting rules to shapes.\"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "result = []",
              "children": [
                {
                  "type": "assignment",
                  "text": "result = []",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "result",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "list",
                      "text": "[]",
                      "children": [
                        {
                          "type": "[",
                          "text": "[",
                          "children": []
                        },
                        {
                          "type": "]",
                          "text": "]",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "for_statement",
              "text": "for dims in itertools.zip_longest(*map(reversed, shapes), fillvalue=1):\n        dim: int = 1\n        for d in dims:\n            if dim != 1 and d != 1 and d != dim:\n                raise ValueError(\"Shapes can't be broadcasted\")\n            elif d > dim:\n                dim = d\n        result.append(dim)",
              "children": [
                {
                  "type": "for",
                  "text": "for",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "dims",
                  "children": []
                },
                {
                  "type": "in",
                  "text": "in",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "itertools.zip_longest(*map(reversed, shapes), fillvalue=1)",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "itertools.zip_longest",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "itertools",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "zip_longest",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "text": "(*map(reversed, shapes), fillvalue=1)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "list_splat",
                          "text": "*map(reversed, shapes)",
                          "children": [
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "map(reversed, shapes)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "map",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(reversed, shapes)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "reversed",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "shapes",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "fillvalue=1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "fillvalue",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "dim: int = 1\n        for d in dims:\n            if dim != 1 and d != 1 and d != dim:\n                raise ValueError(\"Shapes can't be broadcasted\")\n            elif d > dim:\n                dim = d\n        result.append(dim)",
                  "children": [
                    {
                      "type": "expression_statement",
                      "text": "dim: int = 1",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "dim: int = 1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": ":",
                              "text": ":",
                              "children": []
                            },
                            {
                              "type": "type",
                              "text": "int",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "for_statement",
                      "text": "for d in dims:\n            if dim != 1 and d != 1 and d != dim:\n                raise ValueError(\"Shapes can't be broadcasted\")\n            elif d > dim:\n                dim = d",
                      "children": [
                        {
                          "type": "for",
                          "text": "for",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "d",
                          "children": []
                        },
                        {
                          "type": "in",
                          "text": "in",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "dims",
                          "children": []
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "if dim != 1 and d != 1 and d != dim:\n                raise ValueError(\"Shapes can't be broadcasted\")\n            elif d > dim:\n                dim = d",
                          "children": [
                            {
                              "type": "if_statement",
                              "text": "if dim != 1 and d != 1 and d != dim:\n                raise ValueError(\"Shapes can't be broadcasted\")\n            elif d > dim:\n                dim = d",
                              "children": [
                                {
                                  "type": "if",
                                  "text": "if",
                                  "children": []
                                },
                                {
                                  "type": "boolean_operator",
                                  "text": "dim != 1 and d != 1 and d != dim",
                                  "children": [
                                    {
                                      "type": "boolean_operator",
                                      "text": "dim != 1 and d != 1",
                                      "children": [
                                        {
                                          "type": "comparison_operator",
                                          "text": "dim != 1",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "!=",
                                              "text": "!=",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "1",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "and",
                                          "text": "and",
                                          "children": []
                                        },
                                        {
                                          "type": "comparison_operator",
                                          "text": "d != 1",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "d",
                                              "children": []
                                            },
                                            {
                                              "type": "!=",
                                              "text": "!=",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "1",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "and",
                                      "text": "and",
                                      "children": []
                                    },
                                    {
                                      "type": "comparison_operator",
                                      "text": "d != dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "d",
                                          "children": []
                                        },
                                        {
                                          "type": "!=",
                                          "text": "!=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ":",
                                  "text": ":",
                                  "children": []
                                },
                                {
                                  "type": "block",
                                  "text": "raise ValueError(\"Shapes can't be broadcasted\")",
                                  "children": [
                                    {
                                      "type": "raise_statement",
                                      "text": "raise ValueError(\"Shapes can't be broadcasted\")",
                                      "children": [
                                        {
                                          "type": "raise",
                                          "text": "raise",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "ValueError(\"Shapes can't be broadcasted\")",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "ValueError",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(\"Shapes can't be broadcasted\")",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "string",
                                                  "text": "\"Shapes can't be broadcasted\"",
                                                  "children": [
                                                    {
                                                      "type": "\"",
                                                      "text": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "\"",
                                                      "text": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "elif_clause",
                                  "text": "elif d > dim:\n                dim = d",
                                  "children": [
                                    {
                                      "type": "elif",
                                      "text": "elif",
                                      "children": []
                                    },
                                    {
                                      "type": "comparison_operator",
                                      "text": "d > dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "d",
                                          "children": []
                                        },
                                        {
                                          "type": ">",
                                          "text": ">",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ":",
                                      "text": ":",
                                      "children": []
                                    },
                                    {
                                      "type": "block",
                                      "text": "dim = d",
                                      "children": [
                                        {
                                          "type": "expression_statement",
                                          "text": "dim = d",
                                          "children": [
                                            {
                                              "type": "assignment",
                                              "text": "dim = d",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "dim",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "d",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "text": "result.append(dim)",
                      "children": [
                        {
                          "type": "call",
                          "text": "result.append(dim)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "result.append",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "result",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "append",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(dim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return tuple(reversed(result))",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "tuple(reversed(result))",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "tuple",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(reversed(result))",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "reversed(result)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "reversed",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(result)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "result",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def ismanifold(instance, cls):\n    \"\"\"\n    Check if interface of an instance is compatible with given class.\n\n    Parameters\n    ----------\n    instance : geoopt.Manifold\n        check if a given manifold is compatible with cls API\n    cls : type\n        manifold type\n\n    Returns\n    -------\n    bool\n        comparison result\n    \"\"\"\n    if not issubclass(cls, geoopt.manifolds.Manifold):\n        raise TypeError(\"`cls` should be a subclass of geoopt.manifolds.Manifold\")\n    if not isinstance(instance, geoopt.manifolds.Manifold):\n        return False\n    else:\n        # this is the case to care about, Scaled class is a proxy, but fails instance checks\n        while isinstance(instance, geoopt.Scaled):\n            instance = instance.base\n        return isinstance(instance, cls)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "ismanifold",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(instance, cls)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "instance",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "cls",
              "children": []
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "\"\"\"\n    Check if interface of an instance is compatible with given class.\n\n    Parameters\n    ----------\n    instance : geoopt.Manifold\n        check if a given manifold is compatible with cls API\n    cls : type\n        manifold type\n\n    Returns\n    -------\n    bool\n        comparison result\n    \"\"\"\n    if not issubclass(cls, geoopt.manifolds.Manifold):\n        raise TypeError(\"`cls` should be a subclass of geoopt.manifolds.Manifold\")\n    if not isinstance(instance, geoopt.manifolds.Manifold):\n        return False\n    else:\n        # this is the case to care about, Scaled class is a proxy, but fails instance checks\n        while isinstance(instance, geoopt.Scaled):\n            instance = instance.base\n        return isinstance(instance, cls)",
          "children": [
            {
              "type": "expression_statement",
              "text": "\"\"\"\n    Check if interface of an instance is compatible with given class.\n\n    Parameters\n    ----------\n    instance : geoopt.Manifold\n        check if a given manifold is compatible with cls API\n    cls : type\n        manifold type\n\n    Returns\n    -------\n    bool\n        comparison result\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "\"\"\"\n    Check if interface of an instance is compatible with given class.\n\n    Parameters\n    ----------\n    instance : geoopt.Manifold\n        check if a given manifold is compatible with cls API\n    cls : type\n        manifold type\n\n    Returns\n    -------\n    bool\n        comparison result\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "text": "if not issubclass(cls, geoopt.manifolds.Manifold):\n        raise TypeError(\"`cls` should be a subclass of geoopt.manifolds.Manifold\")",
              "children": [
                {
                  "type": "if",
                  "text": "if",
                  "children": []
                },
                {
                  "type": "not_operator",
                  "text": "not issubclass(cls, geoopt.manifolds.Manifold)",
                  "children": [
                    {
                      "type": "not",
                      "text": "not",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "issubclass(cls, geoopt.manifolds.Manifold)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "issubclass",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(cls, geoopt.manifolds.Manifold)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "cls",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "attribute",
                              "text": "geoopt.manifolds.Manifold",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "geoopt.manifolds",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "geoopt",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "manifolds",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "Manifold",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "raise TypeError(\"`cls` should be a subclass of geoopt.manifolds.Manifold\")",
                  "children": [
                    {
                      "type": "raise_statement",
                      "text": "raise TypeError(\"`cls` should be a subclass of geoopt.manifolds.Manifold\")",
                      "children": [
                        {
                          "type": "raise",
                          "text": "raise",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "TypeError(\"`cls` should be a subclass of geoopt.manifolds.Manifold\")",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "TypeError",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(\"`cls` should be a subclass of geoopt.manifolds.Manifold\")",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string",
                                  "text": "\"`cls` should be a subclass of geoopt.manifolds.Manifold\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "text": "if not isinstance(instance, geoopt.manifolds.Manifold):\n        return False\n    else:\n        # this is the case to care about, Scaled class is a proxy, but fails instance checks\n        while isinstance(instance, geoopt.Scaled):\n            instance = instance.base\n        return isinstance(instance, cls)",
              "children": [
                {
                  "type": "if",
                  "text": "if",
                  "children": []
                },
                {
                  "type": "not_operator",
                  "text": "not isinstance(instance, geoopt.manifolds.Manifold)",
                  "children": [
                    {
                      "type": "not",
                      "text": "not",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "isinstance(instance, geoopt.manifolds.Manifold)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "isinstance",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(instance, geoopt.manifolds.Manifold)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "instance",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "attribute",
                              "text": "geoopt.manifolds.Manifold",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "geoopt.manifolds",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "geoopt",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "manifolds",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "Manifold",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "return False",
                  "children": [
                    {
                      "type": "return_statement",
                      "text": "return False",
                      "children": [
                        {
                          "type": "return",
                          "text": "return",
                          "children": []
                        },
                        {
                          "type": "false",
                          "text": "False",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "text": "else:\n        # this is the case to care about, Scaled class is a proxy, but fails instance checks\n        while isinstance(instance, geoopt.Scaled):\n            instance = instance.base\n        return isinstance(instance, cls)",
                  "children": [
                    {
                      "type": "else",
                      "text": "else",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "comment",
                      "text": "# this is the case to care about, Scaled class is a proxy, but fails instance checks",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "while isinstance(instance, geoopt.Scaled):\n            instance = instance.base\n        return isinstance(instance, cls)",
                      "children": [
                        {
                          "type": "while_statement",
                          "text": "while isinstance(instance, geoopt.Scaled):\n            instance = instance.base",
                          "children": [
                            {
                              "type": "while",
                              "text": "while",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "isinstance(instance, geoopt.Scaled)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "isinstance",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(instance, geoopt.Scaled)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "instance",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "attribute",
                                      "text": "geoopt.Scaled",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "geoopt",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "Scaled",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ":",
                              "text": ":",
                              "children": []
                            },
                            {
                              "type": "block",
                              "text": "instance = instance.base",
                              "children": [
                                {
                                  "type": "expression_statement",
                                  "text": "instance = instance.base",
                                  "children": [
                                    {
                                      "type": "assignment",
                                      "text": "instance = instance.base",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "instance",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "attribute",
                                          "text": "instance.base",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "instance",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "base",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "return_statement",
                          "text": "return isinstance(instance, cls)",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "isinstance(instance, cls)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "isinstance",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(instance, cls)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "instance",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "cls",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def canonical_manifold(manifold: \"geoopt.Manifold\"):\n    \"\"\"\n    Get a canonical manifold.\n\n    If a manifold is wrapped with Scaled. Some attributes may not be available. This should help if you really need them.\n\n    Parameters\n    ----------\n    manifold : geoopt.Manifold\n\n    Returns\n    -------\n    geoopt.Maniflold\n        an unwrapped manifold\n    \"\"\"\n    while isinstance(manifold, geoopt.Scaled):\n        manifold = manifold.base\n    return manifold",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "canonical_manifold",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(manifold: \"geoopt.Manifold\")",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "manifold: \"geoopt.Manifold\"",
              "children": [
                {
                  "type": "identifier",
                  "text": "manifold",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "\"geoopt.Manifold\"",
                  "children": [
                    {
                      "type": "string",
                      "text": "\"geoopt.Manifold\"",
                      "children": [
                        {
                          "type": "\"",
                          "text": "\"",
                          "children": []
                        },
                        {
                          "type": "\"",
                          "text": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "\"\"\"\n    Get a canonical manifold.\n\n    If a manifold is wrapped with Scaled. Some attributes may not be available. This should help if you really need them.\n\n    Parameters\n    ----------\n    manifold : geoopt.Manifold\n\n    Returns\n    -------\n    geoopt.Maniflold\n        an unwrapped manifold\n    \"\"\"\n    while isinstance(manifold, geoopt.Scaled):\n        manifold = manifold.base\n    return manifold",
          "children": [
            {
              "type": "expression_statement",
              "text": "\"\"\"\n    Get a canonical manifold.\n\n    If a manifold is wrapped with Scaled. Some attributes may not be available. This should help if you really need them.\n\n    Parameters\n    ----------\n    manifold : geoopt.Manifold\n\n    Returns\n    -------\n    geoopt.Maniflold\n        an unwrapped manifold\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "\"\"\"\n    Get a canonical manifold.\n\n    If a manifold is wrapped with Scaled. Some attributes may not be available. This should help if you really need them.\n\n    Parameters\n    ----------\n    manifold : geoopt.Manifold\n\n    Returns\n    -------\n    geoopt.Maniflold\n        an unwrapped manifold\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "while_statement",
              "text": "while isinstance(manifold, geoopt.Scaled):\n        manifold = manifold.base",
              "children": [
                {
                  "type": "while",
                  "text": "while",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "isinstance(manifold, geoopt.Scaled)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "isinstance",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(manifold, geoopt.Scaled)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "manifold",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "attribute",
                          "text": "geoopt.Scaled",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "geoopt",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Scaled",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "manifold = manifold.base",
                  "children": [
                    {
                      "type": "expression_statement",
                      "text": "manifold = manifold.base",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "manifold = manifold.base",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "manifold",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "attribute",
                              "text": "manifold.base",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "manifold",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "base",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return manifold",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "manifold",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}