{
  "type": "module",
  "text": "# https://github.com/geoopt/geoopt/blob/master/geoopt/manifolds/stereographic/math.py\nr\"\"\"\n:math:`\\kappa`-Stereographic math module.\n\nThe functions for the mathematics in gyrovector spaces are taken from the\nfollowing resources:\n\n    [1] Ganea, Octavian, Gary Bécigneul, and Thomas Hofmann. \"Hyperbolic\n           neural networks.\" Advances in neural information processing systems.\n           2018.\n    [2] Bachmann, Gregor, Gary Bécigneul, and Octavian-Eugen Ganea. \"Constant\n           Curvature Graph Convolutional Networks.\" arXiv preprint\n           arXiv:1911.05076 (2019).\n    [3] Skopek, Ondrej, Octavian-Eugen Ganea, and Gary Bécigneul.\n           \"Mixed-curvature Variational Autoencoders.\" arXiv preprint\n           arXiv:1911.08411 (2019).\n    [4] Ungar, Abraham A. Analytic hyperbolic geometry: Mathematical\n           foundations and applications. World Scientific, 2005.\n    [5] Albert, Ungar Abraham. Barycentric calculus in Euclidean and\n           hyperbolic geometry: A comparative introduction. World Scientific,\n           2010.\n\"\"\"\n\nimport functools\nimport torch.jit\nfrom typing import List, Optional\nfrom ...utils import list_range, drop_dims, sign, clamp_abs, sabs\n\n\n@torch.jit.script\ndef tanh(x):\n    return x.clamp(-15, 15).tanh()\n\n\n@torch.jit.script\ndef artanh(x: torch.Tensor):\n    x = x.clamp(-1 + 1e-7, 1 - 1e-7)\n    return (torch.log(1 + x).sub(torch.log(1 - x))).mul(0.5)\n\n\n@torch.jit.script\ndef arsinh(x: torch.Tensor):\n    return (x + torch.sqrt(1 + x.pow(2))).clamp_min(1e-15).log().to(x.dtype)\n\n\n@torch.jit.script\ndef abs_zero_grad(x):\n    # this op has derivative equal to 1 at zero\n    return x * sign(x)\n\n\n@torch.jit.script\ndef tan_k_zero_taylor(x: torch.Tensor, k: torch.Tensor, order: int = -1):\n    if order == 0:\n        return x\n    k = abs_zero_grad(k)\n    if order == -1 or order == 5:\n        return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n            + 1382 / 155925 * k**5 * x**11\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x + 1 / 3 * k * x**3\n    elif order == 2:\n        return x + 1 / 3 * k * x**3 + 2 / 15 * k**2 * x**5\n    elif order == 3:\n        return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n        )\n    elif order == 4:\n        return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")\n\n\n@torch.jit.script\ndef artan_k_zero_taylor(x: torch.Tensor, k: torch.Tensor, order: int = -1):\n    if order == 0:\n        return x\n    k = abs_zero_grad(k)\n    if order == -1 or order == 5:\n        return (\n            x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n            - 1 / 11 * k**5 * x**11\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x - 1 / 3 * k * x**3\n    elif order == 2:\n        return x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5\n    elif order == 3:\n        return (\n            x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5 - 1 / 7 * k**3 * x**7\n        )\n    elif order == 4:\n        return (\n            x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")\n\n\n@torch.jit.script\ndef arsin_k_zero_taylor(x: torch.Tensor, k: torch.Tensor, order: int = -1):\n    if order == 0:\n        return x\n    k = abs_zero_grad(k)\n    if order == -1 or order == 5:\n        return (\n            x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n            + 63 / 2816 * k**5 * x**11\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x + k * x**3 / 6\n    elif order == 2:\n        return x + k * x**3 / 6 + 3 / 40 * k**2 * x**5\n    elif order == 3:\n        return x + k * x**3 / 6 + 3 / 40 * k**2 * x**5 + 5 / 112 * k**3 * x**7\n    elif order == 4:\n        return (\n            x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")\n\n\n@torch.jit.script\ndef sin_k_zero_taylor(x: torch.Tensor, k: torch.Tensor, order: int = -1):\n    if order == 0:\n        return x\n    k = abs_zero_grad(k)\n    if order == -1 or order == 5:\n        return (\n            x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n            - k**5 * x**11 / 39916800\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x - k * x**3 / 6\n    elif order == 2:\n        return x - k * x**3 / 6 + k**2 * x**5 / 120\n    elif order == 3:\n        return x - k * x**3 / 6 + k**2 * x**5 / 120 - k**3 * x**7 / 5040\n    elif order == 4:\n        return (\n            x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")\n\n\n@torch.jit.script\ndef tan_k(x: torch.Tensor, k: torch.Tensor):\n    k_sign = k.sign()\n    zero = torch.zeros((), device=k.device, dtype=k.dtype)\n    k_zero = k.isclose(zero)\n    # shrink sign\n    k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))\n    if torch.all(k_zero):\n        return tan_k_zero_taylor(x, k, order=1)\n    k_sqrt = sabs(k).sqrt()\n    scaled_x = x * k_sqrt\n\n    if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * tanh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.clamp_max(1e38).tan()\n    else:\n        tan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.clamp_max(1e38).tan(), tanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, tan_k_zero_taylor(x, k, order=1), tan_k_nonzero)\n\n\n@torch.jit.script\ndef artan_k(x: torch.Tensor, k: torch.Tensor):\n    k_sign = k.sign()\n    zero = torch.zeros((), device=k.device, dtype=k.dtype)\n    k_zero = k.isclose(zero)\n    # shrink sign\n    k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))\n    if torch.all(k_zero):\n        return artan_k_zero_taylor(x, k, order=1)\n    k_sqrt = sabs(k).sqrt()\n    scaled_x = x * k_sqrt\n\n    if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * artanh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.atan()\n    else:\n        artan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.atan(), artanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, artan_k_zero_taylor(x, k, order=1), artan_k_nonzero)\n\n\n@torch.jit.script\ndef arsin_k(x: torch.Tensor, k: torch.Tensor):\n    k_sign = k.sign()\n    zero = torch.zeros((), device=k.device, dtype=k.dtype)\n    k_zero = k.isclose(zero)\n    # shrink sign\n    k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))\n    if torch.all(k_zero):\n        return arsin_k_zero_taylor(x, k)\n    k_sqrt = sabs(k).sqrt()\n    scaled_x = x * k_sqrt\n\n    if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * arsinh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.asin()\n    else:\n        arsin_k_nonzero = (\n            torch.where(\n                k_sign.gt(0),\n                scaled_x.clamp(-1 + 1e-7, 1 - 1e-7).asin(),\n                arsinh(scaled_x),\n            )\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, arsin_k_zero_taylor(x, k, order=1), arsin_k_nonzero)\n\n\n@torch.jit.script\ndef sin_k(x: torch.Tensor, k: torch.Tensor):\n    k_sign = k.sign()\n    zero = torch.zeros((), device=k.device, dtype=k.dtype)\n    k_zero = k.isclose(zero)\n    # shrink sign\n    k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))\n    if torch.all(k_zero):\n        return sin_k_zero_taylor(x, k)\n    k_sqrt = sabs(k).sqrt()\n    scaled_x = x * k_sqrt\n\n    if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * torch.sinh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.sin()\n    else:\n        sin_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.sin(), torch.sinh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, sin_k_zero_taylor(x, k, order=1), sin_k_nonzero)\n\n\ndef project(x: torch.Tensor, *, k: torch.Tensor, dim=-1, eps=-1):\n    r\"\"\"\n    Safe projection on the manifold for numerical stability.\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension to compute norm\n    eps : float\n        stability parameter, uses default for dtype if not provided\n\n    Returns\n    -------\n    tensor\n        projected vector on the manifold\n    \"\"\"\n    return _project(x, k, dim, eps)\n\n\n@torch.jit.script\ndef _project(x, k, dim: int = -1, eps: float = -1.0):\n    if eps < 0:\n        if x.dtype == torch.float32:\n            eps = 4e-3\n        else:\n            eps = 1e-5\n    maxnorm = (1 - eps) / (sabs(k) ** 0.5)\n    maxnorm = torch.where(k.lt(0), maxnorm, k.new_full((), 1e15))\n    norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    cond = norm > maxnorm\n    projected = x / norm * maxnorm\n    return torch.where(cond, projected, x)\n\n\ndef lambda_x(x: torch.Tensor, *, k: torch.Tensor, keepdim=False, dim=-1):\n    r\"\"\"\n    Compute the conformal factor :math:`\\lambda^\\kappa_x` for a point on the ball.\n\n    .. math::\n        \\lambda^\\kappa_x = \\frac{2}{1 + \\kappa \\|x\\|_2^2}\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        conformal factor\n    \"\"\"\n    return _lambda_x(x, k, keepdim=keepdim, dim=dim)\n\n\n@torch.jit.script\ndef _lambda_x(x: torch.Tensor, k: torch.Tensor, keepdim: bool = False, dim: int = -1):\n    return 2 / (1 + k * x.pow(2).sum(dim=dim, keepdim=keepdim)).clamp_min(1e-15)\n\n\ndef inner(\n    x: torch.Tensor, u: torch.Tensor, v: torch.Tensor, *, k, keepdim=False, dim=-1\n):\n    r\"\"\"\n    Compute inner product for two vectors on the tangent space w.r.t Riemannian metric on the Poincare ball.\n\n    .. math::\n\n        \\langle u, v\\rangle_x = (\\lambda^\\kappa_x)^2 \\langle u, v \\rangle\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    u : tensor\n        tangent vector to :math:`x` on Poincare ball\n    v : tensor\n        tangent vector to :math:`x` on Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        inner product\n    \"\"\"\n    return _inner(x, u, v, k, keepdim=keepdim, dim=dim)\n\n\n@torch.jit.script\ndef _inner(\n    x: torch.Tensor,\n    u: torch.Tensor,\n    v: torch.Tensor,\n    k: torch.Tensor,\n    keepdim: bool = False,\n    dim: int = -1,\n):\n    return _lambda_x(x, k, keepdim=True, dim=dim) ** 2 * (u * v).sum(\n        dim=dim, keepdim=keepdim\n    )\n\n\ndef norm(x: torch.Tensor, u: torch.Tensor, *, k: torch.Tensor, keepdim=False, dim=-1):\n    r\"\"\"\n    Compute vector norm on the tangent space w.r.t Riemannian metric on the Poincare ball.\n\n    .. math::\n\n        \\|u\\|_x = \\lambda^\\kappa_x \\|u\\|_2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    u : tensor\n        tangent vector to :math:`x` on Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        norm of vector\n    \"\"\"\n    return _norm(x, u, k, keepdim=keepdim, dim=dim)\n\n\n@torch.jit.script\ndef _norm(\n    x: torch.Tensor,\n    u: torch.Tensor,\n    k: torch.Tensor,\n    keepdim: bool = False,\n    dim: int = -1,\n):\n    return _lambda_x(x, k, keepdim=keepdim, dim=dim) * u.norm(\n        dim=dim, keepdim=keepdim, p=2\n    )\n\n\ndef mobius_add(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the Möbius gyrovector addition.\n\n    .. math::\n\n        x \\oplus_\\kappa y =\n        \\frac{\n            (1 - 2 \\kappa \\langle x, y\\rangle - \\kappa \\|y\\|^2_2) x +\n            (1 + \\kappa \\|x\\|_2^2) y\n        }{\n            1 - 2 \\kappa \\langle x, y\\rangle + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        }\n\n    .. plot:: plots/extended/stereographic/mobius_add.py\n\n    In general this operation is not commutative:\n\n    .. math::\n\n        x \\oplus_\\kappa y \\ne y \\oplus_\\kappa x\n\n    But in some cases this property holds:\n\n    * zero vector case\n\n    .. math::\n\n        \\mathbf{0} \\oplus_\\kappa x = x \\oplus_\\kappa \\mathbf{0}\n\n    * zero curvature case that is same as Euclidean addition\n\n    .. math::\n\n        x \\oplus_0 y = y \\oplus_0 x\n\n    Another useful property is so called left-cancellation law:\n\n    .. math::\n\n        (-x) \\oplus_\\kappa (x \\oplus_\\kappa y) = y\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    y : tensor\n        point on the manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius addition\n    \"\"\"\n    return _mobius_add(x, y, k, dim=dim)\n\n\n@torch.jit.script\ndef _mobius_add(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    x2 = x.pow(2).sum(dim=dim, keepdim=True)\n    y2 = y.pow(2).sum(dim=dim, keepdim=True)\n    xy = (x * y).sum(dim=dim, keepdim=True)\n    num = (1 - 2 * k * xy - k * y2) * x + (1 + k * x2) * y\n    denom = 1 - 2 * k * xy + k**2 * x2 * y2\n    # minimize denom (omit K to simplify th notation)\n    # 1)\n    # {d(denom)/d(x) = 2 y + 2x * <y, y> = 0\n    # {d(denom)/d(y) = 2 x + 2y * <x, x> = 0\n    # 2)\n    # {y + x * <y, y> = 0\n    # {x + y * <x, x> = 0\n    # 3)\n    # {- y/<y, y> = x\n    # {- x/<x, x> = y\n    # 4)\n    # minimum = 1 - 2 <y, y>/<y, y> + <y, y>/<y, y> = 0\n    return num / denom.clamp_min(1e-15)\n\n\ndef mobius_sub(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the Möbius gyrovector subtraction.\n\n    The Möbius subtraction can be represented via the Möbius addition as\n    follows:\n\n    .. math::\n\n        x \\ominus_\\kappa y = x \\oplus_\\kappa (-y)\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius subtraction\n    \"\"\"\n    return _mobius_sub(x, y, k, dim=dim)\n\n\ndef _mobius_sub(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    return _mobius_add(x, -y, k, dim=dim)\n\n\ndef gyration(\n    a: torch.Tensor, b: torch.Tensor, u: torch.Tensor, *, k: torch.Tensor, dim=-1\n):\n    r\"\"\"\n    Compute the gyration of :math:`u` by :math:`[a,b]`.\n\n    The gyration is a special operation of gyrovector spaces. The gyrovector\n    space addition operation :math:`\\oplus_\\kappa` is not associative (as\n    mentioned in :func:`mobius_add`), but it is gyroassociative, which means\n\n    .. math::\n\n        u \\oplus_\\kappa (v \\oplus_\\kappa w)\n        =\n        (u\\oplus_\\kappa v) \\oplus_\\kappa \\operatorname{gyr}[u, v]w,\n\n    where\n\n    .. math::\n\n        \\operatorname{gyr}[u, v]w\n        =\n        \\ominus (u \\oplus_\\kappa v) \\oplus (u \\oplus_\\kappa (v \\oplus_\\kappa w))\n\n    We can simplify this equation using the explicit formula for the Möbius\n    addition [1]. Recall,\n\n    .. math::\n\n        A = - \\kappa^2 \\langle u, w\\rangle \\langle v, v\\rangle\n            - \\kappa \\langle v, w\\rangle\n            + 2 \\kappa^2 \\langle u, v\\rangle \\langle v, w\\rangle\\\\\n        B = - \\kappa^2 \\langle v, w\\rangle \\langle u, u\\rangle\n            + \\kappa \\langle u, w\\rangle\\\\\n        D = 1 - 2 \\kappa \\langle u, v\\rangle\n            + \\kappa^2 \\langle u, u\\rangle \\langle v, v\\rangle\\\\\n\n        \\operatorname{gyr}[u, v]w = w + 2 \\frac{A u + B v}{D}.\n\n    Parameters\n    ----------\n    a : tensor\n        first point on manifold\n    b : tensor\n        second point on manifold\n    u : tensor\n        vector field for operation\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of automorphism\n\n    References\n    ----------\n    [1]  A. A. Ungar (2009), A Gyrovector Space Approach to Hyperbolic Geometry\n    \"\"\"\n    return _gyration(a, b, u, k, dim=dim)\n\n\n@torch.jit.script\ndef _gyration(\n    u: torch.Tensor, v: torch.Tensor, w: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    # non-simplified\n    # mupv = -_mobius_add(u, v, K)\n    # vpw = _mobius_add(u, w, K)\n    # upvpw = _mobius_add(u, vpw, K)\n    # return _mobius_add(mupv, upvpw, K)\n    # simplified\n    u2 = u.pow(2).sum(dim=dim, keepdim=True)\n    v2 = v.pow(2).sum(dim=dim, keepdim=True)\n    uv = (u * v).sum(dim=dim, keepdim=True)\n    uw = (u * w).sum(dim=dim, keepdim=True)\n    vw = (v * w).sum(dim=dim, keepdim=True)\n    K2 = k**2\n    a = -K2 * uw * v2 - k * vw + 2 * K2 * uv * vw\n    b = -K2 * vw * u2 + k * uw\n    d = 1 - 2 * k * uv + K2 * u2 * v2\n    return w + 2 * (a * u + b * v) / d.clamp_min(1e-15)\n\n\ndef mobius_coadd(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the Möbius gyrovector coaddition.\n\n    The addition operation :math:`\\oplus_\\kappa` is neither associative, nor\n    commutative. In contrast, the coaddition :math:`\\boxplus_\\kappa` (or\n    cooperation) is an associative operation that is defined as follows.\n\n    .. math::\n\n        a \\boxplus_\\kappa b\n        =\n        b \\boxplus_\\kappa a\n        =\n        a\\operatorname{gyr}[a, -b]b\\\\\n        = \\frac{\n            (1 + \\kappa \\|y\\|^2_2) x + (1 + \\kappa \\|x\\|_2^2) y\n            }{\n            1 + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        },\n\n    where :math:`\\operatorname{gyr}[a, b]v = \\ominus_\\kappa (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa v))`\n\n    The following right cancellation property holds\n\n    .. math::\n\n        (a \\boxplus_\\kappa b) \\ominus_\\kappa b = a\\\\\n        (a \\oplus_\\kappa b) \\boxminus_\\kappa b = a\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius coaddition\n\n    \"\"\"\n    return _mobius_coadd(x, y, k, dim=dim)\n\n\n# TODO: check numerical stability with Gregor's paper!!!\n@torch.jit.script\ndef _mobius_coadd(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    # x2 = x.pow(2).sum(dim=dim, keepdim=True)\n    # y2 = y.pow(2).sum(dim=dim, keepdim=True)\n    # num = (1 + K * y2) * x + (1 + K * x2) * y\n    # denom = 1 - K ** 2 * x2 * y2\n    # avoid division by zero in this way\n    # return num / denom.clamp_min(1e-15)\n    #\n    return _mobius_add(x, _gyration(x, -y, y, k=k, dim=dim), k, dim=dim)\n\n\ndef mobius_cosub(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the Möbius gyrovector cosubtraction.\n\n    The Möbius cosubtraction is defined as follows:\n\n    .. math::\n\n        a \\boxminus_\\kappa b = a \\boxplus_\\kappa -b\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius cosubtraction\n\n    \"\"\"\n    return _mobius_cosub(x, y, k, dim=dim)\n\n\n@torch.jit.script\ndef _mobius_cosub(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    return _mobius_coadd(x, -y, k, dim=dim)\n\n\n# TODO: can we make this operation somehow safer by breaking up the\n# TODO: scalar multiplication for K>0 when the argument to the\n# TODO: tan function gets close to pi/2+k*pi for k in Z?\n# TODO: one could use the scalar associative law\n# TODO: s_1 (X) s_2 (X) x = (s_1*s_2) (X) x\n# TODO: to implement a more stable Möbius scalar mult\ndef mobius_scalar_mul(r: torch.Tensor, x: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the Möbius scalar multiplication.\n\n    .. math::\n\n        r \\otimes_\\kappa x\n        =\n        \\tan_\\kappa(r\\tan_\\kappa^{-1}(\\|x\\|_2))\\frac{x}{\\|x\\|_2}\n\n    This operation has properties similar to the Euclidean scalar multiplication\n\n    * `n-addition` property\n\n    .. math::\n\n         r \\otimes_\\kappa x = x \\oplus_\\kappa \\dots \\oplus_\\kappa x\n\n    * Distributive property\n\n    .. math::\n\n         (r_1 + r_2) \\otimes_\\kappa x\n         =\n         r_1 \\otimes_\\kappa x \\oplus r_2 \\otimes_\\kappa x\n\n    * Scalar associativity\n\n    .. math::\n\n         (r_1 r_2) \\otimes_\\kappa x = r_1 \\otimes_\\kappa (r_2 \\otimes_\\kappa x)\n\n    * Monodistributivity\n\n    .. math::\n\n         r \\otimes_\\kappa (r_1 \\otimes x \\oplus r_2 \\otimes x) =\n         r \\otimes_\\kappa (r_1 \\otimes x) \\oplus r \\otimes (r_2 \\otimes x)\n\n    * Scaling property\n\n    .. math::\n\n        |r| \\otimes_\\kappa x / \\|r \\otimes_\\kappa x\\|_2 = x/\\|x\\|_2\n\n    Parameters\n    ----------\n    r : tensor\n        scalar for multiplication\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius scalar multiplication\n    \"\"\"\n    return _mobius_scalar_mul(r, x, k, dim=dim)\n\n\n@torch.jit.script\ndef _mobius_scalar_mul(\n    r: torch.Tensor, x: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    res_c = tan_k(r * artan_k(x_norm, k), k) * (x / x_norm)\n    return res_c\n\n\ndef dist(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, keepdim=False, dim=-1):\n    r\"\"\"\n    Compute the geodesic distance between :math:`x` and :math:`y` on the manifold.\n\n    .. math::\n\n        d_\\kappa(x, y) = 2\\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n\n    .. plot:: plots/extended/stereographic/distance.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`y`\n    \"\"\"\n    return _dist(x, y, k, keepdim=keepdim, dim=dim)\n\n\n@torch.jit.script\ndef _dist(\n    x: torch.Tensor,\n    y: torch.Tensor,\n    k: torch.Tensor,\n    keepdim: bool = False,\n    dim: int = -1,\n):\n    return 2.0 * artan_k(\n        _mobius_add(-x, y, k, dim=dim).norm(dim=dim, p=2, keepdim=keepdim), k\n    )\n\n\ndef dist0(x: torch.Tensor, *, k: torch.Tensor, keepdim=False, dim=-1):\n    r\"\"\"\n    Compute geodesic distance to the manifold's origin.\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`0`\n    \"\"\"\n    return _dist0(x, k, keepdim=keepdim, dim=dim)\n\n\n@torch.jit.script\ndef _dist0(x: torch.Tensor, k: torch.Tensor, keepdim: bool = False, dim: int = -1):\n    return 2.0 * artan_k(x.norm(dim=dim, p=2, keepdim=keepdim), k)\n\n\ndef geodesic(\n    t: torch.Tensor, x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1\n):\n    r\"\"\"\n    Compute the point on the path connecting :math:`x` and :math:`y` at time :math:`x`.\n\n    The path can also be treated as an extension of the line segment to an\n    unbounded geodesic that goes through :math:`x` and :math:`y`. The equation\n    of the geodesic is given as:\n\n    .. math::\n\n        \\gamma_{x\\to y}(t)\n        =\n        x \\oplus_\\kappa t \\otimes_\\kappa ((-x) \\oplus_\\kappa y)\n\n    The properties of the geodesic are the following:\n\n    .. math::\n\n        \\gamma_{x\\to y}(0) = x\\\\\n        \\gamma_{x\\to y}(1) = y\\\\\n        \\dot\\gamma_{x\\to y}(t) = v\n\n    Furthermore, the geodesic also satisfies the property of local distance\n    minimization:\n\n    .. math::\n\n         d_\\kappa(\\gamma_{x\\to y}(t_1), \\gamma_{x\\to y}(t_2)) = v|t_1-t_2|\n\n    \"Natural parametrization\" of the curve ensures unit speed geodesics which\n    yields the above formula with :math:`v=1`.\n\n    However, we can always compute the constant speed :math:`v` from the points\n    that the particular path connects:\n\n    .. math::\n\n        v = d_\\kappa(\\gamma_{x\\to y}(0), \\gamma_{x\\to y}(1)) = d_\\kappa(x, y)\n\n\n    Parameters\n    ----------\n    t : tensor\n        travelling time\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        point on the geodesic going through x and y\n    \"\"\"\n    return _geodesic(t, x, y, k, dim=dim)\n\n\n@torch.jit.script\ndef _geodesic(\n    t: torch.Tensor, x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    # this is not very numerically stable\n    v = _mobius_add(-x, y, k, dim=dim)\n    tv = _mobius_scalar_mul(t, v, k, dim=dim)\n    gamma_t = _mobius_add(x, tv, k, dim=dim)\n    return gamma_t\n\n\ndef expmap(x: torch.Tensor, u: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the exponential map of :math:`u` at :math:`x`.\n\n    The expmap is tightly related with :func:`geodesic`. Intuitively, the\n    expmap represents a smooth travel along a geodesic from the starting point\n    :math:`x`, into the initial direction :math:`u` at speed :math:`\\|u\\|_x` for\n    the duration of one time unit. In formulas one can express this as the\n    travel along the curve :math:`\\gamma_{x, u}(t)` such that\n\n    .. math::\n\n        \\gamma_{x, u}(0) = x\\\\\n        \\dot\\gamma_{x, u}(0) = u\\\\\n        \\|\\dot\\gamma_{x, u}(t)\\|_{\\gamma_{x, u}(t)} = \\|u\\|_x\n\n    The existence of this curve relies on uniqueness of the differential\n    equation solution, that is local. For the universal manifold the solution\n    is well defined globally and we have.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_x(u) = \\gamma_{x, u}(1) = \\\\\n        x\\oplus_\\kappa \\tan_\\kappa(\\|u\\|_x/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    u : tensor\n        speed vector in tangent space at x\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{x, u}(1)` end point\n    \"\"\"\n    return _expmap(x, u, k, dim=dim)\n\n\n@torch.jit.script\ndef _expmap(x: torch.Tensor, u: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    lam = _lambda_x(x, k, dim=dim, keepdim=True)\n    second_term = tan_k((lam / 2.0) * u_norm, k) * (u / u_norm)\n    y = _mobius_add(x, second_term, k, dim=dim)\n    return y\n\n\ndef expmap0(u: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the exponential map of :math:`u` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_0(u)\n        =\n        \\tan_\\kappa(\\|u\\|_2/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    u : tensor\n        speed vector on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{0, u}(1)` end point\n    \"\"\"\n    return _expmap0(u, k, dim=dim)\n\n\n@torch.jit.script\ndef _expmap0(u: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    gamma_1 = tan_k(u_norm, k) * (u / u_norm)\n    return gamma_1\n\n\ndef geodesic_unit(\n    t: torch.Tensor, x: torch.Tensor, u: torch.Tensor, *, k: torch.Tensor, dim=-1\n):\n    r\"\"\"\n    Compute the point on the unit speed geodesic.\n\n    The point on the unit speed geodesic at time :math:`t`, starting\n    from :math:`x` with initial direction :math:`u/\\|u\\|_x` is computed\n    as follows:\n\n    .. math::\n\n        \\gamma_{x,u}(t) = x\\oplus_\\kappa \\tan_\\kappa(t/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    t : tensor\n        travelling time\n    x : tensor\n        initial point on manifold\n    u : tensor\n        initial direction in tangent space at x\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the point on the unit speed geodesic\n    \"\"\"\n    return _geodesic_unit(t, x, u, k, dim=dim)\n\n\n@torch.jit.script\ndef _geodesic_unit(\n    t: torch.Tensor,\n    x: torch.Tensor,\n    u: torch.Tensor,\n    k: torch.Tensor,\n    dim: int = -1,\n):\n    u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    second_term = tan_k(t / 2.0, k) * (u / u_norm)\n    gamma_1 = _mobius_add(x, second_term, k, dim=dim)\n    return gamma_1\n\n\ndef logmap(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the logarithmic map of :math:`y` at :math:`x`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_x(y) = \\frac{2}{\\lambda_x^\\kappa}\n        \\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n        * \\frac{(-x)\\oplus_\\kappa y}{\\|(-x)\\oplus_\\kappa y\\|_2}\n\n    The result of the logmap is a vector :math:`u` in the tangent space of\n    :math:`x` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_x(\\operatorname{log}^\\kappa_x(y))\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_x M` that transports :math:`x` to :math:`y`\n    \"\"\"\n    return _logmap(x, y, k, dim=dim)\n\n\n@torch.jit.script\ndef _logmap(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    sub = _mobius_add(-x, y, k, dim=dim)\n    sub_norm = sub.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    lam = _lambda_x(x, k, keepdim=True, dim=dim)\n    return 2.0 * artan_k(sub_norm, k) * (sub / (lam * sub_norm))\n\n\ndef logmap0(y: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the logarithmic map of :math:`y` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_0(y)\n        =\n        \\tan_\\kappa^{-1}(\\|y\\|_2) \\frac{y}{\\|y\\|_2}\n\n    The result of the logmap at the origin is a vector :math:`u` in the tangent\n    space of the origin :math:`0` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Parameters\n    ----------\n    y : tensor\n        target point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_0 M` that transports :math:`0` to :math:`y`\n    \"\"\"\n    return _logmap0(y, k, dim=dim)\n\n\n@torch.jit.script\ndef _logmap0(y: torch.Tensor, k, dim: int = -1):\n    y_norm = y.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    return (y / y_norm) * artan_k(y_norm, k)\n\n\ndef mobius_matvec(m: torch.Tensor, x: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the generalization of matrix-vector multiplication in gyrovector spaces.\n\n    The Möbius matrix vector operation is defined as follows:\n\n    .. math::\n\n        M \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|Mx\\|_2}{\\|x\\|_2}\\tan_\\kappa^{-1}(\\|x\\|_2)\n        \\right)\\frac{Mx}{\\|Mx\\|_2}\n\n    .. plot:: plots/extended/stereographic/mobius_matvec.py\n\n    Parameters\n    ----------\n    m : tensor\n        matrix for multiplication. Batched matmul is performed if\n        ``m.dim() > 2``, but only last dim reduction is supported\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius matvec result\n    \"\"\"\n    return _mobius_matvec(m, x, k, dim=dim)\n\n\n@torch.jit.script\ndef _mobius_matvec(m: torch.Tensor, x: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    if m.dim() > 2 and dim != -1:\n        raise RuntimeError(\n            \"broadcasted Möbius matvec is supported for the last dim only\"\n        )\n    x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    if dim != -1 or m.dim() == 2:\n        mx = torch.tensordot(x, m, ([dim], [1]))\n    else:\n        mx = torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)\n    mx_norm = mx.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    res_c = tan_k(mx_norm / x_norm * artan_k(x_norm, k), k) * (mx / mx_norm)\n    cond = (mx == 0).prod(dim=dim, keepdim=True, dtype=torch.bool)\n    res_0 = torch.zeros(1, dtype=res_c.dtype, device=res_c.device)\n    res = torch.where(cond, res_0, res_c)\n    return res\n\n\n# TODO: check if this extends to gyrovector spaces for positive curvature\n# TODO: add plot\ndef mobius_pointwise_mul(w: torch.Tensor, x: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the generalization for point-wise multiplication in gyrovector spaces.\n\n    The Möbius pointwise multiplication is defined as follows\n\n    .. math::\n\n        \\operatorname{diag}(w) \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|\\operatorname{diag}(w)x\\|_2}{x}\\tanh^{-1}(\\|x\\|_2)\n        \\right)\\frac{\\|\\operatorname{diag}(w)x\\|_2}{\\|x\\|_2}\n\n\n    Parameters\n    ----------\n    w : tensor\n        weights for multiplication (should be broadcastable to x)\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius point-wise mul result\n    \"\"\"\n    return _mobius_pointwise_mul(w, x, k, dim=dim)\n\n\n@torch.jit.script\ndef _mobius_pointwise_mul(\n    w: torch.Tensor, x: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    wx = w * x\n    wx_norm = wx.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    res_c = tan_k(wx_norm / x_norm * artan_k(x_norm, k), k) * (wx / wx_norm)\n    zero = torch.zeros((), dtype=res_c.dtype, device=res_c.device)\n    cond = wx.isclose(zero).prod(dim=dim, keepdim=True, dtype=torch.bool)\n    res = torch.where(cond, zero, res_c)\n    return res\n\n\ndef mobius_fn_apply_chain(x: torch.Tensor, *fns: callable, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the generalization of sequential function application in gyrovector spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the sequence of functions is\n    applied to the vector in the tangent space. The resulting tangent vector is\n    then mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    The definition of mobius function application allows chaining as\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Resulting in\n\n    .. math::\n\n        (f \\circ g)^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(\n            (f \\circ g) (\\operatorname{log}^\\kappa_0(y))\n        )\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fns : callable[]\n        functions to apply\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Apply chain result\n    \"\"\"\n    if not fns:\n        return x\n    else:\n        ex = _logmap0(x, k, dim=dim)\n        for fn in fns:\n            ex = fn(ex)\n        y = _expmap0(ex, k, dim=dim)\n        return y\n\n\ndef mobius_fn_apply(\n    fn: callable, x: torch.Tensor, *args, k: torch.Tensor, dim=-1, **kwargs\n):\n    r\"\"\"\n    Compute the generalization of function application in gyrovector spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the function is applied\n    to the vector in the tangent space. The resulting tangent vector is then\n    mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    .. plot:: plots/extended/stereographic/mobius_sigmoid_apply.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fn : callable\n        function to apply\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Result of function in hyperbolic space\n    \"\"\"\n    ex = _logmap0(x, k, dim=dim)\n    ex = fn(ex, *args, **kwargs)\n    y = _expmap0(ex, k, dim=dim)\n    return y\n\n\ndef mobiusify(fn: callable):\n    r\"\"\"\n    Wrap a function such that is works in gyrovector spaces.\n\n    Parameters\n    ----------\n    fn : callable\n        function in Euclidean space\n\n    Returns\n    -------\n    callable\n        function working in gyrovector spaces\n\n    Notes\n    -----\n    New function will accept additional argument ``k`` and ``dim``.\n    \"\"\"\n\n    @functools.wraps(fn)\n    def mobius_fn(x, *args, k, dim=-1, **kwargs):\n        ex = _logmap0(x, k, dim=dim)\n        ex = fn(ex, *args, **kwargs)\n        y = _expmap0(ex, k, dim=dim)\n        return y\n\n    return mobius_fn\n\n\ndef dist2plane(\n    x: torch.Tensor,\n    p: torch.Tensor,\n    a: torch.Tensor,\n    *,\n    k: torch.Tensor,\n    keepdim=False,\n    signed=False,\n    scaled=False,\n    dim=-1,\n):\n    r\"\"\"\n    Geodesic distance from :math:`x` to a hyperplane :math:`H_{a, b}`.\n\n    The hyperplane is such that its set of points is orthogonal to :math:`a` and\n    contains :math:`p`.\n\n    .. plot:: plots/extended/stereographic/distance2plane.py\n\n    To form an intuition what is a hyperplane in gyrovector spaces, let's first\n    consider an Euclidean hyperplane\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\},\n\n    where :math:`a\\in \\mathbb{R}^n\\backslash \\{\\mathbf{0}\\}` and\n    :math:`b\\in \\mathbb{R}^n`.\n\n    This formulation of a hyperplane is hard to generalize,\n    therefore we can rewrite :math:`\\langle x, a\\rangle - b`\n    utilizing orthogonal completion.\n    Setting any :math:`p` s.t. :math:`b=\\langle a, p\\rangle` we have\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\}\\\\\n        =H_{a, \\langle a, p\\rangle} = \\tilde{H}_{a, p}\\\\\n        = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - \\langle a, p\\rangle = 0\n        \\right\\}\\\\\n        =\\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle -p + x, a\\rangle = 0\n        \\right\\}\\\\\n        = p + \\{a\\}^\\perp\n\n    Naturally we have a set :math:`\\{a\\}^\\perp` with applied :math:`+` operator\n    to each element. Generalizing a notion of summation to the gyrovector space\n    we replace :math:`+` with :math:`\\oplus_\\kappa`.\n\n    Next, we should figure out what is :math:`\\{a\\}^\\perp` in the gyrovector\n    space.\n\n    First thing that we should acknowledge is that notion of orthogonality is\n    defined for vectors in tangent spaces. Let's consider now\n    :math:`p\\in \\mathcal{M}_\\kappa^n` and\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`.\n\n    Slightly deviating from traditional notation let's write\n    :math:`\\{a\\}_p^\\perp` highlighting the tight relationship of\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`\n    with :math:`p \\in \\mathcal{M}_\\kappa^n`. We then define\n\n    .. math::\n\n        \\{a\\}_p^\\perp := \\left\\{\n            z\\in T_p\\mathcal{M}_\\kappa^n \\;:\\; \\langle z, a\\rangle_p = 0\n        \\right\\}\n\n    Recalling that a tangent vector :math:`z` for point :math:`p` yields\n    :math:`x = \\operatorname{exp}^\\kappa_p(z)` we rewrite the above equation as\n\n    .. math::\n        \\{a\\}_p^\\perp := \\left\\{\n            x\\in \\mathcal{M}_\\kappa^n \\;:\\; \\langle\n            \\operatorname{log}_p^\\kappa(x), a\\rangle_p = 0\n        \\right\\}\n\n    This formulation is something more pleasant to work with.\n    Putting all together\n\n    .. math::\n\n        \\tilde{H}_{a, p}^\\kappa = p + \\{a\\}^\\perp_p\\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle\n            \\operatorname{log}^\\kappa_p(x),\n            a\\rangle_p = 0\n        \\right\\} \\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle -p \\oplus_\\kappa x, a\\rangle\n            = 0\n        \\right\\}\n\n    To compute the distance :math:`d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)` we find\n\n    .. math::\n\n        d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)\n        =\n        \\inf_{w\\in \\tilde{H}_{a, p}^\\kappa} d_\\kappa(x, w)\\\\\n        =\n        \\sin^{-1}_\\kappa\\left\\{\n            \\frac{\n            2 |\\langle(-p)\\oplus_\\kappa x, a\\rangle|\n            }{\n            (1+\\kappa\\|(-p)\\oplus_\\kappa \\|x\\|^2_2)\\|a\\|_2\n            }\n        \\right\\}\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold to compute distance for\n    a : tensor\n        hyperplane normal vector in tangent space of :math:`p`\n    p : tensor\n        point on manifold lying on the hyperplane\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    signed : bool\n        return signed distance\n    scaled : bool\n        scale distance by tangent norm\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        distance to the hyperplane\n    \"\"\"\n    return _dist2plane(\n        x, a, p, k, keepdim=keepdim, signed=signed, dim=dim, scaled=scaled\n    )\n\n\n@torch.jit.script\ndef _dist2plane(\n    x: torch.Tensor,\n    a: torch.Tensor,\n    p: torch.Tensor,\n    k: torch.Tensor,\n    keepdim: bool = False,\n    signed: bool = False,\n    scaled: bool = False,\n    dim: int = -1,\n):\n    diff = _mobius_add(-p, x, k, dim=dim)\n    diff_norm2 = diff.pow(2).sum(dim=dim, keepdim=keepdim).clamp_min(1e-15)\n    sc_diff_a = (diff * a).sum(dim=dim, keepdim=keepdim)\n    if not signed:\n        sc_diff_a = sc_diff_a.abs()\n    a_norm = a.norm(dim=dim, keepdim=keepdim, p=2)\n    num = 2.0 * sc_diff_a\n    denom = clamp_abs((1 + k * diff_norm2) * a_norm)\n    distance = arsin_k(num / denom, k)\n    if scaled:\n        distance = distance * a_norm\n    return distance\n\n\ndef parallel_transport(\n    x: torch.Tensor, y: torch.Tensor, v: torch.Tensor, *, k: torch.Tensor, dim=-1\n):\n    r\"\"\"\n    Compute the parallel transport of :math:`v` from :math:`x` to :math:`y`.\n\n    The parallel transport is essential for adaptive algorithms on Riemannian\n    manifolds. For gyrovector spaces the parallel transport is expressed through\n    the gyration.\n\n    .. plot:: plots/extended/stereographic/gyrovector_parallel_transport.py\n\n    To recover parallel transport we first need to study isomorphisms between\n    gyrovectors and vectors. The reason is that originally, parallel transport\n    is well defined for gyrovectors as\n\n    .. math::\n\n        P_{x\\to y}(z) = \\operatorname{gyr}[y, -x]z,\n\n    where :math:`x,\\:y,\\:z \\in \\mathcal{M}_\\kappa^n` and\n    :math:`\\operatorname{gyr}[a, b]c = \\ominus (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa c))`\n\n    But we want to obtain parallel transport for vectors, not for gyrovectors.\n    The blessing is the isomorphism mentioned above. This mapping is given by\n\n    .. math::\n\n        U^\\kappa_p \\: : \\: T_p\\mathcal{M}_\\kappa^n \\to \\mathbb{G}\n        =\n        v \\mapsto \\lambda^\\kappa_p v\n\n\n    Finally, having the points :math:`x,\\:y \\in \\mathcal{M}_\\kappa^n` and a\n    tangent vector :math:`u\\in T_x\\mathcal{M}_\\kappa^n` we obtain\n\n    .. math::\n\n        P^\\kappa_{x\\to y}(v)\n        =\n        (U^\\kappa_y)^{-1}\\left(\\operatorname{gyr}[y, -x] U^\\kappa_x(v)\\right)\\\\\n        =\n        \\operatorname{gyr}[y, -x] v \\lambda^\\kappa_x / \\lambda^\\kappa_y\n\n    .. plot:: plots/extended/stereographic/parallel_transport.py\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point\n    y : tensor\n        end point\n    v : tensor\n        tangent vector at x to be transported to y\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        transported vector\n    \"\"\"\n    return _parallel_transport(x, y, v, k, dim=dim)\n\n\n@torch.jit.script\ndef _parallel_transport(\n    x: torch.Tensor, y: torch.Tensor, u: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    return (\n        _gyration(y, -x, u, k, dim=dim)\n        * _lambda_x(x, k, keepdim=True, dim=dim)\n        / _lambda_x(y, k, keepdim=True, dim=dim)\n    )\n\n\ndef parallel_transport0(y: torch.Tensor, v: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the parallel transport of :math:`v` from the origin :math:`0` to :math:`y`.\n\n    This is just a special case of the parallel transport with the starting\n    point at the origin that can be computed more efficiently and more\n    numerically stable.\n\n    Parameters\n    ----------\n    y : tensor\n        target point\n    v : tensor\n        vector to be transported from the origin to y\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"\n    return _parallel_transport0(y, v, k, dim=dim)\n\n\n@torch.jit.script\ndef _parallel_transport0(\n    y: torch.Tensor, v: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    return v * (1 + k * y.pow(2).sum(dim=dim, keepdim=True)).clamp_min(1e-15)\n\n\ndef parallel_transport0back(\n    x: torch.Tensor, v: torch.Tensor, *, k: torch.Tensor, dim: int = -1\n):\n    r\"\"\"\n    Perform parallel transport to the zero point.\n\n    Special case parallel transport with last point at zero that\n    can be computed more efficiently and numerically stable\n\n    Parameters\n    ----------\n    x : tensor\n        target point\n    v : tensor\n        vector to be transported\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"\n    return _parallel_transport0back(x, v, k=k, dim=dim)\n\n\n@torch.jit.script\ndef _parallel_transport0back(\n    x: torch.Tensor, v: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    return v / (1 + k * x.pow(2).sum(dim=dim, keepdim=True)).clamp_min(1e-15)\n\n\ndef egrad2rgrad(x: torch.Tensor, grad: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Convert the Euclidean gradient to the Riemannian gradient.\n\n    .. math::\n\n        \\nabla_x = \\nabla^E_x / (\\lambda_x^\\kappa)^2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    grad : tensor\n        Euclidean gradient for :math:`x`\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Riemannian gradient :math:`u\\in T_x\\mathcal{M}_\\kappa^n`\n    \"\"\"\n    return _egrad2rgrad(x, grad, k, dim=dim)\n\n\n@torch.jit.script\ndef _egrad2rgrad(x: torch.Tensor, grad: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    return grad / _lambda_x(x, k, keepdim=True, dim=dim) ** 2\n\n\ndef sproj(x: torch.Tensor, *, k: torch.Tensor, dim: int = -1):\n    \"\"\"\n    Stereographic Projection from hyperboloid or sphere.\n\n    Parameters\n    ----------\n    x : tensor\n        point to be projected\n    k : tensor\n        constant sectional curvature\n    dim : int\n        dimension to operate on\n\n    Returns\n    -------\n    tensor\n        the result of the projection\n    \"\"\"\n    return _sproj(x, k, dim=dim)\n\n\n@torch.jit.script\ndef _sproj(x: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    inv_r = torch.sqrt(sabs(k))\n    factor = 1.0 / (1.0 + inv_r * x.narrow(dim, -1, 1))\n    proj = factor * x.narrow(dim, 0, x.size(dim) - 1)\n    return proj\n\n\ndef inv_sproj(x: torch.Tensor, *, k: torch.Tensor, dim: int = -1):\n    \"\"\"\n    Inverse of Stereographic Projection to hyperboloid or sphere.\n\n    Parameters\n    ----------\n    x : tensor\n        point to be projected\n    k : tensor\n        constant sectional curvature\n    dim : int\n        dimension to operate on\n\n    Returns\n    -------\n    tensor\n        the result of the projection\n    \"\"\"\n    return _inv_sproj(x, k, dim=dim)\n\n\n@torch.jit.script\ndef _inv_sproj(x: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    inv_r = torch.sqrt(sabs(k))\n    lam_x = _lambda_x(x, k, keepdim=True, dim=dim)\n    A = lam_x * x\n    B = 1.0 / inv_r * (lam_x - 1.0)\n    proj = torch.cat((A, B), dim=dim)\n    return proj\n\n\ndef antipode(x: torch.Tensor, *, k: torch.Tensor, dim: int = -1):\n    r\"\"\"\n    Compute the antipode of a point :math:`x_1,...,x_n` for :math:`\\kappa > 0`.\n\n    Let :math:`x` be a point on some sphere. Then :math:`-x` is its antipode.\n    Since we're dealing with stereographic projections, for :math:`sproj(x)` we\n    get the antipode :math:`sproj(-x)`. Which is given as follows:\n\n    .. math::\n\n        \\text{antipode}(x)\n        =\n        \\frac{1+\\kappa\\|x\\|^2_2}{2\\kappa\\|x\\|^2_2}{}(-x)\n\n    Parameters\n    ----------\n    x : tensor\n        points :math:`x_1,...,x_n` on manifold to compute antipode for\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        antipode\n    \"\"\"\n    return _antipode(x, k, dim=dim)\n\n\n@torch.jit.script\ndef _antipode(x: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    # NOTE: implementation that uses stereographic projections seems to be less accurate\n    # sproj(-inv_sproj(x))\n    if torch.all(k.le(0)):\n        return -x\n    v = x / x.norm(p=2, dim=dim, keepdim=True).clamp_min(1e-15)\n    R = sabs(k).sqrt().reciprocal()\n    pi = 3.141592653589793\n\n    a = _geodesic_unit(pi * R, x, v, k, dim=dim)\n    return torch.where(k.gt(0), a, -x)\n\n\ndef weighted_midpoint(\n    xs: torch.Tensor,\n    weights: Optional[torch.Tensor] = None,\n    *,\n    k: torch.Tensor,\n    reducedim: Optional[List[int]] = None,\n    dim: int = -1,\n    keepdim: bool = False,\n    lincomb: bool = False,\n    posweight: bool = False,\n):\n    r\"\"\"\n    Compute weighted Möbius gyromidpoint.\n\n    The weighted Möbius gyromidpoint of a set of points\n    :math:`x_1,...,x_n` according to weights\n    :math:`\\alpha_1,...,\\alpha_n` is computed as follows:\n\n    The weighted Möbius gyromidpoint is computed as follows\n\n    .. math::\n\n        m_{\\kappa}(x_1,\\ldots,x_n,\\alpha_1,\\ldots,\\alpha_n)\n        =\n        \\frac{1}{2}\n        \\otimes_\\kappa\n        \\left(\n        \\sum_{i=1}^n\n        \\frac{\n        \\alpha_i\\lambda_{x_i}^\\kappa\n        }{\n        \\sum_{j=1}^n\\alpha_j(\\lambda_{x_j}^\\kappa-1)\n        }\n        x_i\n        \\right)\n\n    where the weights :math:`\\alpha_1,...,\\alpha_n` do not necessarily need\n    to sum to 1 (only their relative weight matters). Note that this formula\n    also requires to choose between the midpoint and its antipode for\n    :math:`\\kappa > 0`.\n\n    Parameters\n    ----------\n    xs : tensor\n        points on poincare ball\n    weights : tensor\n        weights for averaging (make sure they broadcast correctly and manifold dimension is skipped)\n    reducedim : int|list|tuple\n        reduce dimension\n    dim : int\n        dimension to calculate conformal and Lorenz factors\n    k : tensor\n        constant sectional curvature\n    keepdim : bool\n        retain the last dim? (default: false)\n    lincomb : bool\n        linear combination implementation\n    posweight : bool\n        make all weights positive. Negative weight will weight antipode of entry with positive weight instead.\n        This will give experimentally better numerics and nice interpolation\n        properties for linear combination and averaging\n\n    Returns\n    -------\n    tensor\n        Einstein midpoint in poincare coordinates\n    \"\"\"\n    return _weighted_midpoint(\n        xs=xs,\n        k=k,\n        weights=weights,\n        reducedim=reducedim,\n        dim=dim,\n        keepdim=keepdim,\n        lincomb=lincomb,\n        posweight=posweight,\n    )\n\n\n@torch.jit.script\ndef _weighted_midpoint(\n    xs: torch.Tensor,\n    k: torch.Tensor,\n    weights: Optional[torch.Tensor] = None,\n    reducedim: Optional[List[int]] = None,\n    dim: int = -1,\n    keepdim: bool = False,\n    lincomb: bool = False,\n    posweight: bool = False,\n):\n    if reducedim is None:\n        reducedim = list_range(xs.dim())\n        reducedim.pop(dim)\n    gamma = _lambda_x(xs, k=k, dim=dim, keepdim=True)\n    if weights is None:\n        weights = torch.tensor(1.0, dtype=xs.dtype, device=xs.device)\n    else:\n        weights = weights.unsqueeze(dim)\n    if posweight and weights.lt(0).any():\n        xs = torch.where(weights.lt(0), _antipode(xs, k=k, dim=dim), xs)\n        weights = weights.abs()\n    denominator = ((gamma - 1) * weights).sum(reducedim, keepdim=True)\n    nominator = (gamma * weights * xs).sum(reducedim, keepdim=True)\n    two_mean = nominator / clamp_abs(denominator, 1e-10)\n    a_mean = _mobius_scalar_mul(\n        torch.tensor(0.5, dtype=xs.dtype, device=xs.device), two_mean, k=k, dim=dim\n    )\n    if torch.any(k.gt(0)):\n        # check antipode\n        b_mean = _antipode(a_mean, k, dim=dim)\n        a_dist = _dist(a_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )\n        b_dist = _dist(b_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )\n        better = k.gt(0) & (b_dist < a_dist)\n        a_mean = torch.where(better, b_mean, a_mean)\n    if lincomb:\n        if weights.numel() == 1:\n            alpha = weights.clone()\n            for d in reducedim:\n                alpha *= xs.size(d)\n        else:\n            weights, _ = torch.broadcast_tensors(weights, gamma)\n            alpha = weights.sum(reducedim, keepdim=True)\n        a_mean = _mobius_scalar_mul(alpha, a_mean, k=k, dim=dim)\n    if not keepdim:\n        a_mean = drop_dims(a_mean, reducedim)\n    return a_mean\n",
  "children": [
    {
      "type": "comment",
      "text": "# https://github.com/geoopt/geoopt/blob/master/geoopt/manifolds/stereographic/math.py",
      "children": []
    },
    {
      "type": "expression_statement",
      "text": "r\"\"\"\n:math:`\\kappa`-Stereographic math module.\n\nThe functions for the mathematics in gyrovector spaces are taken from the\nfollowing resources:\n\n    [1] Ganea, Octavian, Gary Bécigneul, and Thomas Hofmann. \"Hyperbolic\n           neural networks.\" Advances in neural information processing systems.\n           2018.\n    [2] Bachmann, Gregor, Gary Bécigneul, and Octavian-Eugen Ganea. \"Constant\n           Curvature Graph Convolutional Networks.\" arXiv preprint\n           arXiv:1911.05076 (2019).\n    [3] Skopek, Ondrej, Octavian-Eugen Ganea, and Gary Bécigneul.\n           \"Mixed-curvature Variational Autoencoders.\" arXiv preprint\n           arXiv:1911.08411 (2019).\n    [4] Ungar, Abraham A. Analytic hyperbolic geometry: Mathematical\n           foundations and applications. World Scientific, 2005.\n    [5] Albert, Ungar Abraham. Barycentric calculus in Euclidean and\n           hyperbolic geometry: A comparative introduction. World Scientific,\n           2010.\n\"\"\"",
      "children": [
        {
          "type": "string",
          "text": "r\"\"\"\n:math:`\\kappa`-Stereographic math module.\n\nThe functions for the mathematics in gyrovector spaces are taken from the\nfollowing resources:\n\n    [1] Ganea, Octavian, Gary Bécigneul, and Thomas Hofmann. \"Hyperbolic\n           neural networks.\" Advances in neural information processing systems.\n           2018.\n    [2] Bachmann, Gregor, Gary Bécigneul, and Octavian-Eugen Ganea. \"Constant\n           Curvature Graph Convolutional Networks.\" arXiv preprint\n           arXiv:1911.05076 (2019).\n    [3] Skopek, Ondrej, Octavian-Eugen Ganea, and Gary Bécigneul.\n           \"Mixed-curvature Variational Autoencoders.\" arXiv preprint\n           arXiv:1911.08411 (2019).\n    [4] Ungar, Abraham A. Analytic hyperbolic geometry: Mathematical\n           foundations and applications. World Scientific, 2005.\n    [5] Albert, Ungar Abraham. Barycentric calculus in Euclidean and\n           hyperbolic geometry: A comparative introduction. World Scientific,\n           2010.\n\"\"\"",
          "children": [
            {
              "type": "\"",
              "text": "r\"\"\"",
              "children": []
            },
            {
              "type": "\"",
              "text": "\"\"\"",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "import_statement",
      "text": "import functools",
      "children": [
        {
          "type": "import",
          "text": "import",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "functools",
          "children": [
            {
              "type": "identifier",
              "text": "functools",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "import_statement",
      "text": "import torch.jit",
      "children": [
        {
          "type": "import",
          "text": "import",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "torch.jit",
          "children": [
            {
              "type": "identifier",
              "text": "torch",
              "children": []
            },
            {
              "type": ".",
              "text": ".",
              "children": []
            },
            {
              "type": "identifier",
              "text": "jit",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "import_from_statement",
      "text": "from typing import List, Optional",
      "children": [
        {
          "type": "from",
          "text": "from",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "typing",
          "children": [
            {
              "type": "identifier",
              "text": "typing",
              "children": []
            }
          ]
        },
        {
          "type": "import",
          "text": "import",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "List",
          "children": [
            {
              "type": "identifier",
              "text": "List",
              "children": []
            }
          ]
        },
        {
          "type": ",",
          "text": ",",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "Optional",
          "children": [
            {
              "type": "identifier",
              "text": "Optional",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "import_from_statement",
      "text": "from ...utils import list_range, drop_dims, sign, clamp_abs, sabs",
      "children": [
        {
          "type": "from",
          "text": "from",
          "children": []
        },
        {
          "type": "relative_import",
          "text": "...utils",
          "children": [
            {
              "type": "import_prefix",
              "text": "...",
              "children": [
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                }
              ]
            },
            {
              "type": "dotted_name",
              "text": "utils",
              "children": [
                {
                  "type": "identifier",
                  "text": "utils",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "import",
          "text": "import",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "list_range",
          "children": [
            {
              "type": "identifier",
              "text": "list_range",
              "children": []
            }
          ]
        },
        {
          "type": ",",
          "text": ",",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "drop_dims",
          "children": [
            {
              "type": "identifier",
              "text": "drop_dims",
              "children": []
            }
          ]
        },
        {
          "type": ",",
          "text": ",",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "sign",
          "children": [
            {
              "type": "identifier",
              "text": "sign",
              "children": []
            }
          ]
        },
        {
          "type": ",",
          "text": ",",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "clamp_abs",
          "children": [
            {
              "type": "identifier",
              "text": "clamp_abs",
              "children": []
            }
          ]
        },
        {
          "type": ",",
          "text": ",",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "sabs",
          "children": [
            {
              "type": "identifier",
              "text": "sabs",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef tanh(x):\n    return x.clamp(-15, 15).tanh()",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def tanh(x):\n    return x.clamp(-15, 15).tanh()",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "tanh",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "return x.clamp(-15, 15).tanh()",
              "children": [
                {
                  "type": "return_statement",
                  "text": "return x.clamp(-15, 15).tanh()",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "x.clamp(-15, 15).tanh()",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "x.clamp(-15, 15).tanh",
                          "children": [
                            {
                              "type": "call",
                              "text": "x.clamp(-15, 15)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "x.clamp",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "clamp",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(-15, 15)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "unary_operator",
                                      "text": "-15",
                                      "children": [
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "15",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "15",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "tanh",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "()",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef artanh(x: torch.Tensor):\n    x = x.clamp(-1 + 1e-7, 1 - 1e-7)\n    return (torch.log(1 + x).sub(torch.log(1 - x))).mul(0.5)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def artanh(x: torch.Tensor):\n    x = x.clamp(-1 + 1e-7, 1 - 1e-7)\n    return (torch.log(1 + x).sub(torch.log(1 - x))).mul(0.5)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "artanh",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "x = x.clamp(-1 + 1e-7, 1 - 1e-7)\n    return (torch.log(1 + x).sub(torch.log(1 - x))).mul(0.5)",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "x = x.clamp(-1 + 1e-7, 1 - 1e-7)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "x = x.clamp(-1 + 1e-7, 1 - 1e-7)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "x.clamp(-1 + 1e-7, 1 - 1e-7)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "x.clamp",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(-1 + 1e-7, 1 - 1e-7)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "-1 + 1e-7",
                                  "children": [
                                    {
                                      "type": "unary_operator",
                                      "text": "-1",
                                      "children": [
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "+",
                                      "text": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "float",
                                      "text": "1e-7",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "1 - 1e-7",
                                  "children": [
                                    {
                                      "type": "integer",
                                      "text": "1",
                                      "children": []
                                    },
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "float",
                                      "text": "1e-7",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return (torch.log(1 + x).sub(torch.log(1 - x))).mul(0.5)",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "(torch.log(1 + x).sub(torch.log(1 - x))).mul(0.5)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "(torch.log(1 + x).sub(torch.log(1 - x))).mul",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(torch.log(1 + x).sub(torch.log(1 - x)))",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.log(1 + x).sub(torch.log(1 - x))",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.log(1 + x).sub",
                                      "children": [
                                        {
                                          "type": "call",
                                          "text": "torch.log(1 + x)",
                                          "children": [
                                            {
                                              "type": "attribute",
                                              "text": "torch.log",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "torch",
                                                  "children": []
                                                },
                                                {
                                                  "type": ".",
                                                  "text": ".",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "log",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(1 + x)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "1 + x",
                                                  "children": [
                                                    {
                                                      "type": "integer",
                                                      "text": "1",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "+",
                                                      "text": "+",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "sub",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(torch.log(1 - x))",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "torch.log(1 - x)",
                                          "children": [
                                            {
                                              "type": "attribute",
                                              "text": "torch.log",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "torch",
                                                  "children": []
                                                },
                                                {
                                                  "type": ".",
                                                  "text": ".",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "log",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(1 - x)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "1 - x",
                                                  "children": [
                                                    {
                                                      "type": "integer",
                                                      "text": "1",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "-",
                                                      "text": "-",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "mul",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(0.5)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "float",
                              "text": "0.5",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef arsinh(x: torch.Tensor):\n    return (x + torch.sqrt(1 + x.pow(2))).clamp_min(1e-15).log().to(x.dtype)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def arsinh(x: torch.Tensor):\n    return (x + torch.sqrt(1 + x.pow(2))).clamp_min(1e-15).log().to(x.dtype)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "arsinh",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "return (x + torch.sqrt(1 + x.pow(2))).clamp_min(1e-15).log().to(x.dtype)",
              "children": [
                {
                  "type": "return_statement",
                  "text": "return (x + torch.sqrt(1 + x.pow(2))).clamp_min(1e-15).log().to(x.dtype)",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "(x + torch.sqrt(1 + x.pow(2))).clamp_min(1e-15).log().to(x.dtype)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "(x + torch.sqrt(1 + x.pow(2))).clamp_min(1e-15).log().to",
                          "children": [
                            {
                              "type": "call",
                              "text": "(x + torch.sqrt(1 + x.pow(2))).clamp_min(1e-15).log()",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "(x + torch.sqrt(1 + x.pow(2))).clamp_min(1e-15).log",
                                  "children": [
                                    {
                                      "type": "call",
                                      "text": "(x + torch.sqrt(1 + x.pow(2))).clamp_min(1e-15)",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "(x + torch.sqrt(1 + x.pow(2))).clamp_min",
                                          "children": [
                                            {
                                              "type": "parenthesized_expression",
                                              "text": "(x + torch.sqrt(1 + x.pow(2)))",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x + torch.sqrt(1 + x.pow(2))",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "+",
                                                      "text": "+",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "call",
                                                      "text": "torch.sqrt(1 + x.pow(2))",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "text": "torch.sqrt",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "torch",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "sqrt",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(1 + x.pow(2))",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "binary_operator",
                                                              "text": "1 + x.pow(2)",
                                                              "children": [
                                                                {
                                                                  "type": "integer",
                                                                  "text": "1",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "+",
                                                                  "text": "+",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "call",
                                                                  "text": "x.pow(2)",
                                                                  "children": [
                                                                    {
                                                                      "type": "attribute",
                                                                      "text": "x.pow",
                                                                      "children": [
                                                                        {
                                                                          "type": "identifier",
                                                                          "text": "x",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": ".",
                                                                          "text": ".",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "identifier",
                                                                          "text": "pow",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "argument_list",
                                                                      "text": "(2)",
                                                                      "children": [
                                                                        {
                                                                          "type": "(",
                                                                          "text": "(",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "integer",
                                                                          "text": "2",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": ")",
                                                                          "text": ")",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "clamp_min",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(1e-15)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "float",
                                              "text": "1e-15",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "log",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "to",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(x.dtype)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "attribute",
                              "text": "x.dtype",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dtype",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef abs_zero_grad(x):\n    # this op has derivative equal to 1 at zero\n    return x * sign(x)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def abs_zero_grad(x):\n    # this op has derivative equal to 1 at zero\n    return x * sign(x)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "abs_zero_grad",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "comment",
              "text": "# this op has derivative equal to 1 at zero",
              "children": []
            },
            {
              "type": "block",
              "text": "return x * sign(x)",
              "children": [
                {
                  "type": "return_statement",
                  "text": "return x * sign(x)",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "x * sign(x)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "sign(x)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "sign",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(x)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef tan_k_zero_taylor(x: torch.Tensor, k: torch.Tensor, order: int = -1):\n    if order == 0:\n        return x\n    k = abs_zero_grad(k)\n    if order == -1 or order == 5:\n        return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n            + 1382 / 155925 * k**5 * x**11\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x + 1 / 3 * k * x**3\n    elif order == 2:\n        return x + 1 / 3 * k * x**3 + 2 / 15 * k**2 * x**5\n    elif order == 3:\n        return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n        )\n    elif order == 4:\n        return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def tan_k_zero_taylor(x: torch.Tensor, k: torch.Tensor, order: int = -1):\n    if order == 0:\n        return x\n    k = abs_zero_grad(k)\n    if order == -1 or order == 5:\n        return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n            + 1382 / 155925 * k**5 * x**11\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x + 1 / 3 * k * x**3\n    elif order == 2:\n        return x + 1 / 3 * k * x**3 + 2 / 15 * k**2 * x**5\n    elif order == 3:\n        return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n        )\n    elif order == 4:\n        return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "tan_k_zero_taylor",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, k: torch.Tensor, order: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "order: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "order",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "if order == 0:\n        return x\n    k = abs_zero_grad(k)\n    if order == -1 or order == 5:\n        return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n            + 1382 / 155925 * k**5 * x**11\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x + 1 / 3 * k * x**3\n    elif order == 2:\n        return x + 1 / 3 * k * x**3 + 2 / 15 * k**2 * x**5\n    elif order == 3:\n        return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n        )\n    elif order == 4:\n        return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
              "children": [
                {
                  "type": "if_statement",
                  "text": "if order == 0:\n        return x",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "comparison_operator",
                      "text": "order == 0",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "order",
                          "children": []
                        },
                        {
                          "type": "==",
                          "text": "==",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return x",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return x",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "k = abs_zero_grad(k)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k = abs_zero_grad(k)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "abs_zero_grad(k)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "abs_zero_grad",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(k)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if order == -1 or order == 5:\n        return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n            + 1382 / 155925 * k**5 * x**11\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x + 1 / 3 * k * x**3\n    elif order == 2:\n        return x + 1 / 3 * k * x**3 + 2 / 15 * k**2 * x**5\n    elif order == 3:\n        return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n        )\n    elif order == 4:\n        return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "boolean_operator",
                      "text": "order == -1 or order == 5",
                      "children": [
                        {
                          "type": "comparison_operator",
                          "text": "order == -1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "unary_operator",
                              "text": "-1",
                              "children": [
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "integer",
                                  "text": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "or",
                          "text": "or",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 5",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "5",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n            + 1382 / 155925 * k**5 * x**11\n            # + o(k**6)\n        )",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n            + 1382 / 155925 * k**5 * x**11\n            # + o(k**6)\n        )",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "parenthesized_expression",
                              "text": "(\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n            + 1382 / 155925 * k**5 * x**11\n            # + o(k**6)\n        )",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n            + 1382 / 155925 * k**5 * x**11",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x\n            + 1 / 3 * k * x**3",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "+",
                                                      "text": "+",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "1 / 3 * k * x**3",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "1 / 3 * k",
                                                          "children": [
                                                            {
                                                              "type": "binary_operator",
                                                              "text": "1 / 3",
                                                              "children": [
                                                                {
                                                                  "type": "integer",
                                                                  "text": "1",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "/",
                                                                  "text": "/",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "integer",
                                                                  "text": "3",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "*",
                                                              "text": "*",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "k",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "*",
                                                          "text": "*",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "x**3",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "x",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "**",
                                                              "text": "**",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "3",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "+",
                                                  "text": "+",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "2 / 15 * k**2 * x**5",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "2 / 15 * k**2",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "2 / 15",
                                                          "children": [
                                                            {
                                                              "type": "integer",
                                                              "text": "2",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "/",
                                                              "text": "/",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "15",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "*",
                                                          "text": "*",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "k**2",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "k",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "**",
                                                              "text": "**",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "2",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "x**5",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "x",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "5",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "+",
                                              "text": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "17 / 315 * k**3 * x**7",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "17 / 315 * k**3",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "17 / 315",
                                                      "children": [
                                                        {
                                                          "type": "integer",
                                                          "text": "17",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "/",
                                                          "text": "/",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "315",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "k**3",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "k",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "3",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x**7",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "7",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "62 / 2835 * k**4 * x**9",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "62 / 2835 * k**4",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "62 / 2835",
                                                  "children": [
                                                    {
                                                      "type": "integer",
                                                      "text": "62",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "/",
                                                      "text": "/",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "2835",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k**4",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "4",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "x**9",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "9",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "+",
                                      "text": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "1382 / 155925 * k**5 * x**11",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "1382 / 155925 * k**5",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "1382 / 155925",
                                              "children": [
                                                {
                                                  "type": "integer",
                                                  "text": "1382",
                                                  "children": []
                                                },
                                                {
                                                  "type": "/",
                                                  "text": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "155925",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "k**5",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "5",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "x**11",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": "**",
                                              "text": "**",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "11",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "comment",
                                  "text": "# + o(k**6)",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif order == 1:\n        return x + 1 / 3 * k * x**3",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return x + 1 / 3 * k * x**3",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return x + 1 / 3 * k * x**3",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "x + 1 / 3 * k * x**3",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": "+",
                                      "text": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "1 / 3 * k * x**3",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "1 / 3 * k",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "1 / 3",
                                              "children": [
                                                {
                                                  "type": "integer",
                                                  "text": "1",
                                                  "children": []
                                                },
                                                {
                                                  "type": "/",
                                                  "text": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "3",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "k",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "x**3",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": "**",
                                              "text": "**",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "3",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif order == 2:\n        return x + 1 / 3 * k * x**3 + 2 / 15 * k**2 * x**5",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 2",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return x + 1 / 3 * k * x**3 + 2 / 15 * k**2 * x**5",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return x + 1 / 3 * k * x**3 + 2 / 15 * k**2 * x**5",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "x + 1 / 3 * k * x**3 + 2 / 15 * k**2 * x**5",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "x + 1 / 3 * k * x**3",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "1 / 3 * k * x**3",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "1 / 3 * k",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "1 / 3",
                                                  "children": [
                                                    {
                                                      "type": "integer",
                                                      "text": "1",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "/",
                                                      "text": "/",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "3",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "x**3",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "3",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "+",
                                      "text": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "2 / 15 * k**2 * x**5",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "2 / 15 * k**2",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "2 / 15",
                                              "children": [
                                                {
                                                  "type": "integer",
                                                  "text": "2",
                                                  "children": []
                                                },
                                                {
                                                  "type": "/",
                                                  "text": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "15",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "k**2",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "2",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "x**5",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": "**",
                                              "text": "**",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "5",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif order == 3:\n        return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n        )",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 3",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "3",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n        )",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n        )",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n        )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "x\n            + 1 / 3 * k * x**3",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "+",
                                                  "text": "+",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "1 / 3 * k * x**3",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "1 / 3 * k",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "1 / 3",
                                                          "children": [
                                                            {
                                                              "type": "integer",
                                                              "text": "1",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "/",
                                                              "text": "/",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "3",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "*",
                                                          "text": "*",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "k",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "x**3",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "x",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "3",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "+",
                                              "text": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "2 / 15 * k**2 * x**5",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "2 / 15 * k**2",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "2 / 15",
                                                      "children": [
                                                        {
                                                          "type": "integer",
                                                          "text": "2",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "/",
                                                          "text": "/",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "15",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "k**2",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "k",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "2",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x**5",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "5",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "17 / 315 * k**3 * x**7",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "17 / 315 * k**3",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "17 / 315",
                                                  "children": [
                                                    {
                                                      "type": "integer",
                                                      "text": "17",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "/",
                                                      "text": "/",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "315",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k**3",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "3",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "x**7",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "7",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif order == 4:\n        return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n        )",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 4",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "4",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n        )",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return (\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n        )",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(\n            x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9\n        )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7\n            + 62 / 2835 * k**4 * x**9",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5\n            + 17 / 315 * k**3 * x**7",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "x\n            + 1 / 3 * k * x**3\n            + 2 / 15 * k**2 * x**5",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x\n            + 1 / 3 * k * x**3",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "+",
                                                      "text": "+",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "1 / 3 * k * x**3",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "1 / 3 * k",
                                                          "children": [
                                                            {
                                                              "type": "binary_operator",
                                                              "text": "1 / 3",
                                                              "children": [
                                                                {
                                                                  "type": "integer",
                                                                  "text": "1",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "/",
                                                                  "text": "/",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "integer",
                                                                  "text": "3",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "*",
                                                              "text": "*",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "k",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "*",
                                                          "text": "*",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "x**3",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "x",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "**",
                                                              "text": "**",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "3",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "+",
                                                  "text": "+",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "2 / 15 * k**2 * x**5",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "2 / 15 * k**2",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "2 / 15",
                                                          "children": [
                                                            {
                                                              "type": "integer",
                                                              "text": "2",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "/",
                                                              "text": "/",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "15",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "*",
                                                          "text": "*",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "k**2",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "k",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "**",
                                                              "text": "**",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "2",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "x**5",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "x",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "5",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "+",
                                              "text": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "17 / 315 * k**3 * x**7",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "17 / 315 * k**3",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "17 / 315",
                                                      "children": [
                                                        {
                                                          "type": "integer",
                                                          "text": "17",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "/",
                                                          "text": "/",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "315",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "k**3",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "k",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "3",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x**7",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "7",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "62 / 2835 * k**4 * x**9",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "62 / 2835 * k**4",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "62 / 2835",
                                                  "children": [
                                                    {
                                                      "type": "integer",
                                                      "text": "62",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "/",
                                                      "text": "/",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "2835",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k**4",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "4",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "x**9",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "9",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "else_clause",
                      "text": "else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
                      "children": [
                        {
                          "type": "else",
                          "text": "else",
                          "children": []
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "raise RuntimeError(\"order not in [-1, 5]\")",
                          "children": [
                            {
                              "type": "raise_statement",
                              "text": "raise RuntimeError(\"order not in [-1, 5]\")",
                              "children": [
                                {
                                  "type": "raise",
                                  "text": "raise",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "RuntimeError(\"order not in [-1, 5]\")",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "RuntimeError",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(\"order not in [-1, 5]\")",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "string",
                                          "text": "\"order not in [-1, 5]\"",
                                          "children": [
                                            {
                                              "type": "\"",
                                              "text": "\"",
                                              "children": []
                                            },
                                            {
                                              "type": "\"",
                                              "text": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef artan_k_zero_taylor(x: torch.Tensor, k: torch.Tensor, order: int = -1):\n    if order == 0:\n        return x\n    k = abs_zero_grad(k)\n    if order == -1 or order == 5:\n        return (\n            x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n            - 1 / 11 * k**5 * x**11\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x - 1 / 3 * k * x**3\n    elif order == 2:\n        return x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5\n    elif order == 3:\n        return (\n            x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5 - 1 / 7 * k**3 * x**7\n        )\n    elif order == 4:\n        return (\n            x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def artan_k_zero_taylor(x: torch.Tensor, k: torch.Tensor, order: int = -1):\n    if order == 0:\n        return x\n    k = abs_zero_grad(k)\n    if order == -1 or order == 5:\n        return (\n            x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n            - 1 / 11 * k**5 * x**11\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x - 1 / 3 * k * x**3\n    elif order == 2:\n        return x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5\n    elif order == 3:\n        return (\n            x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5 - 1 / 7 * k**3 * x**7\n        )\n    elif order == 4:\n        return (\n            x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "artan_k_zero_taylor",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, k: torch.Tensor, order: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "order: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "order",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "if order == 0:\n        return x\n    k = abs_zero_grad(k)\n    if order == -1 or order == 5:\n        return (\n            x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n            - 1 / 11 * k**5 * x**11\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x - 1 / 3 * k * x**3\n    elif order == 2:\n        return x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5\n    elif order == 3:\n        return (\n            x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5 - 1 / 7 * k**3 * x**7\n        )\n    elif order == 4:\n        return (\n            x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
              "children": [
                {
                  "type": "if_statement",
                  "text": "if order == 0:\n        return x",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "comparison_operator",
                      "text": "order == 0",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "order",
                          "children": []
                        },
                        {
                          "type": "==",
                          "text": "==",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return x",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return x",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "k = abs_zero_grad(k)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k = abs_zero_grad(k)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "abs_zero_grad(k)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "abs_zero_grad",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(k)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if order == -1 or order == 5:\n        return (\n            x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n            - 1 / 11 * k**5 * x**11\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x - 1 / 3 * k * x**3\n    elif order == 2:\n        return x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5\n    elif order == 3:\n        return (\n            x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5 - 1 / 7 * k**3 * x**7\n        )\n    elif order == 4:\n        return (\n            x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "boolean_operator",
                      "text": "order == -1 or order == 5",
                      "children": [
                        {
                          "type": "comparison_operator",
                          "text": "order == -1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "unary_operator",
                              "text": "-1",
                              "children": [
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "integer",
                                  "text": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "or",
                          "text": "or",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 5",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "5",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return (\n            x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n            - 1 / 11 * k**5 * x**11\n            # + o(k**6)\n        )",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return (\n            x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n            - 1 / 11 * k**5 * x**11\n            # + o(k**6)\n        )",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "parenthesized_expression",
                              "text": "(\n            x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n            - 1 / 11 * k**5 * x**11\n            # + o(k**6)\n        )",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n            - 1 / 11 * k**5 * x**11",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x\n            - 1 / 3 * k * x**3",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "-",
                                                      "text": "-",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "1 / 3 * k * x**3",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "1 / 3 * k",
                                                          "children": [
                                                            {
                                                              "type": "binary_operator",
                                                              "text": "1 / 3",
                                                              "children": [
                                                                {
                                                                  "type": "integer",
                                                                  "text": "1",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "/",
                                                                  "text": "/",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "integer",
                                                                  "text": "3",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "*",
                                                              "text": "*",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "k",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "*",
                                                          "text": "*",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "x**3",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "x",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "**",
                                                              "text": "**",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "3",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "+",
                                                  "text": "+",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "1 / 5 * k**2 * x**5",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "1 / 5 * k**2",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "1 / 5",
                                                          "children": [
                                                            {
                                                              "type": "integer",
                                                              "text": "1",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "/",
                                                              "text": "/",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "5",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "*",
                                                          "text": "*",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "k**2",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "k",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "**",
                                                              "text": "**",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "2",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "x**5",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "x",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "5",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "-",
                                              "text": "-",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "1 / 7 * k**3 * x**7",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "1 / 7 * k**3",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "1 / 7",
                                                      "children": [
                                                        {
                                                          "type": "integer",
                                                          "text": "1",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "/",
                                                          "text": "/",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "7",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "k**3",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "k",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "3",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x**7",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "7",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "1 / 9 * k**4 * x**9",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "1 / 9 * k**4",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "1 / 9",
                                                  "children": [
                                                    {
                                                      "type": "integer",
                                                      "text": "1",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "/",
                                                      "text": "/",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "9",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k**4",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "4",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "x**9",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "9",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "1 / 11 * k**5 * x**11",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "1 / 11 * k**5",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "1 / 11",
                                              "children": [
                                                {
                                                  "type": "integer",
                                                  "text": "1",
                                                  "children": []
                                                },
                                                {
                                                  "type": "/",
                                                  "text": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "11",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "k**5",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "5",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "x**11",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": "**",
                                              "text": "**",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "11",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "comment",
                                  "text": "# + o(k**6)",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif order == 1:\n        return x - 1 / 3 * k * x**3",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return x - 1 / 3 * k * x**3",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return x - 1 / 3 * k * x**3",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "x - 1 / 3 * k * x**3",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "1 / 3 * k * x**3",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "1 / 3 * k",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "1 / 3",
                                              "children": [
                                                {
                                                  "type": "integer",
                                                  "text": "1",
                                                  "children": []
                                                },
                                                {
                                                  "type": "/",
                                                  "text": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "3",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "k",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "x**3",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": "**",
                                              "text": "**",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "3",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif order == 2:\n        return x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 2",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "x - 1 / 3 * k * x**3",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "1 / 3 * k * x**3",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "1 / 3 * k",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "1 / 3",
                                                  "children": [
                                                    {
                                                      "type": "integer",
                                                      "text": "1",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "/",
                                                      "text": "/",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "3",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "x**3",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "3",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "+",
                                      "text": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "1 / 5 * k**2 * x**5",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "1 / 5 * k**2",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "1 / 5",
                                              "children": [
                                                {
                                                  "type": "integer",
                                                  "text": "1",
                                                  "children": []
                                                },
                                                {
                                                  "type": "/",
                                                  "text": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "5",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "k**2",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "2",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "x**5",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": "**",
                                              "text": "**",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "5",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif order == 3:\n        return (\n            x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5 - 1 / 7 * k**3 * x**7\n        )",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 3",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "3",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return (\n            x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5 - 1 / 7 * k**3 * x**7\n        )",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return (\n            x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5 - 1 / 7 * k**3 * x**7\n        )",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(\n            x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5 - 1 / 7 * k**3 * x**7\n        )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5 - 1 / 7 * k**3 * x**7",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "x - 1 / 3 * k * x**3 + 1 / 5 * k**2 * x**5",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "x - 1 / 3 * k * x**3",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "-",
                                                  "text": "-",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "1 / 3 * k * x**3",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "1 / 3 * k",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "1 / 3",
                                                          "children": [
                                                            {
                                                              "type": "integer",
                                                              "text": "1",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "/",
                                                              "text": "/",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "3",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "*",
                                                          "text": "*",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "k",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "x**3",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "x",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "3",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "+",
                                              "text": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "1 / 5 * k**2 * x**5",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "1 / 5 * k**2",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "1 / 5",
                                                      "children": [
                                                        {
                                                          "type": "integer",
                                                          "text": "1",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "/",
                                                          "text": "/",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "5",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "k**2",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "k",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "2",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x**5",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "5",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "1 / 7 * k**3 * x**7",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "1 / 7 * k**3",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "1 / 7",
                                                  "children": [
                                                    {
                                                      "type": "integer",
                                                      "text": "1",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "/",
                                                      "text": "/",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "7",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k**3",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "3",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "x**7",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "7",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif order == 4:\n        return (\n            x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n        )",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 4",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "4",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return (\n            x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n        )",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return (\n            x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n        )",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(\n            x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9\n        )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7\n            + 1 / 9 * k**4 * x**9",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5\n            - 1 / 7 * k**3 * x**7",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "x\n            - 1 / 3 * k * x**3\n            + 1 / 5 * k**2 * x**5",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x\n            - 1 / 3 * k * x**3",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "-",
                                                      "text": "-",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "1 / 3 * k * x**3",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "1 / 3 * k",
                                                          "children": [
                                                            {
                                                              "type": "binary_operator",
                                                              "text": "1 / 3",
                                                              "children": [
                                                                {
                                                                  "type": "integer",
                                                                  "text": "1",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "/",
                                                                  "text": "/",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "integer",
                                                                  "text": "3",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "*",
                                                              "text": "*",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "k",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "*",
                                                          "text": "*",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "x**3",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "x",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "**",
                                                              "text": "**",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "3",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "+",
                                                  "text": "+",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "1 / 5 * k**2 * x**5",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "1 / 5 * k**2",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "1 / 5",
                                                          "children": [
                                                            {
                                                              "type": "integer",
                                                              "text": "1",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "/",
                                                              "text": "/",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "5",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "*",
                                                          "text": "*",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "k**2",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "k",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "**",
                                                              "text": "**",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "2",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "x**5",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "x",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "5",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "-",
                                              "text": "-",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "1 / 7 * k**3 * x**7",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "1 / 7 * k**3",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "1 / 7",
                                                      "children": [
                                                        {
                                                          "type": "integer",
                                                          "text": "1",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "/",
                                                          "text": "/",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "7",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "k**3",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "k",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "3",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x**7",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "7",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "1 / 9 * k**4 * x**9",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "1 / 9 * k**4",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "1 / 9",
                                                  "children": [
                                                    {
                                                      "type": "integer",
                                                      "text": "1",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "/",
                                                      "text": "/",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "9",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k**4",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "4",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "x**9",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "9",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "else_clause",
                      "text": "else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
                      "children": [
                        {
                          "type": "else",
                          "text": "else",
                          "children": []
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "raise RuntimeError(\"order not in [-1, 5]\")",
                          "children": [
                            {
                              "type": "raise_statement",
                              "text": "raise RuntimeError(\"order not in [-1, 5]\")",
                              "children": [
                                {
                                  "type": "raise",
                                  "text": "raise",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "RuntimeError(\"order not in [-1, 5]\")",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "RuntimeError",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(\"order not in [-1, 5]\")",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "string",
                                          "text": "\"order not in [-1, 5]\"",
                                          "children": [
                                            {
                                              "type": "\"",
                                              "text": "\"",
                                              "children": []
                                            },
                                            {
                                              "type": "\"",
                                              "text": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef arsin_k_zero_taylor(x: torch.Tensor, k: torch.Tensor, order: int = -1):\n    if order == 0:\n        return x\n    k = abs_zero_grad(k)\n    if order == -1 or order == 5:\n        return (\n            x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n            + 63 / 2816 * k**5 * x**11\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x + k * x**3 / 6\n    elif order == 2:\n        return x + k * x**3 / 6 + 3 / 40 * k**2 * x**5\n    elif order == 3:\n        return x + k * x**3 / 6 + 3 / 40 * k**2 * x**5 + 5 / 112 * k**3 * x**7\n    elif order == 4:\n        return (\n            x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def arsin_k_zero_taylor(x: torch.Tensor, k: torch.Tensor, order: int = -1):\n    if order == 0:\n        return x\n    k = abs_zero_grad(k)\n    if order == -1 or order == 5:\n        return (\n            x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n            + 63 / 2816 * k**5 * x**11\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x + k * x**3 / 6\n    elif order == 2:\n        return x + k * x**3 / 6 + 3 / 40 * k**2 * x**5\n    elif order == 3:\n        return x + k * x**3 / 6 + 3 / 40 * k**2 * x**5 + 5 / 112 * k**3 * x**7\n    elif order == 4:\n        return (\n            x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "arsin_k_zero_taylor",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, k: torch.Tensor, order: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "order: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "order",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "if order == 0:\n        return x\n    k = abs_zero_grad(k)\n    if order == -1 or order == 5:\n        return (\n            x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n            + 63 / 2816 * k**5 * x**11\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x + k * x**3 / 6\n    elif order == 2:\n        return x + k * x**3 / 6 + 3 / 40 * k**2 * x**5\n    elif order == 3:\n        return x + k * x**3 / 6 + 3 / 40 * k**2 * x**5 + 5 / 112 * k**3 * x**7\n    elif order == 4:\n        return (\n            x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
              "children": [
                {
                  "type": "if_statement",
                  "text": "if order == 0:\n        return x",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "comparison_operator",
                      "text": "order == 0",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "order",
                          "children": []
                        },
                        {
                          "type": "==",
                          "text": "==",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return x",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return x",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "k = abs_zero_grad(k)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k = abs_zero_grad(k)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "abs_zero_grad(k)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "abs_zero_grad",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(k)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if order == -1 or order == 5:\n        return (\n            x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n            + 63 / 2816 * k**5 * x**11\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x + k * x**3 / 6\n    elif order == 2:\n        return x + k * x**3 / 6 + 3 / 40 * k**2 * x**5\n    elif order == 3:\n        return x + k * x**3 / 6 + 3 / 40 * k**2 * x**5 + 5 / 112 * k**3 * x**7\n    elif order == 4:\n        return (\n            x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "boolean_operator",
                      "text": "order == -1 or order == 5",
                      "children": [
                        {
                          "type": "comparison_operator",
                          "text": "order == -1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "unary_operator",
                              "text": "-1",
                              "children": [
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "integer",
                                  "text": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "or",
                          "text": "or",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 5",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "5",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return (\n            x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n            + 63 / 2816 * k**5 * x**11\n            # + o(k**6)\n        )",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return (\n            x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n            + 63 / 2816 * k**5 * x**11\n            # + o(k**6)\n        )",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "parenthesized_expression",
                              "text": "(\n            x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n            + 63 / 2816 * k**5 * x**11\n            # + o(k**6)\n        )",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n            + 63 / 2816 * k**5 * x**11",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x\n            + k * x**3 / 6",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "+",
                                                      "text": "+",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "k * x**3 / 6",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "k * x**3",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "k",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "*",
                                                              "text": "*",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "binary_operator",
                                                              "text": "x**3",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "text": "x",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "**",
                                                                  "text": "**",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "integer",
                                                                  "text": "3",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "/",
                                                          "text": "/",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "6",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "+",
                                                  "text": "+",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "3 / 40 * k**2 * x**5",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "3 / 40 * k**2",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "3 / 40",
                                                          "children": [
                                                            {
                                                              "type": "integer",
                                                              "text": "3",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "/",
                                                              "text": "/",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "40",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "*",
                                                          "text": "*",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "k**2",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "k",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "**",
                                                              "text": "**",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "2",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "x**5",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "x",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "5",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "+",
                                              "text": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "5 / 112 * k**3 * x**7",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "5 / 112 * k**3",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "5 / 112",
                                                      "children": [
                                                        {
                                                          "type": "integer",
                                                          "text": "5",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "/",
                                                          "text": "/",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "112",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "k**3",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "k",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "3",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x**7",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "7",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "35 / 1152 * k**4 * x**9",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "35 / 1152 * k**4",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "35 / 1152",
                                                  "children": [
                                                    {
                                                      "type": "integer",
                                                      "text": "35",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "/",
                                                      "text": "/",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "1152",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k**4",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "4",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "x**9",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "9",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "+",
                                      "text": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "63 / 2816 * k**5 * x**11",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "63 / 2816 * k**5",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "63 / 2816",
                                              "children": [
                                                {
                                                  "type": "integer",
                                                  "text": "63",
                                                  "children": []
                                                },
                                                {
                                                  "type": "/",
                                                  "text": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "2816",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "k**5",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "5",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "x**11",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": "**",
                                              "text": "**",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "11",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "comment",
                                  "text": "# + o(k**6)",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif order == 1:\n        return x + k * x**3 / 6",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return x + k * x**3 / 6",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return x + k * x**3 / 6",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "x + k * x**3 / 6",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": "+",
                                      "text": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "k * x**3 / 6",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "k * x**3",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "k",
                                              "children": []
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "x**3",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "3",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "/",
                                          "text": "/",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "6",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif order == 2:\n        return x + k * x**3 / 6 + 3 / 40 * k**2 * x**5",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 2",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return x + k * x**3 / 6 + 3 / 40 * k**2 * x**5",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return x + k * x**3 / 6 + 3 / 40 * k**2 * x**5",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "x + k * x**3 / 6 + 3 / 40 * k**2 * x**5",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "x + k * x**3 / 6",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "k * x**3 / 6",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "k * x**3",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x**3",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "3",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "/",
                                              "text": "/",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "6",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "+",
                                      "text": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "3 / 40 * k**2 * x**5",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "3 / 40 * k**2",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "3 / 40",
                                              "children": [
                                                {
                                                  "type": "integer",
                                                  "text": "3",
                                                  "children": []
                                                },
                                                {
                                                  "type": "/",
                                                  "text": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "40",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "k**2",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "2",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "x**5",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": "**",
                                              "text": "**",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "5",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif order == 3:\n        return x + k * x**3 / 6 + 3 / 40 * k**2 * x**5 + 5 / 112 * k**3 * x**7",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 3",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "3",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return x + k * x**3 / 6 + 3 / 40 * k**2 * x**5 + 5 / 112 * k**3 * x**7",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return x + k * x**3 / 6 + 3 / 40 * k**2 * x**5 + 5 / 112 * k**3 * x**7",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "x + k * x**3 / 6 + 3 / 40 * k**2 * x**5 + 5 / 112 * k**3 * x**7",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "x + k * x**3 / 6 + 3 / 40 * k**2 * x**5",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "x + k * x**3 / 6",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": "+",
                                              "text": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "k * x**3 / 6",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k * x**3",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "x**3",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "x",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "3",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "/",
                                                  "text": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "6",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "3 / 40 * k**2 * x**5",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "3 / 40 * k**2",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "3 / 40",
                                                  "children": [
                                                    {
                                                      "type": "integer",
                                                      "text": "3",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "/",
                                                      "text": "/",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "40",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k**2",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "2",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "x**5",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "5",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "+",
                                      "text": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "5 / 112 * k**3 * x**7",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "5 / 112 * k**3",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "5 / 112",
                                              "children": [
                                                {
                                                  "type": "integer",
                                                  "text": "5",
                                                  "children": []
                                                },
                                                {
                                                  "type": "/",
                                                  "text": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "112",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "k**3",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "3",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "x**7",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": "**",
                                              "text": "**",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "7",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif order == 4:\n        return (\n            x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n        )",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 4",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "4",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return (\n            x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n        )",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return (\n            x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n        )",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(\n            x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9\n        )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7\n            + 35 / 1152 * k**4 * x**9",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5\n            + 5 / 112 * k**3 * x**7",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "x\n            + k * x**3 / 6\n            + 3 / 40 * k**2 * x**5",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x\n            + k * x**3 / 6",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "+",
                                                      "text": "+",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "k * x**3 / 6",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "k * x**3",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "k",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "*",
                                                              "text": "*",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "binary_operator",
                                                              "text": "x**3",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "text": "x",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "**",
                                                                  "text": "**",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "integer",
                                                                  "text": "3",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "/",
                                                          "text": "/",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "6",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "+",
                                                  "text": "+",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "3 / 40 * k**2 * x**5",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "3 / 40 * k**2",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "3 / 40",
                                                          "children": [
                                                            {
                                                              "type": "integer",
                                                              "text": "3",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "/",
                                                              "text": "/",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "40",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "*",
                                                          "text": "*",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "k**2",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "k",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "**",
                                                              "text": "**",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "2",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "x**5",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "x",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "5",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "+",
                                              "text": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "5 / 112 * k**3 * x**7",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "5 / 112 * k**3",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "5 / 112",
                                                      "children": [
                                                        {
                                                          "type": "integer",
                                                          "text": "5",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "/",
                                                          "text": "/",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "112",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "k**3",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "k",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "3",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x**7",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "7",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "35 / 1152 * k**4 * x**9",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "35 / 1152 * k**4",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "35 / 1152",
                                                  "children": [
                                                    {
                                                      "type": "integer",
                                                      "text": "35",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "/",
                                                      "text": "/",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "1152",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k**4",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "4",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "x**9",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "9",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "else_clause",
                      "text": "else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
                      "children": [
                        {
                          "type": "else",
                          "text": "else",
                          "children": []
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "raise RuntimeError(\"order not in [-1, 5]\")",
                          "children": [
                            {
                              "type": "raise_statement",
                              "text": "raise RuntimeError(\"order not in [-1, 5]\")",
                              "children": [
                                {
                                  "type": "raise",
                                  "text": "raise",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "RuntimeError(\"order not in [-1, 5]\")",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "RuntimeError",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(\"order not in [-1, 5]\")",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "string",
                                          "text": "\"order not in [-1, 5]\"",
                                          "children": [
                                            {
                                              "type": "\"",
                                              "text": "\"",
                                              "children": []
                                            },
                                            {
                                              "type": "\"",
                                              "text": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef sin_k_zero_taylor(x: torch.Tensor, k: torch.Tensor, order: int = -1):\n    if order == 0:\n        return x\n    k = abs_zero_grad(k)\n    if order == -1 or order == 5:\n        return (\n            x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n            - k**5 * x**11 / 39916800\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x - k * x**3 / 6\n    elif order == 2:\n        return x - k * x**3 / 6 + k**2 * x**5 / 120\n    elif order == 3:\n        return x - k * x**3 / 6 + k**2 * x**5 / 120 - k**3 * x**7 / 5040\n    elif order == 4:\n        return (\n            x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def sin_k_zero_taylor(x: torch.Tensor, k: torch.Tensor, order: int = -1):\n    if order == 0:\n        return x\n    k = abs_zero_grad(k)\n    if order == -1 or order == 5:\n        return (\n            x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n            - k**5 * x**11 / 39916800\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x - k * x**3 / 6\n    elif order == 2:\n        return x - k * x**3 / 6 + k**2 * x**5 / 120\n    elif order == 3:\n        return x - k * x**3 / 6 + k**2 * x**5 / 120 - k**3 * x**7 / 5040\n    elif order == 4:\n        return (\n            x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "sin_k_zero_taylor",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, k: torch.Tensor, order: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "order: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "order",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "if order == 0:\n        return x\n    k = abs_zero_grad(k)\n    if order == -1 or order == 5:\n        return (\n            x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n            - k**5 * x**11 / 39916800\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x - k * x**3 / 6\n    elif order == 2:\n        return x - k * x**3 / 6 + k**2 * x**5 / 120\n    elif order == 3:\n        return x - k * x**3 / 6 + k**2 * x**5 / 120 - k**3 * x**7 / 5040\n    elif order == 4:\n        return (\n            x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
              "children": [
                {
                  "type": "if_statement",
                  "text": "if order == 0:\n        return x",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "comparison_operator",
                      "text": "order == 0",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "order",
                          "children": []
                        },
                        {
                          "type": "==",
                          "text": "==",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return x",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return x",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "k = abs_zero_grad(k)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k = abs_zero_grad(k)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "abs_zero_grad(k)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "abs_zero_grad",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(k)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if order == -1 or order == 5:\n        return (\n            x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n            - k**5 * x**11 / 39916800\n            # + o(k**6)\n        )\n    elif order == 1:\n        return x - k * x**3 / 6\n    elif order == 2:\n        return x - k * x**3 / 6 + k**2 * x**5 / 120\n    elif order == 3:\n        return x - k * x**3 / 6 + k**2 * x**5 / 120 - k**3 * x**7 / 5040\n    elif order == 4:\n        return (\n            x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n        )\n    else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "boolean_operator",
                      "text": "order == -1 or order == 5",
                      "children": [
                        {
                          "type": "comparison_operator",
                          "text": "order == -1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "unary_operator",
                              "text": "-1",
                              "children": [
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "integer",
                                  "text": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "or",
                          "text": "or",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 5",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "5",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return (\n            x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n            - k**5 * x**11 / 39916800\n            # + o(k**6)\n        )",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return (\n            x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n            - k**5 * x**11 / 39916800\n            # + o(k**6)\n        )",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "parenthesized_expression",
                              "text": "(\n            x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n            - k**5 * x**11 / 39916800\n            # + o(k**6)\n        )",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n            - k**5 * x**11 / 39916800",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x\n            - k * x**3 / 6",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "-",
                                                      "text": "-",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "k * x**3 / 6",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "k * x**3",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "k",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "*",
                                                              "text": "*",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "binary_operator",
                                                              "text": "x**3",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "text": "x",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "**",
                                                                  "text": "**",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "integer",
                                                                  "text": "3",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "/",
                                                          "text": "/",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "6",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "+",
                                                  "text": "+",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k**2 * x**5 / 120",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "k**2 * x**5",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "k**2",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "k",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "**",
                                                              "text": "**",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "2",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "*",
                                                          "text": "*",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "x**5",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "x",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "**",
                                                              "text": "**",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "5",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "/",
                                                      "text": "/",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "120",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "-",
                                              "text": "-",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "k**3 * x**7 / 5040",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k**3 * x**7",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "k**3",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "k",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "3",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "x**7",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "x",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "7",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "/",
                                                  "text": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "5040",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "k**4 * x**9 / 362880",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "k**4 * x**9",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k**4",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "4",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x**9",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "9",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "/",
                                              "text": "/",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "362880",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "k**5 * x**11 / 39916800",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "k**5 * x**11",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "k**5",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "5",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "x**11",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "11",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "/",
                                          "text": "/",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "39916800",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "comment",
                                  "text": "# + o(k**6)",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif order == 1:\n        return x - k * x**3 / 6",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return x - k * x**3 / 6",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return x - k * x**3 / 6",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "x - k * x**3 / 6",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "k * x**3 / 6",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "k * x**3",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "k",
                                              "children": []
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "x**3",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "3",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "/",
                                          "text": "/",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "6",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif order == 2:\n        return x - k * x**3 / 6 + k**2 * x**5 / 120",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 2",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return x - k * x**3 / 6 + k**2 * x**5 / 120",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return x - k * x**3 / 6 + k**2 * x**5 / 120",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "x - k * x**3 / 6 + k**2 * x**5 / 120",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "x - k * x**3 / 6",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "k * x**3 / 6",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "k * x**3",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x**3",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "3",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "/",
                                              "text": "/",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "6",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "+",
                                      "text": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "k**2 * x**5 / 120",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "k**2 * x**5",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "k**2",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "2",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "x**5",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "5",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "/",
                                          "text": "/",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "120",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif order == 3:\n        return x - k * x**3 / 6 + k**2 * x**5 / 120 - k**3 * x**7 / 5040",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 3",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "3",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return x - k * x**3 / 6 + k**2 * x**5 / 120 - k**3 * x**7 / 5040",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return x - k * x**3 / 6 + k**2 * x**5 / 120 - k**3 * x**7 / 5040",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "x - k * x**3 / 6 + k**2 * x**5 / 120 - k**3 * x**7 / 5040",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "x - k * x**3 / 6 + k**2 * x**5 / 120",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "x - k * x**3 / 6",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": "-",
                                              "text": "-",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "k * x**3 / 6",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k * x**3",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "x**3",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "x",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "3",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "/",
                                                  "text": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "6",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "k**2 * x**5 / 120",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "k**2 * x**5",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k**2",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "2",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x**5",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "5",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "/",
                                              "text": "/",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "120",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "k**3 * x**7 / 5040",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "k**3 * x**7",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "k**3",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "3",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "x**7",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "7",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "/",
                                          "text": "/",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "5040",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif order == 4:\n        return (\n            x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n        )",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "order == 4",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "order",
                              "children": []
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "4",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return (\n            x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n        )",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return (\n            x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n        )",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(\n            x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880\n        )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040\n            + k**4 * x**9 / 362880",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120\n            - k**3 * x**7 / 5040",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "x\n            - k * x**3 / 6\n            + k**2 * x**5 / 120",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x\n            - k * x**3 / 6",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "-",
                                                      "text": "-",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "k * x**3 / 6",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "k * x**3",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "k",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "*",
                                                              "text": "*",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "binary_operator",
                                                              "text": "x**3",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "text": "x",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "**",
                                                                  "text": "**",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "integer",
                                                                  "text": "3",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "/",
                                                          "text": "/",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "6",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "+",
                                                  "text": "+",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k**2 * x**5 / 120",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "k**2 * x**5",
                                                      "children": [
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "k**2",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "k",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "**",
                                                              "text": "**",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "2",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "*",
                                                          "text": "*",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "binary_operator",
                                                          "text": "x**5",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "x",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "**",
                                                              "text": "**",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "5",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "/",
                                                      "text": "/",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "120",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "-",
                                              "text": "-",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "k**3 * x**7 / 5040",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k**3 * x**7",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "k**3",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "k",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "3",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "text": "x**7",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "x",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "**",
                                                          "text": "**",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "7",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "/",
                                                  "text": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "5040",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "k**4 * x**9 / 362880",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "k**4 * x**9",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "k**4",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "4",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "x**9",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "**",
                                                      "text": "**",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "9",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "/",
                                              "text": "/",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "362880",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "else_clause",
                      "text": "else:\n        raise RuntimeError(\"order not in [-1, 5]\")",
                      "children": [
                        {
                          "type": "else",
                          "text": "else",
                          "children": []
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "raise RuntimeError(\"order not in [-1, 5]\")",
                          "children": [
                            {
                              "type": "raise_statement",
                              "text": "raise RuntimeError(\"order not in [-1, 5]\")",
                              "children": [
                                {
                                  "type": "raise",
                                  "text": "raise",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "RuntimeError(\"order not in [-1, 5]\")",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "RuntimeError",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(\"order not in [-1, 5]\")",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "string",
                                          "text": "\"order not in [-1, 5]\"",
                                          "children": [
                                            {
                                              "type": "\"",
                                              "text": "\"",
                                              "children": []
                                            },
                                            {
                                              "type": "\"",
                                              "text": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef tan_k(x: torch.Tensor, k: torch.Tensor):\n    k_sign = k.sign()\n    zero = torch.zeros((), device=k.device, dtype=k.dtype)\n    k_zero = k.isclose(zero)\n    # shrink sign\n    k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))\n    if torch.all(k_zero):\n        return tan_k_zero_taylor(x, k, order=1)\n    k_sqrt = sabs(k).sqrt()\n    scaled_x = x * k_sqrt\n\n    if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * tanh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.clamp_max(1e38).tan()\n    else:\n        tan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.clamp_max(1e38).tan(), tanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, tan_k_zero_taylor(x, k, order=1), tan_k_nonzero)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def tan_k(x: torch.Tensor, k: torch.Tensor):\n    k_sign = k.sign()\n    zero = torch.zeros((), device=k.device, dtype=k.dtype)\n    k_zero = k.isclose(zero)\n    # shrink sign\n    k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))\n    if torch.all(k_zero):\n        return tan_k_zero_taylor(x, k, order=1)\n    k_sqrt = sabs(k).sqrt()\n    scaled_x = x * k_sqrt\n\n    if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * tanh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.clamp_max(1e38).tan()\n    else:\n        tan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.clamp_max(1e38).tan(), tanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, tan_k_zero_taylor(x, k, order=1), tan_k_nonzero)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "tan_k",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, k: torch.Tensor)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "k_sign = k.sign()\n    zero = torch.zeros((), device=k.device, dtype=k.dtype)\n    k_zero = k.isclose(zero)\n    # shrink sign\n    k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))\n    if torch.all(k_zero):\n        return tan_k_zero_taylor(x, k, order=1)\n    k_sqrt = sabs(k).sqrt()\n    scaled_x = x * k_sqrt\n\n    if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * tanh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.clamp_max(1e38).tan()\n    else:\n        tan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.clamp_max(1e38).tan(), tanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, tan_k_zero_taylor(x, k, order=1), tan_k_nonzero)",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "k_sign = k.sign()",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k_sign = k.sign()",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k_sign",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "k.sign()",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "k.sign",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sign",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "()",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "zero = torch.zeros((), device=k.device, dtype=k.dtype)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "zero = torch.zeros((), device=k.device, dtype=k.dtype)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "zero",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.zeros((), device=k.device, dtype=k.dtype)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.zeros",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "zeros",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "((), device=k.device, dtype=k.dtype)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "tuple",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "device=k.device",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "device",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "attribute",
                                      "text": "k.device",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "device",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dtype=k.dtype",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dtype",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "attribute",
                                      "text": "k.dtype",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dtype",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "k_zero = k.isclose(zero)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k_zero = k.isclose(zero)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k_zero",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "k.isclose(zero)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "k.isclose",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "isclose",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(zero)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "zero",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "# shrink sign",
                  "children": []
                },
                {
                  "type": "expression_statement",
                  "text": "k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k_sign",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.masked_fill",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "masked_fill",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(k_sign, k_zero, zero.to(k_sign.dtype))",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k_sign",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k_zero",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "zero.to(k_sign.dtype)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "zero.to",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "zero",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "to",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(k_sign.dtype)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "attribute",
                                          "text": "k_sign.dtype",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "k_sign",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dtype",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if torch.all(k_zero):\n        return tan_k_zero_taylor(x, k, order=1)",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.all(k_zero)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.all",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "all",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(k_zero)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "k_zero",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return tan_k_zero_taylor(x, k, order=1)",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return tan_k_zero_taylor(x, k, order=1)",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "tan_k_zero_taylor(x, k, order=1)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "tan_k_zero_taylor",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(x, k, order=1)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "order=1",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "order",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "k_sqrt = sabs(k).sqrt()",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k_sqrt = sabs(k).sqrt()",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k_sqrt",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "sabs(k).sqrt()",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "sabs(k).sqrt",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "sabs(k)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "sabs",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(k)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sqrt",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "()",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "scaled_x = x * k_sqrt",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "scaled_x = x * k_sqrt",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "scaled_x",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "x * k_sqrt",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "k_sqrt",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * tanh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.clamp_max(1e38).tan()\n    else:\n        tan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.clamp_max(1e38).tan(), tanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, tan_k_zero_taylor(x, k, order=1), tan_k_nonzero)",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.all(k_sign.lt(0))",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.all",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "all",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(k_sign.lt(0))",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "k_sign.lt(0)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "k_sign.lt",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "k_sign",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "lt",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(0)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "0",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return k_sqrt.reciprocal() * tanh(scaled_x)",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return k_sqrt.reciprocal() * tanh(scaled_x)",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "k_sqrt.reciprocal() * tanh(scaled_x)",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "k_sqrt.reciprocal()",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "k_sqrt.reciprocal",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k_sqrt",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "reciprocal",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "tanh(scaled_x)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "tanh",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(scaled_x)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "scaled_x",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.clamp_max(1e38).tan()",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.all(k_sign.gt(0))",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.all",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "all",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(k_sign.gt(0))",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "k_sign.gt(0)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "k_sign.gt",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k_sign",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "gt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(0)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "0",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return k_sqrt.reciprocal() * scaled_x.clamp_max(1e38).tan()",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return k_sqrt.reciprocal() * scaled_x.clamp_max(1e38).tan()",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "k_sqrt.reciprocal() * scaled_x.clamp_max(1e38).tan()",
                                  "children": [
                                    {
                                      "type": "call",
                                      "text": "k_sqrt.reciprocal()",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "k_sqrt.reciprocal",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "k_sqrt",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "reciprocal",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "()",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "call",
                                      "text": "scaled_x.clamp_max(1e38).tan()",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "scaled_x.clamp_max(1e38).tan",
                                          "children": [
                                            {
                                              "type": "call",
                                              "text": "scaled_x.clamp_max(1e38)",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "scaled_x.clamp_max",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "scaled_x",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "clamp_max",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(1e38)",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "float",
                                                      "text": "1e38",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "tan",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "()",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "else_clause",
                      "text": "else:\n        tan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.clamp_max(1e38).tan(), tanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, tan_k_zero_taylor(x, k, order=1), tan_k_nonzero)",
                      "children": [
                        {
                          "type": "else",
                          "text": "else",
                          "children": []
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "tan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.clamp_max(1e38).tan(), tanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, tan_k_zero_taylor(x, k, order=1), tan_k_nonzero)",
                          "children": [
                            {
                              "type": "expression_statement",
                              "text": "tan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.clamp_max(1e38).tan(), tanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )",
                              "children": [
                                {
                                  "type": "assignment",
                                  "text": "tan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.clamp_max(1e38).tan(), tanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "tan_k_nonzero",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "parenthesized_expression",
                                      "text": "(\n            torch.where(k_sign.gt(0), scaled_x.clamp_max(1e38).tan(), tanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "torch.where(k_sign.gt(0), scaled_x.clamp_max(1e38).tan(), tanh(scaled_x))\n            * k_sqrt.reciprocal()",
                                          "children": [
                                            {
                                              "type": "call",
                                              "text": "torch.where(k_sign.gt(0), scaled_x.clamp_max(1e38).tan(), tanh(scaled_x))",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "torch.where",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "torch",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "where",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(k_sign.gt(0), scaled_x.clamp_max(1e38).tan(), tanh(scaled_x))",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "call",
                                                      "text": "k_sign.gt(0)",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "text": "k_sign.gt",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "k_sign",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "gt",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(0)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "0",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ",",
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "call",
                                                      "text": "scaled_x.clamp_max(1e38).tan()",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "text": "scaled_x.clamp_max(1e38).tan",
                                                          "children": [
                                                            {
                                                              "type": "call",
                                                              "text": "scaled_x.clamp_max(1e38)",
                                                              "children": [
                                                                {
                                                                  "type": "attribute",
                                                                  "text": "scaled_x.clamp_max",
                                                                  "children": [
                                                                    {
                                                                      "type": "identifier",
                                                                      "text": "scaled_x",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": ".",
                                                                      "text": ".",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "identifier",
                                                                      "text": "clamp_max",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "argument_list",
                                                                  "text": "(1e38)",
                                                                  "children": [
                                                                    {
                                                                      "type": "(",
                                                                      "text": "(",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "float",
                                                                      "text": "1e38",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": ")",
                                                                      "text": ")",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "tan",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "()",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ",",
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "call",
                                                      "text": "tanh(scaled_x)",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "tanh",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(scaled_x)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "scaled_x",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "call",
                                              "text": "k_sqrt.reciprocal()",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "k_sqrt.reciprocal",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k_sqrt",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "reciprocal",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "()",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "return_statement",
                              "text": "return torch.where(k_zero, tan_k_zero_taylor(x, k, order=1), tan_k_nonzero)",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.where(k_zero, tan_k_zero_taylor(x, k, order=1), tan_k_nonzero)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.where",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "where",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(k_zero, tan_k_zero_taylor(x, k, order=1), tan_k_nonzero)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k_zero",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "tan_k_zero_taylor(x, k, order=1)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "tan_k_zero_taylor",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(x, k, order=1)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "keyword_argument",
                                                  "text": "order=1",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "order",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "tan_k_nonzero",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef artan_k(x: torch.Tensor, k: torch.Tensor):\n    k_sign = k.sign()\n    zero = torch.zeros((), device=k.device, dtype=k.dtype)\n    k_zero = k.isclose(zero)\n    # shrink sign\n    k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))\n    if torch.all(k_zero):\n        return artan_k_zero_taylor(x, k, order=1)\n    k_sqrt = sabs(k).sqrt()\n    scaled_x = x * k_sqrt\n\n    if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * artanh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.atan()\n    else:\n        artan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.atan(), artanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, artan_k_zero_taylor(x, k, order=1), artan_k_nonzero)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def artan_k(x: torch.Tensor, k: torch.Tensor):\n    k_sign = k.sign()\n    zero = torch.zeros((), device=k.device, dtype=k.dtype)\n    k_zero = k.isclose(zero)\n    # shrink sign\n    k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))\n    if torch.all(k_zero):\n        return artan_k_zero_taylor(x, k, order=1)\n    k_sqrt = sabs(k).sqrt()\n    scaled_x = x * k_sqrt\n\n    if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * artanh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.atan()\n    else:\n        artan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.atan(), artanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, artan_k_zero_taylor(x, k, order=1), artan_k_nonzero)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "artan_k",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, k: torch.Tensor)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "k_sign = k.sign()\n    zero = torch.zeros((), device=k.device, dtype=k.dtype)\n    k_zero = k.isclose(zero)\n    # shrink sign\n    k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))\n    if torch.all(k_zero):\n        return artan_k_zero_taylor(x, k, order=1)\n    k_sqrt = sabs(k).sqrt()\n    scaled_x = x * k_sqrt\n\n    if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * artanh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.atan()\n    else:\n        artan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.atan(), artanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, artan_k_zero_taylor(x, k, order=1), artan_k_nonzero)",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "k_sign = k.sign()",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k_sign = k.sign()",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k_sign",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "k.sign()",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "k.sign",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sign",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "()",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "zero = torch.zeros((), device=k.device, dtype=k.dtype)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "zero = torch.zeros((), device=k.device, dtype=k.dtype)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "zero",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.zeros((), device=k.device, dtype=k.dtype)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.zeros",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "zeros",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "((), device=k.device, dtype=k.dtype)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "tuple",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "device=k.device",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "device",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "attribute",
                                      "text": "k.device",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "device",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dtype=k.dtype",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dtype",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "attribute",
                                      "text": "k.dtype",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dtype",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "k_zero = k.isclose(zero)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k_zero = k.isclose(zero)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k_zero",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "k.isclose(zero)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "k.isclose",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "isclose",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(zero)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "zero",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "# shrink sign",
                  "children": []
                },
                {
                  "type": "expression_statement",
                  "text": "k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k_sign",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.masked_fill",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "masked_fill",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(k_sign, k_zero, zero.to(k_sign.dtype))",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k_sign",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k_zero",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "zero.to(k_sign.dtype)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "zero.to",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "zero",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "to",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(k_sign.dtype)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "attribute",
                                          "text": "k_sign.dtype",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "k_sign",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dtype",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if torch.all(k_zero):\n        return artan_k_zero_taylor(x, k, order=1)",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.all(k_zero)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.all",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "all",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(k_zero)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "k_zero",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return artan_k_zero_taylor(x, k, order=1)",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return artan_k_zero_taylor(x, k, order=1)",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "artan_k_zero_taylor(x, k, order=1)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "artan_k_zero_taylor",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(x, k, order=1)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "order=1",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "order",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "k_sqrt = sabs(k).sqrt()",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k_sqrt = sabs(k).sqrt()",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k_sqrt",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "sabs(k).sqrt()",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "sabs(k).sqrt",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "sabs(k)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "sabs",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(k)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sqrt",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "()",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "scaled_x = x * k_sqrt",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "scaled_x = x * k_sqrt",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "scaled_x",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "x * k_sqrt",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "k_sqrt",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * artanh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.atan()\n    else:\n        artan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.atan(), artanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, artan_k_zero_taylor(x, k, order=1), artan_k_nonzero)",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.all(k_sign.lt(0))",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.all",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "all",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(k_sign.lt(0))",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "k_sign.lt(0)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "k_sign.lt",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "k_sign",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "lt",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(0)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "0",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return k_sqrt.reciprocal() * artanh(scaled_x)",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return k_sqrt.reciprocal() * artanh(scaled_x)",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "k_sqrt.reciprocal() * artanh(scaled_x)",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "k_sqrt.reciprocal()",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "k_sqrt.reciprocal",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k_sqrt",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "reciprocal",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "artanh(scaled_x)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "artanh",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(scaled_x)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "scaled_x",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.atan()",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.all(k_sign.gt(0))",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.all",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "all",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(k_sign.gt(0))",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "k_sign.gt(0)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "k_sign.gt",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k_sign",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "gt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(0)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "0",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return k_sqrt.reciprocal() * scaled_x.atan()",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return k_sqrt.reciprocal() * scaled_x.atan()",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "k_sqrt.reciprocal() * scaled_x.atan()",
                                  "children": [
                                    {
                                      "type": "call",
                                      "text": "k_sqrt.reciprocal()",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "k_sqrt.reciprocal",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "k_sqrt",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "reciprocal",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "()",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "call",
                                      "text": "scaled_x.atan()",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "scaled_x.atan",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "scaled_x",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "atan",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "()",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "else_clause",
                      "text": "else:\n        artan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.atan(), artanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, artan_k_zero_taylor(x, k, order=1), artan_k_nonzero)",
                      "children": [
                        {
                          "type": "else",
                          "text": "else",
                          "children": []
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "artan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.atan(), artanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, artan_k_zero_taylor(x, k, order=1), artan_k_nonzero)",
                          "children": [
                            {
                              "type": "expression_statement",
                              "text": "artan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.atan(), artanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )",
                              "children": [
                                {
                                  "type": "assignment",
                                  "text": "artan_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.atan(), artanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "artan_k_nonzero",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "parenthesized_expression",
                                      "text": "(\n            torch.where(k_sign.gt(0), scaled_x.atan(), artanh(scaled_x))\n            * k_sqrt.reciprocal()\n        )",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "torch.where(k_sign.gt(0), scaled_x.atan(), artanh(scaled_x))\n            * k_sqrt.reciprocal()",
                                          "children": [
                                            {
                                              "type": "call",
                                              "text": "torch.where(k_sign.gt(0), scaled_x.atan(), artanh(scaled_x))",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "torch.where",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "torch",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "where",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(k_sign.gt(0), scaled_x.atan(), artanh(scaled_x))",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "call",
                                                      "text": "k_sign.gt(0)",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "text": "k_sign.gt",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "k_sign",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "gt",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(0)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "0",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ",",
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "call",
                                                      "text": "scaled_x.atan()",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "text": "scaled_x.atan",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "scaled_x",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "atan",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "()",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ",",
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "call",
                                                      "text": "artanh(scaled_x)",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "artanh",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(scaled_x)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "scaled_x",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "call",
                                              "text": "k_sqrt.reciprocal()",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "k_sqrt.reciprocal",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k_sqrt",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "reciprocal",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "()",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "return_statement",
                              "text": "return torch.where(k_zero, artan_k_zero_taylor(x, k, order=1), artan_k_nonzero)",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.where(k_zero, artan_k_zero_taylor(x, k, order=1), artan_k_nonzero)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.where",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "where",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(k_zero, artan_k_zero_taylor(x, k, order=1), artan_k_nonzero)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k_zero",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "artan_k_zero_taylor(x, k, order=1)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "artan_k_zero_taylor",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(x, k, order=1)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "keyword_argument",
                                                  "text": "order=1",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "order",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "artan_k_nonzero",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef arsin_k(x: torch.Tensor, k: torch.Tensor):\n    k_sign = k.sign()\n    zero = torch.zeros((), device=k.device, dtype=k.dtype)\n    k_zero = k.isclose(zero)\n    # shrink sign\n    k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))\n    if torch.all(k_zero):\n        return arsin_k_zero_taylor(x, k)\n    k_sqrt = sabs(k).sqrt()\n    scaled_x = x * k_sqrt\n\n    if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * arsinh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.asin()\n    else:\n        arsin_k_nonzero = (\n            torch.where(\n                k_sign.gt(0),\n                scaled_x.clamp(-1 + 1e-7, 1 - 1e-7).asin(),\n                arsinh(scaled_x),\n            )\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, arsin_k_zero_taylor(x, k, order=1), arsin_k_nonzero)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def arsin_k(x: torch.Tensor, k: torch.Tensor):\n    k_sign = k.sign()\n    zero = torch.zeros((), device=k.device, dtype=k.dtype)\n    k_zero = k.isclose(zero)\n    # shrink sign\n    k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))\n    if torch.all(k_zero):\n        return arsin_k_zero_taylor(x, k)\n    k_sqrt = sabs(k).sqrt()\n    scaled_x = x * k_sqrt\n\n    if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * arsinh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.asin()\n    else:\n        arsin_k_nonzero = (\n            torch.where(\n                k_sign.gt(0),\n                scaled_x.clamp(-1 + 1e-7, 1 - 1e-7).asin(),\n                arsinh(scaled_x),\n            )\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, arsin_k_zero_taylor(x, k, order=1), arsin_k_nonzero)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "arsin_k",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, k: torch.Tensor)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "k_sign = k.sign()\n    zero = torch.zeros((), device=k.device, dtype=k.dtype)\n    k_zero = k.isclose(zero)\n    # shrink sign\n    k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))\n    if torch.all(k_zero):\n        return arsin_k_zero_taylor(x, k)\n    k_sqrt = sabs(k).sqrt()\n    scaled_x = x * k_sqrt\n\n    if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * arsinh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.asin()\n    else:\n        arsin_k_nonzero = (\n            torch.where(\n                k_sign.gt(0),\n                scaled_x.clamp(-1 + 1e-7, 1 - 1e-7).asin(),\n                arsinh(scaled_x),\n            )\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, arsin_k_zero_taylor(x, k, order=1), arsin_k_nonzero)",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "k_sign = k.sign()",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k_sign = k.sign()",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k_sign",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "k.sign()",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "k.sign",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sign",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "()",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "zero = torch.zeros((), device=k.device, dtype=k.dtype)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "zero = torch.zeros((), device=k.device, dtype=k.dtype)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "zero",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.zeros((), device=k.device, dtype=k.dtype)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.zeros",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "zeros",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "((), device=k.device, dtype=k.dtype)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "tuple",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "device=k.device",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "device",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "attribute",
                                      "text": "k.device",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "device",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dtype=k.dtype",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dtype",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "attribute",
                                      "text": "k.dtype",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dtype",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "k_zero = k.isclose(zero)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k_zero = k.isclose(zero)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k_zero",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "k.isclose(zero)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "k.isclose",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "isclose",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(zero)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "zero",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "# shrink sign",
                  "children": []
                },
                {
                  "type": "expression_statement",
                  "text": "k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k_sign",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.masked_fill",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "masked_fill",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(k_sign, k_zero, zero.to(k_sign.dtype))",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k_sign",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k_zero",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "zero.to(k_sign.dtype)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "zero.to",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "zero",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "to",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(k_sign.dtype)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "attribute",
                                          "text": "k_sign.dtype",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "k_sign",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dtype",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if torch.all(k_zero):\n        return arsin_k_zero_taylor(x, k)",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.all(k_zero)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.all",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "all",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(k_zero)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "k_zero",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return arsin_k_zero_taylor(x, k)",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return arsin_k_zero_taylor(x, k)",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "arsin_k_zero_taylor(x, k)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "arsin_k_zero_taylor",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(x, k)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "k_sqrt = sabs(k).sqrt()",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k_sqrt = sabs(k).sqrt()",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k_sqrt",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "sabs(k).sqrt()",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "sabs(k).sqrt",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "sabs(k)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "sabs",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(k)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sqrt",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "()",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "scaled_x = x * k_sqrt",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "scaled_x = x * k_sqrt",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "scaled_x",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "x * k_sqrt",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "k_sqrt",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * arsinh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.asin()\n    else:\n        arsin_k_nonzero = (\n            torch.where(\n                k_sign.gt(0),\n                scaled_x.clamp(-1 + 1e-7, 1 - 1e-7).asin(),\n                arsinh(scaled_x),\n            )\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, arsin_k_zero_taylor(x, k, order=1), arsin_k_nonzero)",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.all(k_sign.lt(0))",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.all",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "all",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(k_sign.lt(0))",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "k_sign.lt(0)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "k_sign.lt",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "k_sign",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "lt",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(0)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "0",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return k_sqrt.reciprocal() * arsinh(scaled_x)",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return k_sqrt.reciprocal() * arsinh(scaled_x)",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "k_sqrt.reciprocal() * arsinh(scaled_x)",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "k_sqrt.reciprocal()",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "k_sqrt.reciprocal",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k_sqrt",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "reciprocal",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "arsinh(scaled_x)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "arsinh",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(scaled_x)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "scaled_x",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.asin()",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.all(k_sign.gt(0))",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.all",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "all",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(k_sign.gt(0))",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "k_sign.gt(0)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "k_sign.gt",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k_sign",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "gt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(0)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "0",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return k_sqrt.reciprocal() * scaled_x.asin()",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return k_sqrt.reciprocal() * scaled_x.asin()",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "k_sqrt.reciprocal() * scaled_x.asin()",
                                  "children": [
                                    {
                                      "type": "call",
                                      "text": "k_sqrt.reciprocal()",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "k_sqrt.reciprocal",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "k_sqrt",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "reciprocal",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "()",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "call",
                                      "text": "scaled_x.asin()",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "scaled_x.asin",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "scaled_x",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "asin",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "()",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "else_clause",
                      "text": "else:\n        arsin_k_nonzero = (\n            torch.where(\n                k_sign.gt(0),\n                scaled_x.clamp(-1 + 1e-7, 1 - 1e-7).asin(),\n                arsinh(scaled_x),\n            )\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, arsin_k_zero_taylor(x, k, order=1), arsin_k_nonzero)",
                      "children": [
                        {
                          "type": "else",
                          "text": "else",
                          "children": []
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "arsin_k_nonzero = (\n            torch.where(\n                k_sign.gt(0),\n                scaled_x.clamp(-1 + 1e-7, 1 - 1e-7).asin(),\n                arsinh(scaled_x),\n            )\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, arsin_k_zero_taylor(x, k, order=1), arsin_k_nonzero)",
                          "children": [
                            {
                              "type": "expression_statement",
                              "text": "arsin_k_nonzero = (\n            torch.where(\n                k_sign.gt(0),\n                scaled_x.clamp(-1 + 1e-7, 1 - 1e-7).asin(),\n                arsinh(scaled_x),\n            )\n            * k_sqrt.reciprocal()\n        )",
                              "children": [
                                {
                                  "type": "assignment",
                                  "text": "arsin_k_nonzero = (\n            torch.where(\n                k_sign.gt(0),\n                scaled_x.clamp(-1 + 1e-7, 1 - 1e-7).asin(),\n                arsinh(scaled_x),\n            )\n            * k_sqrt.reciprocal()\n        )",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "arsin_k_nonzero",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "parenthesized_expression",
                                      "text": "(\n            torch.where(\n                k_sign.gt(0),\n                scaled_x.clamp(-1 + 1e-7, 1 - 1e-7).asin(),\n                arsinh(scaled_x),\n            )\n            * k_sqrt.reciprocal()\n        )",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "torch.where(\n                k_sign.gt(0),\n                scaled_x.clamp(-1 + 1e-7, 1 - 1e-7).asin(),\n                arsinh(scaled_x),\n            )\n            * k_sqrt.reciprocal()",
                                          "children": [
                                            {
                                              "type": "call",
                                              "text": "torch.where(\n                k_sign.gt(0),\n                scaled_x.clamp(-1 + 1e-7, 1 - 1e-7).asin(),\n                arsinh(scaled_x),\n            )",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "torch.where",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "torch",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "where",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(\n                k_sign.gt(0),\n                scaled_x.clamp(-1 + 1e-7, 1 - 1e-7).asin(),\n                arsinh(scaled_x),\n            )",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "call",
                                                      "text": "k_sign.gt(0)",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "text": "k_sign.gt",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "k_sign",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "gt",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(0)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "0",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ",",
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "call",
                                                      "text": "scaled_x.clamp(-1 + 1e-7, 1 - 1e-7).asin()",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "text": "scaled_x.clamp(-1 + 1e-7, 1 - 1e-7).asin",
                                                          "children": [
                                                            {
                                                              "type": "call",
                                                              "text": "scaled_x.clamp(-1 + 1e-7, 1 - 1e-7)",
                                                              "children": [
                                                                {
                                                                  "type": "attribute",
                                                                  "text": "scaled_x.clamp",
                                                                  "children": [
                                                                    {
                                                                      "type": "identifier",
                                                                      "text": "scaled_x",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": ".",
                                                                      "text": ".",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "identifier",
                                                                      "text": "clamp",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "argument_list",
                                                                  "text": "(-1 + 1e-7, 1 - 1e-7)",
                                                                  "children": [
                                                                    {
                                                                      "type": "(",
                                                                      "text": "(",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "binary_operator",
                                                                      "text": "-1 + 1e-7",
                                                                      "children": [
                                                                        {
                                                                          "type": "unary_operator",
                                                                          "text": "-1",
                                                                          "children": [
                                                                            {
                                                                              "type": "-",
                                                                              "text": "-",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "integer",
                                                                              "text": "1",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "+",
                                                                          "text": "+",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "float",
                                                                          "text": "1e-7",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": ",",
                                                                      "text": ",",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "binary_operator",
                                                                      "text": "1 - 1e-7",
                                                                      "children": [
                                                                        {
                                                                          "type": "integer",
                                                                          "text": "1",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "-",
                                                                          "text": "-",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "float",
                                                                          "text": "1e-7",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": ")",
                                                                      "text": ")",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "asin",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "()",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ",",
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "call",
                                                      "text": "arsinh(scaled_x)",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "arsinh",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(scaled_x)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "scaled_x",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ",",
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "call",
                                              "text": "k_sqrt.reciprocal()",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "k_sqrt.reciprocal",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k_sqrt",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "reciprocal",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "()",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "return_statement",
                              "text": "return torch.where(k_zero, arsin_k_zero_taylor(x, k, order=1), arsin_k_nonzero)",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.where(k_zero, arsin_k_zero_taylor(x, k, order=1), arsin_k_nonzero)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.where",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "where",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(k_zero, arsin_k_zero_taylor(x, k, order=1), arsin_k_nonzero)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k_zero",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "arsin_k_zero_taylor(x, k, order=1)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "arsin_k_zero_taylor",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(x, k, order=1)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "keyword_argument",
                                                  "text": "order=1",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "order",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "arsin_k_nonzero",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef sin_k(x: torch.Tensor, k: torch.Tensor):\n    k_sign = k.sign()\n    zero = torch.zeros((), device=k.device, dtype=k.dtype)\n    k_zero = k.isclose(zero)\n    # shrink sign\n    k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))\n    if torch.all(k_zero):\n        return sin_k_zero_taylor(x, k)\n    k_sqrt = sabs(k).sqrt()\n    scaled_x = x * k_sqrt\n\n    if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * torch.sinh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.sin()\n    else:\n        sin_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.sin(), torch.sinh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, sin_k_zero_taylor(x, k, order=1), sin_k_nonzero)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def sin_k(x: torch.Tensor, k: torch.Tensor):\n    k_sign = k.sign()\n    zero = torch.zeros((), device=k.device, dtype=k.dtype)\n    k_zero = k.isclose(zero)\n    # shrink sign\n    k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))\n    if torch.all(k_zero):\n        return sin_k_zero_taylor(x, k)\n    k_sqrt = sabs(k).sqrt()\n    scaled_x = x * k_sqrt\n\n    if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * torch.sinh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.sin()\n    else:\n        sin_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.sin(), torch.sinh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, sin_k_zero_taylor(x, k, order=1), sin_k_nonzero)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "sin_k",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, k: torch.Tensor)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "k_sign = k.sign()\n    zero = torch.zeros((), device=k.device, dtype=k.dtype)\n    k_zero = k.isclose(zero)\n    # shrink sign\n    k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))\n    if torch.all(k_zero):\n        return sin_k_zero_taylor(x, k)\n    k_sqrt = sabs(k).sqrt()\n    scaled_x = x * k_sqrt\n\n    if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * torch.sinh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.sin()\n    else:\n        sin_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.sin(), torch.sinh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, sin_k_zero_taylor(x, k, order=1), sin_k_nonzero)",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "k_sign = k.sign()",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k_sign = k.sign()",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k_sign",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "k.sign()",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "k.sign",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sign",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "()",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "zero = torch.zeros((), device=k.device, dtype=k.dtype)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "zero = torch.zeros((), device=k.device, dtype=k.dtype)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "zero",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.zeros((), device=k.device, dtype=k.dtype)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.zeros",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "zeros",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "((), device=k.device, dtype=k.dtype)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "tuple",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "device=k.device",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "device",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "attribute",
                                      "text": "k.device",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "device",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dtype=k.dtype",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dtype",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "attribute",
                                      "text": "k.dtype",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dtype",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "k_zero = k.isclose(zero)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k_zero = k.isclose(zero)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k_zero",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "k.isclose(zero)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "k.isclose",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "isclose",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(zero)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "zero",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "# shrink sign",
                  "children": []
                },
                {
                  "type": "expression_statement",
                  "text": "k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k_sign = torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k_sign",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.masked_fill(k_sign, k_zero, zero.to(k_sign.dtype))",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.masked_fill",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "masked_fill",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(k_sign, k_zero, zero.to(k_sign.dtype))",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k_sign",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k_zero",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "zero.to(k_sign.dtype)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "zero.to",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "zero",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "to",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(k_sign.dtype)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "attribute",
                                          "text": "k_sign.dtype",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "k_sign",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dtype",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if torch.all(k_zero):\n        return sin_k_zero_taylor(x, k)",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.all(k_zero)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.all",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "all",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(k_zero)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "k_zero",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return sin_k_zero_taylor(x, k)",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return sin_k_zero_taylor(x, k)",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "sin_k_zero_taylor(x, k)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "sin_k_zero_taylor",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(x, k)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "k_sqrt = sabs(k).sqrt()",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "k_sqrt = sabs(k).sqrt()",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "k_sqrt",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "sabs(k).sqrt()",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "sabs(k).sqrt",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "sabs(k)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "sabs",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(k)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sqrt",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "()",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "scaled_x = x * k_sqrt",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "scaled_x = x * k_sqrt",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "scaled_x",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "x * k_sqrt",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "k_sqrt",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if torch.all(k_sign.lt(0)):\n        return k_sqrt.reciprocal() * torch.sinh(scaled_x)\n    elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.sin()\n    else:\n        sin_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.sin(), torch.sinh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, sin_k_zero_taylor(x, k, order=1), sin_k_nonzero)",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.all(k_sign.lt(0))",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.all",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "all",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(k_sign.lt(0))",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "k_sign.lt(0)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "k_sign.lt",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "k_sign",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "lt",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(0)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "0",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return k_sqrt.reciprocal() * torch.sinh(scaled_x)",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return k_sqrt.reciprocal() * torch.sinh(scaled_x)",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "k_sqrt.reciprocal() * torch.sinh(scaled_x)",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "k_sqrt.reciprocal()",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "k_sqrt.reciprocal",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k_sqrt",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "reciprocal",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.sinh(scaled_x)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.sinh",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "sinh",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(scaled_x)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "scaled_x",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "elif_clause",
                      "text": "elif torch.all(k_sign.gt(0)):\n        return k_sqrt.reciprocal() * scaled_x.sin()",
                      "children": [
                        {
                          "type": "elif",
                          "text": "elif",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.all(k_sign.gt(0))",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.all",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "all",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(k_sign.gt(0))",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "k_sign.gt(0)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "k_sign.gt",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k_sign",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "gt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(0)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "0",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "return k_sqrt.reciprocal() * scaled_x.sin()",
                          "children": [
                            {
                              "type": "return_statement",
                              "text": "return k_sqrt.reciprocal() * scaled_x.sin()",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "k_sqrt.reciprocal() * scaled_x.sin()",
                                  "children": [
                                    {
                                      "type": "call",
                                      "text": "k_sqrt.reciprocal()",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "k_sqrt.reciprocal",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "k_sqrt",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "reciprocal",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "()",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "call",
                                      "text": "scaled_x.sin()",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "scaled_x.sin",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "scaled_x",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "sin",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "()",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "else_clause",
                      "text": "else:\n        sin_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.sin(), torch.sinh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, sin_k_zero_taylor(x, k, order=1), sin_k_nonzero)",
                      "children": [
                        {
                          "type": "else",
                          "text": "else",
                          "children": []
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "sin_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.sin(), torch.sinh(scaled_x))\n            * k_sqrt.reciprocal()\n        )\n        return torch.where(k_zero, sin_k_zero_taylor(x, k, order=1), sin_k_nonzero)",
                          "children": [
                            {
                              "type": "expression_statement",
                              "text": "sin_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.sin(), torch.sinh(scaled_x))\n            * k_sqrt.reciprocal()\n        )",
                              "children": [
                                {
                                  "type": "assignment",
                                  "text": "sin_k_nonzero = (\n            torch.where(k_sign.gt(0), scaled_x.sin(), torch.sinh(scaled_x))\n            * k_sqrt.reciprocal()\n        )",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "sin_k_nonzero",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "parenthesized_expression",
                                      "text": "(\n            torch.where(k_sign.gt(0), scaled_x.sin(), torch.sinh(scaled_x))\n            * k_sqrt.reciprocal()\n        )",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "torch.where(k_sign.gt(0), scaled_x.sin(), torch.sinh(scaled_x))\n            * k_sqrt.reciprocal()",
                                          "children": [
                                            {
                                              "type": "call",
                                              "text": "torch.where(k_sign.gt(0), scaled_x.sin(), torch.sinh(scaled_x))",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "torch.where",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "torch",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "where",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(k_sign.gt(0), scaled_x.sin(), torch.sinh(scaled_x))",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "call",
                                                      "text": "k_sign.gt(0)",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "text": "k_sign.gt",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "k_sign",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "gt",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(0)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "0",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ",",
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "call",
                                                      "text": "scaled_x.sin()",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "text": "scaled_x.sin",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "scaled_x",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "sin",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "()",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ",",
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "call",
                                                      "text": "torch.sinh(scaled_x)",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "text": "torch.sinh",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "torch",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "sinh",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(scaled_x)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "scaled_x",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "call",
                                              "text": "k_sqrt.reciprocal()",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "k_sqrt.reciprocal",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k_sqrt",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "reciprocal",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "()",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "return_statement",
                              "text": "return torch.where(k_zero, sin_k_zero_taylor(x, k, order=1), sin_k_nonzero)",
                              "children": [
                                {
                                  "type": "return",
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.where(k_zero, sin_k_zero_taylor(x, k, order=1), sin_k_nonzero)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.where",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "where",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(k_zero, sin_k_zero_taylor(x, k, order=1), sin_k_nonzero)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k_zero",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "sin_k_zero_taylor(x, k, order=1)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "sin_k_zero_taylor",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(x, k, order=1)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "keyword_argument",
                                                  "text": "order=1",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "order",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "sin_k_nonzero",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def project(x: torch.Tensor, *, k: torch.Tensor, dim=-1, eps=-1):\n    r\"\"\"\n    Safe projection on the manifold for numerical stability.\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension to compute norm\n    eps : float\n        stability parameter, uses default for dtype if not provided\n\n    Returns\n    -------\n    tensor\n        projected vector on the manifold\n    \"\"\"\n    return _project(x, k, dim, eps)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "project",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x: torch.Tensor, *, k: torch.Tensor, dim=-1, eps=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "eps=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "eps",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Safe projection on the manifold for numerical stability.\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension to compute norm\n    eps : float\n        stability parameter, uses default for dtype if not provided\n\n    Returns\n    -------\n    tensor\n        projected vector on the manifold\n    \"\"\"\n    return _project(x, k, dim, eps)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Safe projection on the manifold for numerical stability.\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension to compute norm\n    eps : float\n        stability parameter, uses default for dtype if not provided\n\n    Returns\n    -------\n    tensor\n        projected vector on the manifold\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Safe projection on the manifold for numerical stability.\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension to compute norm\n    eps : float\n        stability parameter, uses default for dtype if not provided\n\n    Returns\n    -------\n    tensor\n        projected vector on the manifold\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _project(x, k, dim, eps)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_project(x, k, dim, eps)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_project",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, k, dim, eps)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "dim",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "eps",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _project(x, k, dim: int = -1, eps: float = -1.0):\n    if eps < 0:\n        if x.dtype == torch.float32:\n            eps = 4e-3\n        else:\n            eps = 1e-5\n    maxnorm = (1 - eps) / (sabs(k) ** 0.5)\n    maxnorm = torch.where(k.lt(0), maxnorm, k.new_full((), 1e15))\n    norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    cond = norm > maxnorm\n    projected = x / norm * maxnorm\n    return torch.where(cond, projected, x)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _project(x, k, dim: int = -1, eps: float = -1.0):\n    if eps < 0:\n        if x.dtype == torch.float32:\n            eps = 4e-3\n        else:\n            eps = 1e-5\n    maxnorm = (1 - eps) / (sabs(k) ** 0.5)\n    maxnorm = torch.where(k.lt(0), maxnorm, k.new_full((), 1e15))\n    norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    cond = norm > maxnorm\n    projected = x / norm * maxnorm\n    return torch.where(cond, projected, x)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_project",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x, k, dim: int = -1, eps: float = -1.0)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "eps: float = -1.0",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "eps",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "float",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "float",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1.0",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "float",
                          "text": "1.0",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "if eps < 0:\n        if x.dtype == torch.float32:\n            eps = 4e-3\n        else:\n            eps = 1e-5\n    maxnorm = (1 - eps) / (sabs(k) ** 0.5)\n    maxnorm = torch.where(k.lt(0), maxnorm, k.new_full((), 1e15))\n    norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    cond = norm > maxnorm\n    projected = x / norm * maxnorm\n    return torch.where(cond, projected, x)",
              "children": [
                {
                  "type": "if_statement",
                  "text": "if eps < 0:\n        if x.dtype == torch.float32:\n            eps = 4e-3\n        else:\n            eps = 1e-5",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "comparison_operator",
                      "text": "eps < 0",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "eps",
                          "children": []
                        },
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "if x.dtype == torch.float32:\n            eps = 4e-3\n        else:\n            eps = 1e-5",
                      "children": [
                        {
                          "type": "if_statement",
                          "text": "if x.dtype == torch.float32:\n            eps = 4e-3\n        else:\n            eps = 1e-5",
                          "children": [
                            {
                              "type": "if",
                              "text": "if",
                              "children": []
                            },
                            {
                              "type": "comparison_operator",
                              "text": "x.dtype == torch.float32",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "x.dtype",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dtype",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "==",
                                  "text": "==",
                                  "children": []
                                },
                                {
                                  "type": "attribute",
                                  "text": "torch.float32",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "torch",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "float32",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ":",
                              "text": ":",
                              "children": []
                            },
                            {
                              "type": "block",
                              "text": "eps = 4e-3",
                              "children": [
                                {
                                  "type": "expression_statement",
                                  "text": "eps = 4e-3",
                                  "children": [
                                    {
                                      "type": "assignment",
                                      "text": "eps = 4e-3",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "eps",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "float",
                                          "text": "4e-3",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "else_clause",
                              "text": "else:\n            eps = 1e-5",
                              "children": [
                                {
                                  "type": "else",
                                  "text": "else",
                                  "children": []
                                },
                                {
                                  "type": ":",
                                  "text": ":",
                                  "children": []
                                },
                                {
                                  "type": "block",
                                  "text": "eps = 1e-5",
                                  "children": [
                                    {
                                      "type": "expression_statement",
                                      "text": "eps = 1e-5",
                                      "children": [
                                        {
                                          "type": "assignment",
                                          "text": "eps = 1e-5",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "eps",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "float",
                                              "text": "1e-5",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "maxnorm = (1 - eps) / (sabs(k) ** 0.5)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "maxnorm = (1 - eps) / (sabs(k) ** 0.5)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "maxnorm",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "(1 - eps) / (sabs(k) ** 0.5)",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(1 - eps)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "1 - eps",
                                  "children": [
                                    {
                                      "type": "integer",
                                      "text": "1",
                                      "children": []
                                    },
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "eps",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "/",
                              "text": "/",
                              "children": []
                            },
                            {
                              "type": "parenthesized_expression",
                              "text": "(sabs(k) ** 0.5)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "sabs(k) ** 0.5",
                                  "children": [
                                    {
                                      "type": "call",
                                      "text": "sabs(k)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "sabs",
                                          "children": []
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(k)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "k",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "**",
                                      "text": "**",
                                      "children": []
                                    },
                                    {
                                      "type": "float",
                                      "text": "0.5",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "maxnorm = torch.where(k.lt(0), maxnorm, k.new_full((), 1e15))",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "maxnorm = torch.where(k.lt(0), maxnorm, k.new_full((), 1e15))",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "maxnorm",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.where(k.lt(0), maxnorm, k.new_full((), 1e15))",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.where",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "where",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(k.lt(0), maxnorm, k.new_full((), 1e15))",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "k.lt(0)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "k.lt",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "lt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(0)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "0",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "maxnorm",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "k.new_full((), 1e15)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "k.new_full",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "new_full",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "((), 1e15)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "tuple",
                                          "text": "()",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "float",
                                          "text": "1e15",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "norm",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "x.norm(dim=dim, keepdim=True, p=2).clamp_min",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "x.norm(dim=dim, keepdim=True, p=2)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "x.norm",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(dim=dim, keepdim=True, p=2)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "keepdim=True",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "true",
                                              "text": "True",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "p=2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "p",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(1e-15)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "1e-15",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "cond = norm > maxnorm",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "cond = norm > maxnorm",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "cond",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "norm > maxnorm",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "norm",
                              "children": []
                            },
                            {
                              "type": ">",
                              "text": ">",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "maxnorm",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "projected = x / norm * maxnorm",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "projected = x / norm * maxnorm",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "projected",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "x / norm * maxnorm",
                          "children": [
                            {
                              "type": "binary_operator",
                              "text": "x / norm",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": "/",
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "norm",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "maxnorm",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return torch.where(cond, projected, x)",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.where(cond, projected, x)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.where",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "where",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(cond, projected, x)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "cond",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "projected",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def lambda_x(x: torch.Tensor, *, k: torch.Tensor, keepdim=False, dim=-1):\n    r\"\"\"\n    Compute the conformal factor :math:`\\lambda^\\kappa_x` for a point on the ball.\n\n    .. math::\n        \\lambda^\\kappa_x = \\frac{2}{1 + \\kappa \\|x\\|_2^2}\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        conformal factor\n    \"\"\"\n    return _lambda_x(x, k, keepdim=keepdim, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "lambda_x",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x: torch.Tensor, *, k: torch.Tensor, keepdim=False, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "keepdim=False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the conformal factor :math:`\\lambda^\\kappa_x` for a point on the ball.\n\n    .. math::\n        \\lambda^\\kappa_x = \\frac{2}{1 + \\kappa \\|x\\|_2^2}\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        conformal factor\n    \"\"\"\n    return _lambda_x(x, k, keepdim=keepdim, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the conformal factor :math:`\\lambda^\\kappa_x` for a point on the ball.\n\n    .. math::\n        \\lambda^\\kappa_x = \\frac{2}{1 + \\kappa \\|x\\|_2^2}\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        conformal factor\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the conformal factor :math:`\\lambda^\\kappa_x` for a point on the ball.\n\n    .. math::\n        \\lambda^\\kappa_x = \\frac{2}{1 + \\kappa \\|x\\|_2^2}\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        conformal factor\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _lambda_x(x, k, keepdim=keepdim, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_lambda_x(x, k, keepdim=keepdim, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_lambda_x",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, k, keepdim=keepdim, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "keepdim=keepdim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _lambda_x(x: torch.Tensor, k: torch.Tensor, keepdim: bool = False, dim: int = -1):\n    return 2 / (1 + k * x.pow(2).sum(dim=dim, keepdim=keepdim)).clamp_min(1e-15)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _lambda_x(x: torch.Tensor, k: torch.Tensor, keepdim: bool = False, dim: int = -1):\n    return 2 / (1 + k * x.pow(2).sum(dim=dim, keepdim=keepdim)).clamp_min(1e-15)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_lambda_x",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, k: torch.Tensor, keepdim: bool = False, dim: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "keepdim: bool = False",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "keepdim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "bool",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "bool",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "false",
                      "text": "False",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "return 2 / (1 + k * x.pow(2).sum(dim=dim, keepdim=keepdim)).clamp_min(1e-15)",
              "children": [
                {
                  "type": "return_statement",
                  "text": "return 2 / (1 + k * x.pow(2).sum(dim=dim, keepdim=keepdim)).clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "2 / (1 + k * x.pow(2).sum(dim=dim, keepdim=keepdim)).clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "integer",
                          "text": "2",
                          "children": []
                        },
                        {
                          "type": "/",
                          "text": "/",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "(1 + k * x.pow(2).sum(dim=dim, keepdim=keepdim)).clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "(1 + k * x.pow(2).sum(dim=dim, keepdim=keepdim)).clamp_min",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(1 + k * x.pow(2).sum(dim=dim, keepdim=keepdim))",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "1 + k * x.pow(2).sum(dim=dim, keepdim=keepdim)",
                                      "children": [
                                        {
                                          "type": "integer",
                                          "text": "1",
                                          "children": []
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "k * x.pow(2).sum(dim=dim, keepdim=keepdim)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "k",
                                              "children": []
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "call",
                                              "text": "x.pow(2).sum(dim=dim, keepdim=keepdim)",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "x.pow(2).sum",
                                                  "children": [
                                                    {
                                                      "type": "call",
                                                      "text": "x.pow(2)",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "text": "x.pow",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "x",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "pow",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(2)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "2",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "sum",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(dim=dim, keepdim=keepdim)",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "keyword_argument",
                                                      "text": "dim=dim",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "dim",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "=",
                                                          "text": "=",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "dim",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ",",
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "keyword_argument",
                                                      "text": "keepdim=keepdim",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "keepdim",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "=",
                                                          "text": "=",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "keepdim",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(1e-15)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "1e-15",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def inner(\n    x: torch.Tensor, u: torch.Tensor, v: torch.Tensor, *, k, keepdim=False, dim=-1\n):\n    r\"\"\"\n    Compute inner product for two vectors on the tangent space w.r.t Riemannian metric on the Poincare ball.\n\n    .. math::\n\n        \\langle u, v\\rangle_x = (\\lambda^\\kappa_x)^2 \\langle u, v \\rangle\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    u : tensor\n        tangent vector to :math:`x` on Poincare ball\n    v : tensor\n        tangent vector to :math:`x` on Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        inner product\n    \"\"\"\n    return _inner(x, u, v, k, keepdim=keepdim, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "inner",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(\n    x: torch.Tensor, u: torch.Tensor, v: torch.Tensor, *, k, keepdim=False, dim=-1\n)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "u: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "u",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "v: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "v",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "k",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "keepdim=False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute inner product for two vectors on the tangent space w.r.t Riemannian metric on the Poincare ball.\n\n    .. math::\n\n        \\langle u, v\\rangle_x = (\\lambda^\\kappa_x)^2 \\langle u, v \\rangle\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    u : tensor\n        tangent vector to :math:`x` on Poincare ball\n    v : tensor\n        tangent vector to :math:`x` on Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        inner product\n    \"\"\"\n    return _inner(x, u, v, k, keepdim=keepdim, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute inner product for two vectors on the tangent space w.r.t Riemannian metric on the Poincare ball.\n\n    .. math::\n\n        \\langle u, v\\rangle_x = (\\lambda^\\kappa_x)^2 \\langle u, v \\rangle\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    u : tensor\n        tangent vector to :math:`x` on Poincare ball\n    v : tensor\n        tangent vector to :math:`x` on Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        inner product\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute inner product for two vectors on the tangent space w.r.t Riemannian metric on the Poincare ball.\n\n    .. math::\n\n        \\langle u, v\\rangle_x = (\\lambda^\\kappa_x)^2 \\langle u, v \\rangle\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    u : tensor\n        tangent vector to :math:`x` on Poincare ball\n    v : tensor\n        tangent vector to :math:`x` on Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        inner product\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _inner(x, u, v, k, keepdim=keepdim, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_inner(x, u, v, k, keepdim=keepdim, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_inner",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, u, v, k, keepdim=keepdim, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "u",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "v",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "keepdim=keepdim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _inner(\n    x: torch.Tensor,\n    u: torch.Tensor,\n    v: torch.Tensor,\n    k: torch.Tensor,\n    keepdim: bool = False,\n    dim: int = -1,\n):\n    return _lambda_x(x, k, keepdim=True, dim=dim) ** 2 * (u * v).sum(\n        dim=dim, keepdim=keepdim\n    )",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _inner(\n    x: torch.Tensor,\n    u: torch.Tensor,\n    v: torch.Tensor,\n    k: torch.Tensor,\n    keepdim: bool = False,\n    dim: int = -1,\n):\n    return _lambda_x(x, k, keepdim=True, dim=dim) ** 2 * (u * v).sum(\n        dim=dim, keepdim=keepdim\n    )",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_inner",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(\n    x: torch.Tensor,\n    u: torch.Tensor,\n    v: torch.Tensor,\n    k: torch.Tensor,\n    keepdim: bool = False,\n    dim: int = -1,\n)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "u: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "u",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "v: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "v",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "keepdim: bool = False",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "keepdim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "bool",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "bool",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "false",
                      "text": "False",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "return _lambda_x(x, k, keepdim=True, dim=dim) ** 2 * (u * v).sum(\n        dim=dim, keepdim=keepdim\n    )",
              "children": [
                {
                  "type": "return_statement",
                  "text": "return _lambda_x(x, k, keepdim=True, dim=dim) ** 2 * (u * v).sum(\n        dim=dim, keepdim=keepdim\n    )",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "_lambda_x(x, k, keepdim=True, dim=dim) ** 2 * (u * v).sum(\n        dim=dim, keepdim=keepdim\n    )",
                      "children": [
                        {
                          "type": "binary_operator",
                          "text": "_lambda_x(x, k, keepdim=True, dim=dim) ** 2",
                          "children": [
                            {
                              "type": "call",
                              "text": "_lambda_x(x, k, keepdim=True, dim=dim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "_lambda_x",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(x, k, keepdim=True, dim=dim)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=True",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "true",
                                          "text": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "**",
                              "text": "**",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "(u * v).sum(\n        dim=dim, keepdim=keepdim\n    )",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "(u * v).sum",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(u * v)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "u * v",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "u",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "v",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sum",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(\n        dim=dim, keepdim=keepdim\n    )",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=keepdim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def norm(x: torch.Tensor, u: torch.Tensor, *, k: torch.Tensor, keepdim=False, dim=-1):\n    r\"\"\"\n    Compute vector norm on the tangent space w.r.t Riemannian metric on the Poincare ball.\n\n    .. math::\n\n        \\|u\\|_x = \\lambda^\\kappa_x \\|u\\|_2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    u : tensor\n        tangent vector to :math:`x` on Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        norm of vector\n    \"\"\"\n    return _norm(x, u, k, keepdim=keepdim, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "norm",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x: torch.Tensor, u: torch.Tensor, *, k: torch.Tensor, keepdim=False, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "u: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "u",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "keepdim=False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute vector norm on the tangent space w.r.t Riemannian metric on the Poincare ball.\n\n    .. math::\n\n        \\|u\\|_x = \\lambda^\\kappa_x \\|u\\|_2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    u : tensor\n        tangent vector to :math:`x` on Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        norm of vector\n    \"\"\"\n    return _norm(x, u, k, keepdim=keepdim, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute vector norm on the tangent space w.r.t Riemannian metric on the Poincare ball.\n\n    .. math::\n\n        \\|u\\|_x = \\lambda^\\kappa_x \\|u\\|_2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    u : tensor\n        tangent vector to :math:`x` on Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        norm of vector\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute vector norm on the tangent space w.r.t Riemannian metric on the Poincare ball.\n\n    .. math::\n\n        \\|u\\|_x = \\lambda^\\kappa_x \\|u\\|_2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the Poincare ball\n    u : tensor\n        tangent vector to :math:`x` on Poincare ball\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        norm of vector\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _norm(x, u, k, keepdim=keepdim, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_norm(x, u, k, keepdim=keepdim, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_norm",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, u, k, keepdim=keepdim, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "u",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "keepdim=keepdim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _norm(\n    x: torch.Tensor,\n    u: torch.Tensor,\n    k: torch.Tensor,\n    keepdim: bool = False,\n    dim: int = -1,\n):\n    return _lambda_x(x, k, keepdim=keepdim, dim=dim) * u.norm(\n        dim=dim, keepdim=keepdim, p=2\n    )",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _norm(\n    x: torch.Tensor,\n    u: torch.Tensor,\n    k: torch.Tensor,\n    keepdim: bool = False,\n    dim: int = -1,\n):\n    return _lambda_x(x, k, keepdim=keepdim, dim=dim) * u.norm(\n        dim=dim, keepdim=keepdim, p=2\n    )",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_norm",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(\n    x: torch.Tensor,\n    u: torch.Tensor,\n    k: torch.Tensor,\n    keepdim: bool = False,\n    dim: int = -1,\n)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "u: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "u",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "keepdim: bool = False",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "keepdim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "bool",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "bool",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "false",
                      "text": "False",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "return _lambda_x(x, k, keepdim=keepdim, dim=dim) * u.norm(\n        dim=dim, keepdim=keepdim, p=2\n    )",
              "children": [
                {
                  "type": "return_statement",
                  "text": "return _lambda_x(x, k, keepdim=keepdim, dim=dim) * u.norm(\n        dim=dim, keepdim=keepdim, p=2\n    )",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "_lambda_x(x, k, keepdim=keepdim, dim=dim) * u.norm(\n        dim=dim, keepdim=keepdim, p=2\n    )",
                      "children": [
                        {
                          "type": "call",
                          "text": "_lambda_x(x, k, keepdim=keepdim, dim=dim)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_lambda_x",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(x, k, keepdim=keepdim, dim=dim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=keepdim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "u.norm(\n        dim=dim, keepdim=keepdim, p=2\n    )",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "u.norm",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "u",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "norm",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(\n        dim=dim, keepdim=keepdim, p=2\n    )",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=keepdim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "p=2",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "p",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def mobius_add(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the Möbius gyrovector addition.\n\n    .. math::\n\n        x \\oplus_\\kappa y =\n        \\frac{\n            (1 - 2 \\kappa \\langle x, y\\rangle - \\kappa \\|y\\|^2_2) x +\n            (1 + \\kappa \\|x\\|_2^2) y\n        }{\n            1 - 2 \\kappa \\langle x, y\\rangle + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        }\n\n    .. plot:: plots/extended/stereographic/mobius_add.py\n\n    In general this operation is not commutative:\n\n    .. math::\n\n        x \\oplus_\\kappa y \\ne y \\oplus_\\kappa x\n\n    But in some cases this property holds:\n\n    * zero vector case\n\n    .. math::\n\n        \\mathbf{0} \\oplus_\\kappa x = x \\oplus_\\kappa \\mathbf{0}\n\n    * zero curvature case that is same as Euclidean addition\n\n    .. math::\n\n        x \\oplus_0 y = y \\oplus_0 x\n\n    Another useful property is so called left-cancellation law:\n\n    .. math::\n\n        (-x) \\oplus_\\kappa (x \\oplus_\\kappa y) = y\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    y : tensor\n        point on the manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius addition\n    \"\"\"\n    return _mobius_add(x, y, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_add",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "y: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "y",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the Möbius gyrovector addition.\n\n    .. math::\n\n        x \\oplus_\\kappa y =\n        \\frac{\n            (1 - 2 \\kappa \\langle x, y\\rangle - \\kappa \\|y\\|^2_2) x +\n            (1 + \\kappa \\|x\\|_2^2) y\n        }{\n            1 - 2 \\kappa \\langle x, y\\rangle + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        }\n\n    .. plot:: plots/extended/stereographic/mobius_add.py\n\n    In general this operation is not commutative:\n\n    .. math::\n\n        x \\oplus_\\kappa y \\ne y \\oplus_\\kappa x\n\n    But in some cases this property holds:\n\n    * zero vector case\n\n    .. math::\n\n        \\mathbf{0} \\oplus_\\kappa x = x \\oplus_\\kappa \\mathbf{0}\n\n    * zero curvature case that is same as Euclidean addition\n\n    .. math::\n\n        x \\oplus_0 y = y \\oplus_0 x\n\n    Another useful property is so called left-cancellation law:\n\n    .. math::\n\n        (-x) \\oplus_\\kappa (x \\oplus_\\kappa y) = y\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    y : tensor\n        point on the manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius addition\n    \"\"\"\n    return _mobius_add(x, y, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the Möbius gyrovector addition.\n\n    .. math::\n\n        x \\oplus_\\kappa y =\n        \\frac{\n            (1 - 2 \\kappa \\langle x, y\\rangle - \\kappa \\|y\\|^2_2) x +\n            (1 + \\kappa \\|x\\|_2^2) y\n        }{\n            1 - 2 \\kappa \\langle x, y\\rangle + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        }\n\n    .. plot:: plots/extended/stereographic/mobius_add.py\n\n    In general this operation is not commutative:\n\n    .. math::\n\n        x \\oplus_\\kappa y \\ne y \\oplus_\\kappa x\n\n    But in some cases this property holds:\n\n    * zero vector case\n\n    .. math::\n\n        \\mathbf{0} \\oplus_\\kappa x = x \\oplus_\\kappa \\mathbf{0}\n\n    * zero curvature case that is same as Euclidean addition\n\n    .. math::\n\n        x \\oplus_0 y = y \\oplus_0 x\n\n    Another useful property is so called left-cancellation law:\n\n    .. math::\n\n        (-x) \\oplus_\\kappa (x \\oplus_\\kappa y) = y\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    y : tensor\n        point on the manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius addition\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the Möbius gyrovector addition.\n\n    .. math::\n\n        x \\oplus_\\kappa y =\n        \\frac{\n            (1 - 2 \\kappa \\langle x, y\\rangle - \\kappa \\|y\\|^2_2) x +\n            (1 + \\kappa \\|x\\|_2^2) y\n        }{\n            1 - 2 \\kappa \\langle x, y\\rangle + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        }\n\n    .. plot:: plots/extended/stereographic/mobius_add.py\n\n    In general this operation is not commutative:\n\n    .. math::\n\n        x \\oplus_\\kappa y \\ne y \\oplus_\\kappa x\n\n    But in some cases this property holds:\n\n    * zero vector case\n\n    .. math::\n\n        \\mathbf{0} \\oplus_\\kappa x = x \\oplus_\\kappa \\mathbf{0}\n\n    * zero curvature case that is same as Euclidean addition\n\n    .. math::\n\n        x \\oplus_0 y = y \\oplus_0 x\n\n    Another useful property is so called left-cancellation law:\n\n    .. math::\n\n        (-x) \\oplus_\\kappa (x \\oplus_\\kappa y) = y\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    y : tensor\n        point on the manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius addition\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _mobius_add(x, y, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_add(x, y, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_add",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, y, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _mobius_add(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    x2 = x.pow(2).sum(dim=dim, keepdim=True)\n    y2 = y.pow(2).sum(dim=dim, keepdim=True)\n    xy = (x * y).sum(dim=dim, keepdim=True)\n    num = (1 - 2 * k * xy - k * y2) * x + (1 + k * x2) * y\n    denom = 1 - 2 * k * xy + k**2 * x2 * y2\n    # minimize denom (omit K to simplify th notation)\n    # 1)\n    # {d(denom)/d(x) = 2 y + 2x * <y, y> = 0\n    # {d(denom)/d(y) = 2 x + 2y * <x, x> = 0\n    # 2)\n    # {y + x * <y, y> = 0\n    # {x + y * <x, x> = 0\n    # 3)\n    # {- y/<y, y> = x\n    # {- x/<x, x> = y\n    # 4)\n    # minimum = 1 - 2 <y, y>/<y, y> + <y, y>/<y, y> = 0\n    return num / denom.clamp_min(1e-15)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _mobius_add(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    x2 = x.pow(2).sum(dim=dim, keepdim=True)\n    y2 = y.pow(2).sum(dim=dim, keepdim=True)\n    xy = (x * y).sum(dim=dim, keepdim=True)\n    num = (1 - 2 * k * xy - k * y2) * x + (1 + k * x2) * y\n    denom = 1 - 2 * k * xy + k**2 * x2 * y2\n    # minimize denom (omit K to simplify th notation)\n    # 1)\n    # {d(denom)/d(x) = 2 y + 2x * <y, y> = 0\n    # {d(denom)/d(y) = 2 x + 2y * <x, x> = 0\n    # 2)\n    # {y + x * <y, y> = 0\n    # {x + y * <x, x> = 0\n    # 3)\n    # {- y/<y, y> = x\n    # {- x/<x, x> = y\n    # 4)\n    # minimum = 1 - 2 <y, y>/<y, y> + <y, y>/<y, y> = 0\n    return num / denom.clamp_min(1e-15)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_mobius_add",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "y: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "y",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "x2 = x.pow(2).sum(dim=dim, keepdim=True)\n    y2 = y.pow(2).sum(dim=dim, keepdim=True)\n    xy = (x * y).sum(dim=dim, keepdim=True)\n    num = (1 - 2 * k * xy - k * y2) * x + (1 + k * x2) * y\n    denom = 1 - 2 * k * xy + k**2 * x2 * y2\n    # minimize denom (omit K to simplify th notation)\n    # 1)\n    # {d(denom)/d(x) = 2 y + 2x * <y, y> = 0\n    # {d(denom)/d(y) = 2 x + 2y * <x, x> = 0\n    # 2)\n    # {y + x * <y, y> = 0\n    # {x + y * <x, x> = 0\n    # 3)\n    # {- y/<y, y> = x\n    # {- x/<x, x> = y\n    # 4)\n    # minimum = 1 - 2 <y, y>/<y, y> + <y, y>/<y, y> = 0\n    return num / denom.clamp_min(1e-15)",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "x2 = x.pow(2).sum(dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "x2 = x.pow(2).sum(dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "x2",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "x.pow(2).sum(dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "x.pow(2).sum",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "x.pow(2)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "x.pow",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "pow",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(2)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sum",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(dim=dim, keepdim=True)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "y2 = y.pow(2).sum(dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "y2 = y.pow(2).sum(dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "y2",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "y.pow(2).sum(dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "y.pow(2).sum",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "y.pow(2)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "y.pow",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "y",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "pow",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(2)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sum",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(dim=dim, keepdim=True)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "xy = (x * y).sum(dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "xy = (x * y).sum(dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "xy",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "(x * y).sum(dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "(x * y).sum",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(x * y)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "x * y",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "y",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sum",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(dim=dim, keepdim=True)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "num = (1 - 2 * k * xy - k * y2) * x + (1 + k * x2) * y",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "num = (1 - 2 * k * xy - k * y2) * x + (1 + k * x2) * y",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "num",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "(1 - 2 * k * xy - k * y2) * x + (1 + k * x2) * y",
                          "children": [
                            {
                              "type": "binary_operator",
                              "text": "(1 - 2 * k * xy - k * y2) * x",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(1 - 2 * k * xy - k * y2)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "1 - 2 * k * xy - k * y2",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "1 - 2 * k * xy",
                                          "children": [
                                            {
                                              "type": "integer",
                                              "text": "1",
                                              "children": []
                                            },
                                            {
                                              "type": "-",
                                              "text": "-",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "2 * k * xy",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "text": "2 * k",
                                                  "children": [
                                                    {
                                                      "type": "integer",
                                                      "text": "2",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "xy",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "k * y2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "k",
                                              "children": []
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "y2",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "+",
                              "text": "+",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "(1 + k * x2) * y",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(1 + k * x2)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "1 + k * x2",
                                      "children": [
                                        {
                                          "type": "integer",
                                          "text": "1",
                                          "children": []
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "k * x2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "k",
                                              "children": []
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "x2",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "y",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "denom = 1 - 2 * k * xy + k**2 * x2 * y2",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "denom = 1 - 2 * k * xy + k**2 * x2 * y2",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "denom",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "1 - 2 * k * xy + k**2 * x2 * y2",
                          "children": [
                            {
                              "type": "binary_operator",
                              "text": "1 - 2 * k * xy",
                              "children": [
                                {
                                  "type": "integer",
                                  "text": "1",
                                  "children": []
                                },
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "2 * k * xy",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "2 * k",
                                      "children": [
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "xy",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "+",
                              "text": "+",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "k**2 * x2 * y2",
                              "children": [
                                {
                                  "type": "binary_operator",
                                  "text": "k**2 * x2",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "k**2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": "**",
                                          "text": "**",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "y2",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "comment",
                  "text": "# minimize denom (omit K to simplify th notation)",
                  "children": []
                },
                {
                  "type": "comment",
                  "text": "# 1)",
                  "children": []
                },
                {
                  "type": "comment",
                  "text": "# {d(denom)/d(x) = 2 y + 2x * <y, y> = 0",
                  "children": []
                },
                {
                  "type": "comment",
                  "text": "# {d(denom)/d(y) = 2 x + 2y * <x, x> = 0",
                  "children": []
                },
                {
                  "type": "comment",
                  "text": "# 2)",
                  "children": []
                },
                {
                  "type": "comment",
                  "text": "# {y + x * <y, y> = 0",
                  "children": []
                },
                {
                  "type": "comment",
                  "text": "# {x + y * <x, x> = 0",
                  "children": []
                },
                {
                  "type": "comment",
                  "text": "# 3)",
                  "children": []
                },
                {
                  "type": "comment",
                  "text": "# {- y/<y, y> = x",
                  "children": []
                },
                {
                  "type": "comment",
                  "text": "# {- x/<x, x> = y",
                  "children": []
                },
                {
                  "type": "comment",
                  "text": "# 4)",
                  "children": []
                },
                {
                  "type": "comment",
                  "text": "# minimum = 1 - 2 <y, y>/<y, y> + <y, y>/<y, y> = 0",
                  "children": []
                },
                {
                  "type": "return_statement",
                  "text": "return num / denom.clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "num / denom.clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "num",
                          "children": []
                        },
                        {
                          "type": "/",
                          "text": "/",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "denom.clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "denom.clamp_min",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "denom",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(1e-15)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "1e-15",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def mobius_sub(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the Möbius gyrovector subtraction.\n\n    The Möbius subtraction can be represented via the Möbius addition as\n    follows:\n\n    .. math::\n\n        x \\ominus_\\kappa y = x \\oplus_\\kappa (-y)\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius subtraction\n    \"\"\"\n    return _mobius_sub(x, y, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_sub",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "y: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "y",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the Möbius gyrovector subtraction.\n\n    The Möbius subtraction can be represented via the Möbius addition as\n    follows:\n\n    .. math::\n\n        x \\ominus_\\kappa y = x \\oplus_\\kappa (-y)\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius subtraction\n    \"\"\"\n    return _mobius_sub(x, y, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the Möbius gyrovector subtraction.\n\n    The Möbius subtraction can be represented via the Möbius addition as\n    follows:\n\n    .. math::\n\n        x \\ominus_\\kappa y = x \\oplus_\\kappa (-y)\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius subtraction\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the Möbius gyrovector subtraction.\n\n    The Möbius subtraction can be represented via the Möbius addition as\n    follows:\n\n    .. math::\n\n        x \\ominus_\\kappa y = x \\oplus_\\kappa (-y)\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius subtraction\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _mobius_sub(x, y, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_sub(x, y, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_sub",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, y, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _mobius_sub(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    return _mobius_add(x, -y, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_mobius_sub",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "y: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "y",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "return _mobius_add(x, -y, k, dim=dim)",
          "children": [
            {
              "type": "return_statement",
              "text": "return _mobius_add(x, -y, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_add(x, -y, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_add",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, -y, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "unary_operator",
                          "text": "-y",
                          "children": [
                            {
                              "type": "-",
                              "text": "-",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "y",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def gyration(\n    a: torch.Tensor, b: torch.Tensor, u: torch.Tensor, *, k: torch.Tensor, dim=-1\n):\n    r\"\"\"\n    Compute the gyration of :math:`u` by :math:`[a,b]`.\n\n    The gyration is a special operation of gyrovector spaces. The gyrovector\n    space addition operation :math:`\\oplus_\\kappa` is not associative (as\n    mentioned in :func:`mobius_add`), but it is gyroassociative, which means\n\n    .. math::\n\n        u \\oplus_\\kappa (v \\oplus_\\kappa w)\n        =\n        (u\\oplus_\\kappa v) \\oplus_\\kappa \\operatorname{gyr}[u, v]w,\n\n    where\n\n    .. math::\n\n        \\operatorname{gyr}[u, v]w\n        =\n        \\ominus (u \\oplus_\\kappa v) \\oplus (u \\oplus_\\kappa (v \\oplus_\\kappa w))\n\n    We can simplify this equation using the explicit formula for the Möbius\n    addition [1]. Recall,\n\n    .. math::\n\n        A = - \\kappa^2 \\langle u, w\\rangle \\langle v, v\\rangle\n            - \\kappa \\langle v, w\\rangle\n            + 2 \\kappa^2 \\langle u, v\\rangle \\langle v, w\\rangle\\\\\n        B = - \\kappa^2 \\langle v, w\\rangle \\langle u, u\\rangle\n            + \\kappa \\langle u, w\\rangle\\\\\n        D = 1 - 2 \\kappa \\langle u, v\\rangle\n            + \\kappa^2 \\langle u, u\\rangle \\langle v, v\\rangle\\\\\n\n        \\operatorname{gyr}[u, v]w = w + 2 \\frac{A u + B v}{D}.\n\n    Parameters\n    ----------\n    a : tensor\n        first point on manifold\n    b : tensor\n        second point on manifold\n    u : tensor\n        vector field for operation\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of automorphism\n\n    References\n    ----------\n    [1]  A. A. Ungar (2009), A Gyrovector Space Approach to Hyperbolic Geometry\n    \"\"\"\n    return _gyration(a, b, u, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "gyration",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(\n    a: torch.Tensor, b: torch.Tensor, u: torch.Tensor, *, k: torch.Tensor, dim=-1\n)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "a: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "a",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "b: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "b",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "u: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "u",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the gyration of :math:`u` by :math:`[a,b]`.\n\n    The gyration is a special operation of gyrovector spaces. The gyrovector\n    space addition operation :math:`\\oplus_\\kappa` is not associative (as\n    mentioned in :func:`mobius_add`), but it is gyroassociative, which means\n\n    .. math::\n\n        u \\oplus_\\kappa (v \\oplus_\\kappa w)\n        =\n        (u\\oplus_\\kappa v) \\oplus_\\kappa \\operatorname{gyr}[u, v]w,\n\n    where\n\n    .. math::\n\n        \\operatorname{gyr}[u, v]w\n        =\n        \\ominus (u \\oplus_\\kappa v) \\oplus (u \\oplus_\\kappa (v \\oplus_\\kappa w))\n\n    We can simplify this equation using the explicit formula for the Möbius\n    addition [1]. Recall,\n\n    .. math::\n\n        A = - \\kappa^2 \\langle u, w\\rangle \\langle v, v\\rangle\n            - \\kappa \\langle v, w\\rangle\n            + 2 \\kappa^2 \\langle u, v\\rangle \\langle v, w\\rangle\\\\\n        B = - \\kappa^2 \\langle v, w\\rangle \\langle u, u\\rangle\n            + \\kappa \\langle u, w\\rangle\\\\\n        D = 1 - 2 \\kappa \\langle u, v\\rangle\n            + \\kappa^2 \\langle u, u\\rangle \\langle v, v\\rangle\\\\\n\n        \\operatorname{gyr}[u, v]w = w + 2 \\frac{A u + B v}{D}.\n\n    Parameters\n    ----------\n    a : tensor\n        first point on manifold\n    b : tensor\n        second point on manifold\n    u : tensor\n        vector field for operation\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of automorphism\n\n    References\n    ----------\n    [1]  A. A. Ungar (2009), A Gyrovector Space Approach to Hyperbolic Geometry\n    \"\"\"\n    return _gyration(a, b, u, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the gyration of :math:`u` by :math:`[a,b]`.\n\n    The gyration is a special operation of gyrovector spaces. The gyrovector\n    space addition operation :math:`\\oplus_\\kappa` is not associative (as\n    mentioned in :func:`mobius_add`), but it is gyroassociative, which means\n\n    .. math::\n\n        u \\oplus_\\kappa (v \\oplus_\\kappa w)\n        =\n        (u\\oplus_\\kappa v) \\oplus_\\kappa \\operatorname{gyr}[u, v]w,\n\n    where\n\n    .. math::\n\n        \\operatorname{gyr}[u, v]w\n        =\n        \\ominus (u \\oplus_\\kappa v) \\oplus (u \\oplus_\\kappa (v \\oplus_\\kappa w))\n\n    We can simplify this equation using the explicit formula for the Möbius\n    addition [1]. Recall,\n\n    .. math::\n\n        A = - \\kappa^2 \\langle u, w\\rangle \\langle v, v\\rangle\n            - \\kappa \\langle v, w\\rangle\n            + 2 \\kappa^2 \\langle u, v\\rangle \\langle v, w\\rangle\\\\\n        B = - \\kappa^2 \\langle v, w\\rangle \\langle u, u\\rangle\n            + \\kappa \\langle u, w\\rangle\\\\\n        D = 1 - 2 \\kappa \\langle u, v\\rangle\n            + \\kappa^2 \\langle u, u\\rangle \\langle v, v\\rangle\\\\\n\n        \\operatorname{gyr}[u, v]w = w + 2 \\frac{A u + B v}{D}.\n\n    Parameters\n    ----------\n    a : tensor\n        first point on manifold\n    b : tensor\n        second point on manifold\n    u : tensor\n        vector field for operation\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of automorphism\n\n    References\n    ----------\n    [1]  A. A. Ungar (2009), A Gyrovector Space Approach to Hyperbolic Geometry\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the gyration of :math:`u` by :math:`[a,b]`.\n\n    The gyration is a special operation of gyrovector spaces. The gyrovector\n    space addition operation :math:`\\oplus_\\kappa` is not associative (as\n    mentioned in :func:`mobius_add`), but it is gyroassociative, which means\n\n    .. math::\n\n        u \\oplus_\\kappa (v \\oplus_\\kappa w)\n        =\n        (u\\oplus_\\kappa v) \\oplus_\\kappa \\operatorname{gyr}[u, v]w,\n\n    where\n\n    .. math::\n\n        \\operatorname{gyr}[u, v]w\n        =\n        \\ominus (u \\oplus_\\kappa v) \\oplus (u \\oplus_\\kappa (v \\oplus_\\kappa w))\n\n    We can simplify this equation using the explicit formula for the Möbius\n    addition [1]. Recall,\n\n    .. math::\n\n        A = - \\kappa^2 \\langle u, w\\rangle \\langle v, v\\rangle\n            - \\kappa \\langle v, w\\rangle\n            + 2 \\kappa^2 \\langle u, v\\rangle \\langle v, w\\rangle\\\\\n        B = - \\kappa^2 \\langle v, w\\rangle \\langle u, u\\rangle\n            + \\kappa \\langle u, w\\rangle\\\\\n        D = 1 - 2 \\kappa \\langle u, v\\rangle\n            + \\kappa^2 \\langle u, u\\rangle \\langle v, v\\rangle\\\\\n\n        \\operatorname{gyr}[u, v]w = w + 2 \\frac{A u + B v}{D}.\n\n    Parameters\n    ----------\n    a : tensor\n        first point on manifold\n    b : tensor\n        second point on manifold\n    u : tensor\n        vector field for operation\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of automorphism\n\n    References\n    ----------\n    [1]  A. A. Ungar (2009), A Gyrovector Space Approach to Hyperbolic Geometry\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _gyration(a, b, u, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_gyration(a, b, u, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_gyration",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(a, b, u, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "a",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "b",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "u",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _gyration(\n    u: torch.Tensor, v: torch.Tensor, w: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    # non-simplified\n    # mupv = -_mobius_add(u, v, K)\n    # vpw = _mobius_add(u, w, K)\n    # upvpw = _mobius_add(u, vpw, K)\n    # return _mobius_add(mupv, upvpw, K)\n    # simplified\n    u2 = u.pow(2).sum(dim=dim, keepdim=True)\n    v2 = v.pow(2).sum(dim=dim, keepdim=True)\n    uv = (u * v).sum(dim=dim, keepdim=True)\n    uw = (u * w).sum(dim=dim, keepdim=True)\n    vw = (v * w).sum(dim=dim, keepdim=True)\n    K2 = k**2\n    a = -K2 * uw * v2 - k * vw + 2 * K2 * uv * vw\n    b = -K2 * vw * u2 + k * uw\n    d = 1 - 2 * k * uv + K2 * u2 * v2\n    return w + 2 * (a * u + b * v) / d.clamp_min(1e-15)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _gyration(\n    u: torch.Tensor, v: torch.Tensor, w: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    # non-simplified\n    # mupv = -_mobius_add(u, v, K)\n    # vpw = _mobius_add(u, w, K)\n    # upvpw = _mobius_add(u, vpw, K)\n    # return _mobius_add(mupv, upvpw, K)\n    # simplified\n    u2 = u.pow(2).sum(dim=dim, keepdim=True)\n    v2 = v.pow(2).sum(dim=dim, keepdim=True)\n    uv = (u * v).sum(dim=dim, keepdim=True)\n    uw = (u * w).sum(dim=dim, keepdim=True)\n    vw = (v * w).sum(dim=dim, keepdim=True)\n    K2 = k**2\n    a = -K2 * uw * v2 - k * vw + 2 * K2 * uv * vw\n    b = -K2 * vw * u2 + k * uw\n    d = 1 - 2 * k * uv + K2 * u2 * v2\n    return w + 2 * (a * u + b * v) / d.clamp_min(1e-15)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_gyration",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(\n    u: torch.Tensor, v: torch.Tensor, w: torch.Tensor, k: torch.Tensor, dim: int = -1\n)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "u: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "u",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "v: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "v",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "w: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "w",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "comment",
              "text": "# non-simplified",
              "children": []
            },
            {
              "type": "comment",
              "text": "# mupv = -_mobius_add(u, v, K)",
              "children": []
            },
            {
              "type": "comment",
              "text": "# vpw = _mobius_add(u, w, K)",
              "children": []
            },
            {
              "type": "comment",
              "text": "# upvpw = _mobius_add(u, vpw, K)",
              "children": []
            },
            {
              "type": "comment",
              "text": "# return _mobius_add(mupv, upvpw, K)",
              "children": []
            },
            {
              "type": "comment",
              "text": "# simplified",
              "children": []
            },
            {
              "type": "block",
              "text": "u2 = u.pow(2).sum(dim=dim, keepdim=True)\n    v2 = v.pow(2).sum(dim=dim, keepdim=True)\n    uv = (u * v).sum(dim=dim, keepdim=True)\n    uw = (u * w).sum(dim=dim, keepdim=True)\n    vw = (v * w).sum(dim=dim, keepdim=True)\n    K2 = k**2\n    a = -K2 * uw * v2 - k * vw + 2 * K2 * uv * vw\n    b = -K2 * vw * u2 + k * uw\n    d = 1 - 2 * k * uv + K2 * u2 * v2\n    return w + 2 * (a * u + b * v) / d.clamp_min(1e-15)",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "u2 = u.pow(2).sum(dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "u2 = u.pow(2).sum(dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "u2",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "u.pow(2).sum(dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "u.pow(2).sum",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "u.pow(2)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "u.pow",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "u",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "pow",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(2)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sum",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(dim=dim, keepdim=True)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "v2 = v.pow(2).sum(dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "v2 = v.pow(2).sum(dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "v2",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "v.pow(2).sum(dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "v.pow(2).sum",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "v.pow(2)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "v.pow",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "v",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "pow",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(2)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sum",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(dim=dim, keepdim=True)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "uv = (u * v).sum(dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "uv = (u * v).sum(dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "uv",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "(u * v).sum(dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "(u * v).sum",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(u * v)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "u * v",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "u",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "v",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sum",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(dim=dim, keepdim=True)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "uw = (u * w).sum(dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "uw = (u * w).sum(dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "uw",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "(u * w).sum(dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "(u * w).sum",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(u * w)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "u * w",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "u",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "w",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sum",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(dim=dim, keepdim=True)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "vw = (v * w).sum(dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "vw = (v * w).sum(dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "vw",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "(v * w).sum(dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "(v * w).sum",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(v * w)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "v * w",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "v",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "w",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sum",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(dim=dim, keepdim=True)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "K2 = k**2",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "K2 = k**2",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "K2",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "k**2",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "k",
                              "children": []
                            },
                            {
                              "type": "**",
                              "text": "**",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "2",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "a = -K2 * uw * v2 - k * vw + 2 * K2 * uv * vw",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "a = -K2 * uw * v2 - k * vw + 2 * K2 * uv * vw",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "a",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "-K2 * uw * v2 - k * vw + 2 * K2 * uv * vw",
                          "children": [
                            {
                              "type": "binary_operator",
                              "text": "-K2 * uw * v2 - k * vw",
                              "children": [
                                {
                                  "type": "binary_operator",
                                  "text": "-K2 * uw * v2",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "-K2 * uw",
                                      "children": [
                                        {
                                          "type": "unary_operator",
                                          "text": "-K2",
                                          "children": [
                                            {
                                              "type": "-",
                                              "text": "-",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "K2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "uw",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "v2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "k * vw",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "vw",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "+",
                              "text": "+",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "2 * K2 * uv * vw",
                              "children": [
                                {
                                  "type": "binary_operator",
                                  "text": "2 * K2 * uv",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "2 * K2",
                                      "children": [
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "K2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "uv",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "vw",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "b = -K2 * vw * u2 + k * uw",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "b = -K2 * vw * u2 + k * uw",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "b",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "-K2 * vw * u2 + k * uw",
                          "children": [
                            {
                              "type": "binary_operator",
                              "text": "-K2 * vw * u2",
                              "children": [
                                {
                                  "type": "binary_operator",
                                  "text": "-K2 * vw",
                                  "children": [
                                    {
                                      "type": "unary_operator",
                                      "text": "-K2",
                                      "children": [
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "K2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "vw",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "u2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "+",
                              "text": "+",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "k * uw",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "uw",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "d = 1 - 2 * k * uv + K2 * u2 * v2",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "d = 1 - 2 * k * uv + K2 * u2 * v2",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "d",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "1 - 2 * k * uv + K2 * u2 * v2",
                          "children": [
                            {
                              "type": "binary_operator",
                              "text": "1 - 2 * k * uv",
                              "children": [
                                {
                                  "type": "integer",
                                  "text": "1",
                                  "children": []
                                },
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "2 * k * uv",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "2 * k",
                                      "children": [
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "uv",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "+",
                              "text": "+",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "K2 * u2 * v2",
                              "children": [
                                {
                                  "type": "binary_operator",
                                  "text": "K2 * u2",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "K2",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "u2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "v2",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return w + 2 * (a * u + b * v) / d.clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "w + 2 * (a * u + b * v) / d.clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "w",
                          "children": []
                        },
                        {
                          "type": "+",
                          "text": "+",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "2 * (a * u + b * v) / d.clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "binary_operator",
                              "text": "2 * (a * u + b * v)",
                              "children": [
                                {
                                  "type": "integer",
                                  "text": "2",
                                  "children": []
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(a * u + b * v)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "a * u + b * v",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "a * u",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "a",
                                              "children": []
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "u",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "b * v",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "b",
                                              "children": []
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "v",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "/",
                              "text": "/",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "d.clamp_min(1e-15)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "d.clamp_min",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "d",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "clamp_min",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(1e-15)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "float",
                                      "text": "1e-15",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def mobius_coadd(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the Möbius gyrovector coaddition.\n\n    The addition operation :math:`\\oplus_\\kappa` is neither associative, nor\n    commutative. In contrast, the coaddition :math:`\\boxplus_\\kappa` (or\n    cooperation) is an associative operation that is defined as follows.\n\n    .. math::\n\n        a \\boxplus_\\kappa b\n        =\n        b \\boxplus_\\kappa a\n        =\n        a\\operatorname{gyr}[a, -b]b\\\\\n        = \\frac{\n            (1 + \\kappa \\|y\\|^2_2) x + (1 + \\kappa \\|x\\|_2^2) y\n            }{\n            1 + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        },\n\n    where :math:`\\operatorname{gyr}[a, b]v = \\ominus_\\kappa (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa v))`\n\n    The following right cancellation property holds\n\n    .. math::\n\n        (a \\boxplus_\\kappa b) \\ominus_\\kappa b = a\\\\\n        (a \\oplus_\\kappa b) \\boxminus_\\kappa b = a\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius coaddition\n\n    \"\"\"\n    return _mobius_coadd(x, y, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_coadd",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "y: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "y",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the Möbius gyrovector coaddition.\n\n    The addition operation :math:`\\oplus_\\kappa` is neither associative, nor\n    commutative. In contrast, the coaddition :math:`\\boxplus_\\kappa` (or\n    cooperation) is an associative operation that is defined as follows.\n\n    .. math::\n\n        a \\boxplus_\\kappa b\n        =\n        b \\boxplus_\\kappa a\n        =\n        a\\operatorname{gyr}[a, -b]b\\\\\n        = \\frac{\n            (1 + \\kappa \\|y\\|^2_2) x + (1 + \\kappa \\|x\\|_2^2) y\n            }{\n            1 + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        },\n\n    where :math:`\\operatorname{gyr}[a, b]v = \\ominus_\\kappa (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa v))`\n\n    The following right cancellation property holds\n\n    .. math::\n\n        (a \\boxplus_\\kappa b) \\ominus_\\kappa b = a\\\\\n        (a \\oplus_\\kappa b) \\boxminus_\\kappa b = a\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius coaddition\n\n    \"\"\"\n    return _mobius_coadd(x, y, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the Möbius gyrovector coaddition.\n\n    The addition operation :math:`\\oplus_\\kappa` is neither associative, nor\n    commutative. In contrast, the coaddition :math:`\\boxplus_\\kappa` (or\n    cooperation) is an associative operation that is defined as follows.\n\n    .. math::\n\n        a \\boxplus_\\kappa b\n        =\n        b \\boxplus_\\kappa a\n        =\n        a\\operatorname{gyr}[a, -b]b\\\\\n        = \\frac{\n            (1 + \\kappa \\|y\\|^2_2) x + (1 + \\kappa \\|x\\|_2^2) y\n            }{\n            1 + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        },\n\n    where :math:`\\operatorname{gyr}[a, b]v = \\ominus_\\kappa (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa v))`\n\n    The following right cancellation property holds\n\n    .. math::\n\n        (a \\boxplus_\\kappa b) \\ominus_\\kappa b = a\\\\\n        (a \\oplus_\\kappa b) \\boxminus_\\kappa b = a\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius coaddition\n\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the Möbius gyrovector coaddition.\n\n    The addition operation :math:`\\oplus_\\kappa` is neither associative, nor\n    commutative. In contrast, the coaddition :math:`\\boxplus_\\kappa` (or\n    cooperation) is an associative operation that is defined as follows.\n\n    .. math::\n\n        a \\boxplus_\\kappa b\n        =\n        b \\boxplus_\\kappa a\n        =\n        a\\operatorname{gyr}[a, -b]b\\\\\n        = \\frac{\n            (1 + \\kappa \\|y\\|^2_2) x + (1 + \\kappa \\|x\\|_2^2) y\n            }{\n            1 + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        },\n\n    where :math:`\\operatorname{gyr}[a, b]v = \\ominus_\\kappa (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa v))`\n\n    The following right cancellation property holds\n\n    .. math::\n\n        (a \\boxplus_\\kappa b) \\ominus_\\kappa b = a\\\\\n        (a \\oplus_\\kappa b) \\boxminus_\\kappa b = a\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius coaddition\n\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _mobius_coadd(x, y, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_coadd(x, y, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_coadd",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, y, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "comment",
      "text": "# TODO: check numerical stability with Gregor's paper!!!",
      "children": []
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _mobius_coadd(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    # x2 = x.pow(2).sum(dim=dim, keepdim=True)\n    # y2 = y.pow(2).sum(dim=dim, keepdim=True)\n    # num = (1 + K * y2) * x + (1 + K * x2) * y\n    # denom = 1 - K ** 2 * x2 * y2\n    # avoid division by zero in this way\n    # return num / denom.clamp_min(1e-15)\n    #\n    return _mobius_add(x, _gyration(x, -y, y, k=k, dim=dim), k, dim=dim)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _mobius_coadd(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    # x2 = x.pow(2).sum(dim=dim, keepdim=True)\n    # y2 = y.pow(2).sum(dim=dim, keepdim=True)\n    # num = (1 + K * y2) * x + (1 + K * x2) * y\n    # denom = 1 - K ** 2 * x2 * y2\n    # avoid division by zero in this way\n    # return num / denom.clamp_min(1e-15)\n    #\n    return _mobius_add(x, _gyration(x, -y, y, k=k, dim=dim), k, dim=dim)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_mobius_coadd",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "y: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "y",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "comment",
              "text": "# x2 = x.pow(2).sum(dim=dim, keepdim=True)",
              "children": []
            },
            {
              "type": "comment",
              "text": "# y2 = y.pow(2).sum(dim=dim, keepdim=True)",
              "children": []
            },
            {
              "type": "comment",
              "text": "# num = (1 + K * y2) * x + (1 + K * x2) * y",
              "children": []
            },
            {
              "type": "comment",
              "text": "# denom = 1 - K ** 2 * x2 * y2",
              "children": []
            },
            {
              "type": "comment",
              "text": "# avoid division by zero in this way",
              "children": []
            },
            {
              "type": "comment",
              "text": "# return num / denom.clamp_min(1e-15)",
              "children": []
            },
            {
              "type": "comment",
              "text": "#",
              "children": []
            },
            {
              "type": "block",
              "text": "return _mobius_add(x, _gyration(x, -y, y, k=k, dim=dim), k, dim=dim)",
              "children": [
                {
                  "type": "return_statement",
                  "text": "return _mobius_add(x, _gyration(x, -y, y, k=k, dim=dim), k, dim=dim)",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_mobius_add(x, _gyration(x, -y, y, k=k, dim=dim), k, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_mobius_add",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(x, _gyration(x, -y, y, k=k, dim=dim), k, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "_gyration(x, -y, y, k=k, dim=dim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "_gyration",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(x, -y, y, k=k, dim=dim)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "unary_operator",
                                      "text": "-y",
                                      "children": [
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "y",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "y",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "k=k",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "k",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def mobius_cosub(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the Möbius gyrovector cosubtraction.\n\n    The Möbius cosubtraction is defined as follows:\n\n    .. math::\n\n        a \\boxminus_\\kappa b = a \\boxplus_\\kappa -b\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius cosubtraction\n\n    \"\"\"\n    return _mobius_cosub(x, y, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_cosub",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "y: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "y",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the Möbius gyrovector cosubtraction.\n\n    The Möbius cosubtraction is defined as follows:\n\n    .. math::\n\n        a \\boxminus_\\kappa b = a \\boxplus_\\kappa -b\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius cosubtraction\n\n    \"\"\"\n    return _mobius_cosub(x, y, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the Möbius gyrovector cosubtraction.\n\n    The Möbius cosubtraction is defined as follows:\n\n    .. math::\n\n        a \\boxminus_\\kappa b = a \\boxplus_\\kappa -b\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius cosubtraction\n\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the Möbius gyrovector cosubtraction.\n\n    The Möbius cosubtraction is defined as follows:\n\n    .. math::\n\n        a \\boxminus_\\kappa b = a \\boxplus_\\kappa -b\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius cosubtraction\n\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _mobius_cosub(x, y, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_cosub(x, y, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_cosub",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, y, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _mobius_cosub(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    return _mobius_coadd(x, -y, k, dim=dim)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _mobius_cosub(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    return _mobius_coadd(x, -y, k, dim=dim)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_mobius_cosub",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "y: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "y",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "return _mobius_coadd(x, -y, k, dim=dim)",
              "children": [
                {
                  "type": "return_statement",
                  "text": "return _mobius_coadd(x, -y, k, dim=dim)",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_mobius_coadd(x, -y, k, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_mobius_coadd",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(x, -y, k, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "unary_operator",
                              "text": "-y",
                              "children": [
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "y",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "k",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "comment",
      "text": "# TODO: can we make this operation somehow safer by breaking up the",
      "children": []
    },
    {
      "type": "comment",
      "text": "# TODO: scalar multiplication for K>0 when the argument to the",
      "children": []
    },
    {
      "type": "comment",
      "text": "# TODO: tan function gets close to pi/2+k*pi for k in Z?",
      "children": []
    },
    {
      "type": "comment",
      "text": "# TODO: one could use the scalar associative law",
      "children": []
    },
    {
      "type": "comment",
      "text": "# TODO: s_1 (X) s_2 (X) x = (s_1*s_2) (X) x",
      "children": []
    },
    {
      "type": "comment",
      "text": "# TODO: to implement a more stable Möbius scalar mult",
      "children": []
    },
    {
      "type": "function_definition",
      "text": "def mobius_scalar_mul(r: torch.Tensor, x: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the Möbius scalar multiplication.\n\n    .. math::\n\n        r \\otimes_\\kappa x\n        =\n        \\tan_\\kappa(r\\tan_\\kappa^{-1}(\\|x\\|_2))\\frac{x}{\\|x\\|_2}\n\n    This operation has properties similar to the Euclidean scalar multiplication\n\n    * `n-addition` property\n\n    .. math::\n\n         r \\otimes_\\kappa x = x \\oplus_\\kappa \\dots \\oplus_\\kappa x\n\n    * Distributive property\n\n    .. math::\n\n         (r_1 + r_2) \\otimes_\\kappa x\n         =\n         r_1 \\otimes_\\kappa x \\oplus r_2 \\otimes_\\kappa x\n\n    * Scalar associativity\n\n    .. math::\n\n         (r_1 r_2) \\otimes_\\kappa x = r_1 \\otimes_\\kappa (r_2 \\otimes_\\kappa x)\n\n    * Monodistributivity\n\n    .. math::\n\n         r \\otimes_\\kappa (r_1 \\otimes x \\oplus r_2 \\otimes x) =\n         r \\otimes_\\kappa (r_1 \\otimes x) \\oplus r \\otimes (r_2 \\otimes x)\n\n    * Scaling property\n\n    .. math::\n\n        |r| \\otimes_\\kappa x / \\|r \\otimes_\\kappa x\\|_2 = x/\\|x\\|_2\n\n    Parameters\n    ----------\n    r : tensor\n        scalar for multiplication\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius scalar multiplication\n    \"\"\"\n    return _mobius_scalar_mul(r, x, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_scalar_mul",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(r: torch.Tensor, x: torch.Tensor, *, k: torch.Tensor, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "r: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "r",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the Möbius scalar multiplication.\n\n    .. math::\n\n        r \\otimes_\\kappa x\n        =\n        \\tan_\\kappa(r\\tan_\\kappa^{-1}(\\|x\\|_2))\\frac{x}{\\|x\\|_2}\n\n    This operation has properties similar to the Euclidean scalar multiplication\n\n    * `n-addition` property\n\n    .. math::\n\n         r \\otimes_\\kappa x = x \\oplus_\\kappa \\dots \\oplus_\\kappa x\n\n    * Distributive property\n\n    .. math::\n\n         (r_1 + r_2) \\otimes_\\kappa x\n         =\n         r_1 \\otimes_\\kappa x \\oplus r_2 \\otimes_\\kappa x\n\n    * Scalar associativity\n\n    .. math::\n\n         (r_1 r_2) \\otimes_\\kappa x = r_1 \\otimes_\\kappa (r_2 \\otimes_\\kappa x)\n\n    * Monodistributivity\n\n    .. math::\n\n         r \\otimes_\\kappa (r_1 \\otimes x \\oplus r_2 \\otimes x) =\n         r \\otimes_\\kappa (r_1 \\otimes x) \\oplus r \\otimes (r_2 \\otimes x)\n\n    * Scaling property\n\n    .. math::\n\n        |r| \\otimes_\\kappa x / \\|r \\otimes_\\kappa x\\|_2 = x/\\|x\\|_2\n\n    Parameters\n    ----------\n    r : tensor\n        scalar for multiplication\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius scalar multiplication\n    \"\"\"\n    return _mobius_scalar_mul(r, x, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the Möbius scalar multiplication.\n\n    .. math::\n\n        r \\otimes_\\kappa x\n        =\n        \\tan_\\kappa(r\\tan_\\kappa^{-1}(\\|x\\|_2))\\frac{x}{\\|x\\|_2}\n\n    This operation has properties similar to the Euclidean scalar multiplication\n\n    * `n-addition` property\n\n    .. math::\n\n         r \\otimes_\\kappa x = x \\oplus_\\kappa \\dots \\oplus_\\kappa x\n\n    * Distributive property\n\n    .. math::\n\n         (r_1 + r_2) \\otimes_\\kappa x\n         =\n         r_1 \\otimes_\\kappa x \\oplus r_2 \\otimes_\\kappa x\n\n    * Scalar associativity\n\n    .. math::\n\n         (r_1 r_2) \\otimes_\\kappa x = r_1 \\otimes_\\kappa (r_2 \\otimes_\\kappa x)\n\n    * Monodistributivity\n\n    .. math::\n\n         r \\otimes_\\kappa (r_1 \\otimes x \\oplus r_2 \\otimes x) =\n         r \\otimes_\\kappa (r_1 \\otimes x) \\oplus r \\otimes (r_2 \\otimes x)\n\n    * Scaling property\n\n    .. math::\n\n        |r| \\otimes_\\kappa x / \\|r \\otimes_\\kappa x\\|_2 = x/\\|x\\|_2\n\n    Parameters\n    ----------\n    r : tensor\n        scalar for multiplication\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius scalar multiplication\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the Möbius scalar multiplication.\n\n    .. math::\n\n        r \\otimes_\\kappa x\n        =\n        \\tan_\\kappa(r\\tan_\\kappa^{-1}(\\|x\\|_2))\\frac{x}{\\|x\\|_2}\n\n    This operation has properties similar to the Euclidean scalar multiplication\n\n    * `n-addition` property\n\n    .. math::\n\n         r \\otimes_\\kappa x = x \\oplus_\\kappa \\dots \\oplus_\\kappa x\n\n    * Distributive property\n\n    .. math::\n\n         (r_1 + r_2) \\otimes_\\kappa x\n         =\n         r_1 \\otimes_\\kappa x \\oplus r_2 \\otimes_\\kappa x\n\n    * Scalar associativity\n\n    .. math::\n\n         (r_1 r_2) \\otimes_\\kappa x = r_1 \\otimes_\\kappa (r_2 \\otimes_\\kappa x)\n\n    * Monodistributivity\n\n    .. math::\n\n         r \\otimes_\\kappa (r_1 \\otimes x \\oplus r_2 \\otimes x) =\n         r \\otimes_\\kappa (r_1 \\otimes x) \\oplus r \\otimes (r_2 \\otimes x)\n\n    * Scaling property\n\n    .. math::\n\n        |r| \\otimes_\\kappa x / \\|r \\otimes_\\kappa x\\|_2 = x/\\|x\\|_2\n\n    Parameters\n    ----------\n    r : tensor\n        scalar for multiplication\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius scalar multiplication\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _mobius_scalar_mul(r, x, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_scalar_mul(r, x, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_scalar_mul",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(r, x, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "r",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _mobius_scalar_mul(\n    r: torch.Tensor, x: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    res_c = tan_k(r * artan_k(x_norm, k), k) * (x / x_norm)\n    return res_c",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _mobius_scalar_mul(\n    r: torch.Tensor, x: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    res_c = tan_k(r * artan_k(x_norm, k), k) * (x / x_norm)\n    return res_c",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_mobius_scalar_mul",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(\n    r: torch.Tensor, x: torch.Tensor, k: torch.Tensor, dim: int = -1\n)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "r: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "r",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    res_c = tan_k(r * artan_k(x_norm, k), k) * (x / x_norm)\n    return res_c",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "x_norm",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "x.norm(dim=dim, keepdim=True, p=2).clamp_min",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "x.norm(dim=dim, keepdim=True, p=2)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "x.norm",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(dim=dim, keepdim=True, p=2)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "keepdim=True",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "true",
                                              "text": "True",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "p=2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "p",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(1e-15)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "1e-15",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "res_c = tan_k(r * artan_k(x_norm, k), k) * (x / x_norm)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "res_c = tan_k(r * artan_k(x_norm, k), k) * (x / x_norm)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "res_c",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "tan_k(r * artan_k(x_norm, k), k) * (x / x_norm)",
                          "children": [
                            {
                              "type": "call",
                              "text": "tan_k(r * artan_k(x_norm, k), k)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "tan_k",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(r * artan_k(x_norm, k), k)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "r * artan_k(x_norm, k)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "r",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "artan_k(x_norm, k)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "artan_k",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(x_norm, k)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "x_norm",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "parenthesized_expression",
                              "text": "(x / x_norm)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "x / x_norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": "/",
                                      "text": "/",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x_norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return res_c",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "res_c",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def dist(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, keepdim=False, dim=-1):\n    r\"\"\"\n    Compute the geodesic distance between :math:`x` and :math:`y` on the manifold.\n\n    .. math::\n\n        d_\\kappa(x, y) = 2\\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n\n    .. plot:: plots/extended/stereographic/distance.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`y`\n    \"\"\"\n    return _dist(x, y, k, keepdim=keepdim, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "dist",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, keepdim=False, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "y: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "y",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "keepdim=False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the geodesic distance between :math:`x` and :math:`y` on the manifold.\n\n    .. math::\n\n        d_\\kappa(x, y) = 2\\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n\n    .. plot:: plots/extended/stereographic/distance.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`y`\n    \"\"\"\n    return _dist(x, y, k, keepdim=keepdim, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the geodesic distance between :math:`x` and :math:`y` on the manifold.\n\n    .. math::\n\n        d_\\kappa(x, y) = 2\\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n\n    .. plot:: plots/extended/stereographic/distance.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`y`\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the geodesic distance between :math:`x` and :math:`y` on the manifold.\n\n    .. math::\n\n        d_\\kappa(x, y) = 2\\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n\n    .. plot:: plots/extended/stereographic/distance.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`y`\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _dist(x, y, k, keepdim=keepdim, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_dist(x, y, k, keepdim=keepdim, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_dist",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, y, k, keepdim=keepdim, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "keepdim=keepdim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _dist(\n    x: torch.Tensor,\n    y: torch.Tensor,\n    k: torch.Tensor,\n    keepdim: bool = False,\n    dim: int = -1,\n):\n    return 2.0 * artan_k(\n        _mobius_add(-x, y, k, dim=dim).norm(dim=dim, p=2, keepdim=keepdim), k\n    )",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _dist(\n    x: torch.Tensor,\n    y: torch.Tensor,\n    k: torch.Tensor,\n    keepdim: bool = False,\n    dim: int = -1,\n):\n    return 2.0 * artan_k(\n        _mobius_add(-x, y, k, dim=dim).norm(dim=dim, p=2, keepdim=keepdim), k\n    )",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_dist",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(\n    x: torch.Tensor,\n    y: torch.Tensor,\n    k: torch.Tensor,\n    keepdim: bool = False,\n    dim: int = -1,\n)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "y: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "y",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "keepdim: bool = False",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "keepdim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "bool",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "bool",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "false",
                      "text": "False",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "return 2.0 * artan_k(\n        _mobius_add(-x, y, k, dim=dim).norm(dim=dim, p=2, keepdim=keepdim), k\n    )",
              "children": [
                {
                  "type": "return_statement",
                  "text": "return 2.0 * artan_k(\n        _mobius_add(-x, y, k, dim=dim).norm(dim=dim, p=2, keepdim=keepdim), k\n    )",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "2.0 * artan_k(\n        _mobius_add(-x, y, k, dim=dim).norm(dim=dim, p=2, keepdim=keepdim), k\n    )",
                      "children": [
                        {
                          "type": "float",
                          "text": "2.0",
                          "children": []
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "artan_k(\n        _mobius_add(-x, y, k, dim=dim).norm(dim=dim, p=2, keepdim=keepdim), k\n    )",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "artan_k",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(\n        _mobius_add(-x, y, k, dim=dim).norm(dim=dim, p=2, keepdim=keepdim), k\n    )",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "_mobius_add(-x, y, k, dim=dim).norm(dim=dim, p=2, keepdim=keepdim)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "_mobius_add(-x, y, k, dim=dim).norm",
                                      "children": [
                                        {
                                          "type": "call",
                                          "text": "_mobius_add(-x, y, k, dim=dim)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "_mobius_add",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(-x, y, k, dim=dim)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "unary_operator",
                                                  "text": "-x",
                                                  "children": [
                                                    {
                                                      "type": "-",
                                                      "text": "-",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "x",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "y",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "keyword_argument",
                                                  "text": "dim=dim",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "dim",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "dim",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(dim=dim, p=2, keepdim=keepdim)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "p=2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "p",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "keepdim=keepdim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def dist0(x: torch.Tensor, *, k: torch.Tensor, keepdim=False, dim=-1):\n    r\"\"\"\n    Compute geodesic distance to the manifold's origin.\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`0`\n    \"\"\"\n    return _dist0(x, k, keepdim=keepdim, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "dist0",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x: torch.Tensor, *, k: torch.Tensor, keepdim=False, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "keepdim=False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute geodesic distance to the manifold's origin.\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`0`\n    \"\"\"\n    return _dist0(x, k, keepdim=keepdim, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute geodesic distance to the manifold's origin.\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`0`\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute geodesic distance to the manifold's origin.\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`0`\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _dist0(x, k, keepdim=keepdim, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_dist0(x, k, keepdim=keepdim, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_dist0",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, k, keepdim=keepdim, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "keepdim=keepdim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _dist0(x: torch.Tensor, k: torch.Tensor, keepdim: bool = False, dim: int = -1):\n    return 2.0 * artan_k(x.norm(dim=dim, p=2, keepdim=keepdim), k)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _dist0(x: torch.Tensor, k: torch.Tensor, keepdim: bool = False, dim: int = -1):\n    return 2.0 * artan_k(x.norm(dim=dim, p=2, keepdim=keepdim), k)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_dist0",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, k: torch.Tensor, keepdim: bool = False, dim: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "keepdim: bool = False",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "keepdim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "bool",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "bool",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "false",
                      "text": "False",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "return 2.0 * artan_k(x.norm(dim=dim, p=2, keepdim=keepdim), k)",
              "children": [
                {
                  "type": "return_statement",
                  "text": "return 2.0 * artan_k(x.norm(dim=dim, p=2, keepdim=keepdim), k)",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "2.0 * artan_k(x.norm(dim=dim, p=2, keepdim=keepdim), k)",
                      "children": [
                        {
                          "type": "float",
                          "text": "2.0",
                          "children": []
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "artan_k(x.norm(dim=dim, p=2, keepdim=keepdim), k)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "artan_k",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(x.norm(dim=dim, p=2, keepdim=keepdim), k)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "x.norm(dim=dim, p=2, keepdim=keepdim)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "x.norm",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(dim=dim, p=2, keepdim=keepdim)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "p=2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "p",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "keepdim=keepdim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def geodesic(\n    t: torch.Tensor, x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1\n):\n    r\"\"\"\n    Compute the point on the path connecting :math:`x` and :math:`y` at time :math:`x`.\n\n    The path can also be treated as an extension of the line segment to an\n    unbounded geodesic that goes through :math:`x` and :math:`y`. The equation\n    of the geodesic is given as:\n\n    .. math::\n\n        \\gamma_{x\\to y}(t)\n        =\n        x \\oplus_\\kappa t \\otimes_\\kappa ((-x) \\oplus_\\kappa y)\n\n    The properties of the geodesic are the following:\n\n    .. math::\n\n        \\gamma_{x\\to y}(0) = x\\\\\n        \\gamma_{x\\to y}(1) = y\\\\\n        \\dot\\gamma_{x\\to y}(t) = v\n\n    Furthermore, the geodesic also satisfies the property of local distance\n    minimization:\n\n    .. math::\n\n         d_\\kappa(\\gamma_{x\\to y}(t_1), \\gamma_{x\\to y}(t_2)) = v|t_1-t_2|\n\n    \"Natural parametrization\" of the curve ensures unit speed geodesics which\n    yields the above formula with :math:`v=1`.\n\n    However, we can always compute the constant speed :math:`v` from the points\n    that the particular path connects:\n\n    .. math::\n\n        v = d_\\kappa(\\gamma_{x\\to y}(0), \\gamma_{x\\to y}(1)) = d_\\kappa(x, y)\n\n\n    Parameters\n    ----------\n    t : tensor\n        travelling time\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        point on the geodesic going through x and y\n    \"\"\"\n    return _geodesic(t, x, y, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "geodesic",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(\n    t: torch.Tensor, x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1\n)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "t: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "t",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "y: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "y",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the point on the path connecting :math:`x` and :math:`y` at time :math:`x`.\n\n    The path can also be treated as an extension of the line segment to an\n    unbounded geodesic that goes through :math:`x` and :math:`y`. The equation\n    of the geodesic is given as:\n\n    .. math::\n\n        \\gamma_{x\\to y}(t)\n        =\n        x \\oplus_\\kappa t \\otimes_\\kappa ((-x) \\oplus_\\kappa y)\n\n    The properties of the geodesic are the following:\n\n    .. math::\n\n        \\gamma_{x\\to y}(0) = x\\\\\n        \\gamma_{x\\to y}(1) = y\\\\\n        \\dot\\gamma_{x\\to y}(t) = v\n\n    Furthermore, the geodesic also satisfies the property of local distance\n    minimization:\n\n    .. math::\n\n         d_\\kappa(\\gamma_{x\\to y}(t_1), \\gamma_{x\\to y}(t_2)) = v|t_1-t_2|\n\n    \"Natural parametrization\" of the curve ensures unit speed geodesics which\n    yields the above formula with :math:`v=1`.\n\n    However, we can always compute the constant speed :math:`v` from the points\n    that the particular path connects:\n\n    .. math::\n\n        v = d_\\kappa(\\gamma_{x\\to y}(0), \\gamma_{x\\to y}(1)) = d_\\kappa(x, y)\n\n\n    Parameters\n    ----------\n    t : tensor\n        travelling time\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        point on the geodesic going through x and y\n    \"\"\"\n    return _geodesic(t, x, y, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the point on the path connecting :math:`x` and :math:`y` at time :math:`x`.\n\n    The path can also be treated as an extension of the line segment to an\n    unbounded geodesic that goes through :math:`x` and :math:`y`. The equation\n    of the geodesic is given as:\n\n    .. math::\n\n        \\gamma_{x\\to y}(t)\n        =\n        x \\oplus_\\kappa t \\otimes_\\kappa ((-x) \\oplus_\\kappa y)\n\n    The properties of the geodesic are the following:\n\n    .. math::\n\n        \\gamma_{x\\to y}(0) = x\\\\\n        \\gamma_{x\\to y}(1) = y\\\\\n        \\dot\\gamma_{x\\to y}(t) = v\n\n    Furthermore, the geodesic also satisfies the property of local distance\n    minimization:\n\n    .. math::\n\n         d_\\kappa(\\gamma_{x\\to y}(t_1), \\gamma_{x\\to y}(t_2)) = v|t_1-t_2|\n\n    \"Natural parametrization\" of the curve ensures unit speed geodesics which\n    yields the above formula with :math:`v=1`.\n\n    However, we can always compute the constant speed :math:`v` from the points\n    that the particular path connects:\n\n    .. math::\n\n        v = d_\\kappa(\\gamma_{x\\to y}(0), \\gamma_{x\\to y}(1)) = d_\\kappa(x, y)\n\n\n    Parameters\n    ----------\n    t : tensor\n        travelling time\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        point on the geodesic going through x and y\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the point on the path connecting :math:`x` and :math:`y` at time :math:`x`.\n\n    The path can also be treated as an extension of the line segment to an\n    unbounded geodesic that goes through :math:`x` and :math:`y`. The equation\n    of the geodesic is given as:\n\n    .. math::\n\n        \\gamma_{x\\to y}(t)\n        =\n        x \\oplus_\\kappa t \\otimes_\\kappa ((-x) \\oplus_\\kappa y)\n\n    The properties of the geodesic are the following:\n\n    .. math::\n\n        \\gamma_{x\\to y}(0) = x\\\\\n        \\gamma_{x\\to y}(1) = y\\\\\n        \\dot\\gamma_{x\\to y}(t) = v\n\n    Furthermore, the geodesic also satisfies the property of local distance\n    minimization:\n\n    .. math::\n\n         d_\\kappa(\\gamma_{x\\to y}(t_1), \\gamma_{x\\to y}(t_2)) = v|t_1-t_2|\n\n    \"Natural parametrization\" of the curve ensures unit speed geodesics which\n    yields the above formula with :math:`v=1`.\n\n    However, we can always compute the constant speed :math:`v` from the points\n    that the particular path connects:\n\n    .. math::\n\n        v = d_\\kappa(\\gamma_{x\\to y}(0), \\gamma_{x\\to y}(1)) = d_\\kappa(x, y)\n\n\n    Parameters\n    ----------\n    t : tensor\n        travelling time\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        point on the geodesic going through x and y\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _geodesic(t, x, y, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_geodesic(t, x, y, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_geodesic",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(t, x, y, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "t",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _geodesic(\n    t: torch.Tensor, x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    # this is not very numerically stable\n    v = _mobius_add(-x, y, k, dim=dim)\n    tv = _mobius_scalar_mul(t, v, k, dim=dim)\n    gamma_t = _mobius_add(x, tv, k, dim=dim)\n    return gamma_t",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _geodesic(\n    t: torch.Tensor, x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    # this is not very numerically stable\n    v = _mobius_add(-x, y, k, dim=dim)\n    tv = _mobius_scalar_mul(t, v, k, dim=dim)\n    gamma_t = _mobius_add(x, tv, k, dim=dim)\n    return gamma_t",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_geodesic",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(\n    t: torch.Tensor, x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1\n)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "t: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "t",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "y: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "y",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "comment",
              "text": "# this is not very numerically stable",
              "children": []
            },
            {
              "type": "block",
              "text": "v = _mobius_add(-x, y, k, dim=dim)\n    tv = _mobius_scalar_mul(t, v, k, dim=dim)\n    gamma_t = _mobius_add(x, tv, k, dim=dim)\n    return gamma_t",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "v = _mobius_add(-x, y, k, dim=dim)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "v = _mobius_add(-x, y, k, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "v",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "_mobius_add(-x, y, k, dim=dim)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_mobius_add",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(-x, y, k, dim=dim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "unary_operator",
                                  "text": "-x",
                                  "children": [
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "y",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "tv = _mobius_scalar_mul(t, v, k, dim=dim)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "tv = _mobius_scalar_mul(t, v, k, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "tv",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "_mobius_scalar_mul(t, v, k, dim=dim)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_mobius_scalar_mul",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(t, v, k, dim=dim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "t",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "v",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "gamma_t = _mobius_add(x, tv, k, dim=dim)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "gamma_t = _mobius_add(x, tv, k, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "gamma_t",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "_mobius_add(x, tv, k, dim=dim)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_mobius_add",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(x, tv, k, dim=dim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "tv",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return gamma_t",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "gamma_t",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def expmap(x: torch.Tensor, u: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the exponential map of :math:`u` at :math:`x`.\n\n    The expmap is tightly related with :func:`geodesic`. Intuitively, the\n    expmap represents a smooth travel along a geodesic from the starting point\n    :math:`x`, into the initial direction :math:`u` at speed :math:`\\|u\\|_x` for\n    the duration of one time unit. In formulas one can express this as the\n    travel along the curve :math:`\\gamma_{x, u}(t)` such that\n\n    .. math::\n\n        \\gamma_{x, u}(0) = x\\\\\n        \\dot\\gamma_{x, u}(0) = u\\\\\n        \\|\\dot\\gamma_{x, u}(t)\\|_{\\gamma_{x, u}(t)} = \\|u\\|_x\n\n    The existence of this curve relies on uniqueness of the differential\n    equation solution, that is local. For the universal manifold the solution\n    is well defined globally and we have.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_x(u) = \\gamma_{x, u}(1) = \\\\\n        x\\oplus_\\kappa \\tan_\\kappa(\\|u\\|_x/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    u : tensor\n        speed vector in tangent space at x\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{x, u}(1)` end point\n    \"\"\"\n    return _expmap(x, u, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "expmap",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x: torch.Tensor, u: torch.Tensor, *, k: torch.Tensor, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "u: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "u",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the exponential map of :math:`u` at :math:`x`.\n\n    The expmap is tightly related with :func:`geodesic`. Intuitively, the\n    expmap represents a smooth travel along a geodesic from the starting point\n    :math:`x`, into the initial direction :math:`u` at speed :math:`\\|u\\|_x` for\n    the duration of one time unit. In formulas one can express this as the\n    travel along the curve :math:`\\gamma_{x, u}(t)` such that\n\n    .. math::\n\n        \\gamma_{x, u}(0) = x\\\\\n        \\dot\\gamma_{x, u}(0) = u\\\\\n        \\|\\dot\\gamma_{x, u}(t)\\|_{\\gamma_{x, u}(t)} = \\|u\\|_x\n\n    The existence of this curve relies on uniqueness of the differential\n    equation solution, that is local. For the universal manifold the solution\n    is well defined globally and we have.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_x(u) = \\gamma_{x, u}(1) = \\\\\n        x\\oplus_\\kappa \\tan_\\kappa(\\|u\\|_x/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    u : tensor\n        speed vector in tangent space at x\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{x, u}(1)` end point\n    \"\"\"\n    return _expmap(x, u, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the exponential map of :math:`u` at :math:`x`.\n\n    The expmap is tightly related with :func:`geodesic`. Intuitively, the\n    expmap represents a smooth travel along a geodesic from the starting point\n    :math:`x`, into the initial direction :math:`u` at speed :math:`\\|u\\|_x` for\n    the duration of one time unit. In formulas one can express this as the\n    travel along the curve :math:`\\gamma_{x, u}(t)` such that\n\n    .. math::\n\n        \\gamma_{x, u}(0) = x\\\\\n        \\dot\\gamma_{x, u}(0) = u\\\\\n        \\|\\dot\\gamma_{x, u}(t)\\|_{\\gamma_{x, u}(t)} = \\|u\\|_x\n\n    The existence of this curve relies on uniqueness of the differential\n    equation solution, that is local. For the universal manifold the solution\n    is well defined globally and we have.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_x(u) = \\gamma_{x, u}(1) = \\\\\n        x\\oplus_\\kappa \\tan_\\kappa(\\|u\\|_x/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    u : tensor\n        speed vector in tangent space at x\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{x, u}(1)` end point\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the exponential map of :math:`u` at :math:`x`.\n\n    The expmap is tightly related with :func:`geodesic`. Intuitively, the\n    expmap represents a smooth travel along a geodesic from the starting point\n    :math:`x`, into the initial direction :math:`u` at speed :math:`\\|u\\|_x` for\n    the duration of one time unit. In formulas one can express this as the\n    travel along the curve :math:`\\gamma_{x, u}(t)` such that\n\n    .. math::\n\n        \\gamma_{x, u}(0) = x\\\\\n        \\dot\\gamma_{x, u}(0) = u\\\\\n        \\|\\dot\\gamma_{x, u}(t)\\|_{\\gamma_{x, u}(t)} = \\|u\\|_x\n\n    The existence of this curve relies on uniqueness of the differential\n    equation solution, that is local. For the universal manifold the solution\n    is well defined globally and we have.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_x(u) = \\gamma_{x, u}(1) = \\\\\n        x\\oplus_\\kappa \\tan_\\kappa(\\|u\\|_x/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    u : tensor\n        speed vector in tangent space at x\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{x, u}(1)` end point\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _expmap(x, u, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_expmap(x, u, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_expmap",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, u, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "u",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _expmap(x: torch.Tensor, u: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    lam = _lambda_x(x, k, dim=dim, keepdim=True)\n    second_term = tan_k((lam / 2.0) * u_norm, k) * (u / u_norm)\n    y = _mobius_add(x, second_term, k, dim=dim)\n    return y",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _expmap(x: torch.Tensor, u: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    lam = _lambda_x(x, k, dim=dim, keepdim=True)\n    second_term = tan_k((lam / 2.0) * u_norm, k) * (u / u_norm)\n    y = _mobius_add(x, second_term, k, dim=dim)\n    return y",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_expmap",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, u: torch.Tensor, k: torch.Tensor, dim: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "u: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "u",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    lam = _lambda_x(x, k, dim=dim, keepdim=True)\n    second_term = tan_k((lam / 2.0) * u_norm, k) * (u / u_norm)\n    y = _mobius_add(x, second_term, k, dim=dim)\n    return y",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "u_norm",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "u.norm(dim=dim, p=2, keepdim=True).clamp_min",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "u.norm(dim=dim, p=2, keepdim=True)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "u.norm",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "u",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(dim=dim, p=2, keepdim=True)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "p=2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "p",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "keepdim=True",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "true",
                                              "text": "True",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(1e-15)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "1e-15",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "lam = _lambda_x(x, k, dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "lam = _lambda_x(x, k, dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "lam",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "_lambda_x(x, k, dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_lambda_x",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(x, k, dim=dim, keepdim=True)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "second_term = tan_k((lam / 2.0) * u_norm, k) * (u / u_norm)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "second_term = tan_k((lam / 2.0) * u_norm, k) * (u / u_norm)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "second_term",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "tan_k((lam / 2.0) * u_norm, k) * (u / u_norm)",
                          "children": [
                            {
                              "type": "call",
                              "text": "tan_k((lam / 2.0) * u_norm, k)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "tan_k",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "((lam / 2.0) * u_norm, k)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "(lam / 2.0) * u_norm",
                                      "children": [
                                        {
                                          "type": "parenthesized_expression",
                                          "text": "(lam / 2.0)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "lam / 2.0",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "lam",
                                                  "children": []
                                                },
                                                {
                                                  "type": "/",
                                                  "text": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "float",
                                                  "text": "2.0",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "u_norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "parenthesized_expression",
                              "text": "(u / u_norm)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "u / u_norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "u",
                                      "children": []
                                    },
                                    {
                                      "type": "/",
                                      "text": "/",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "u_norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "y = _mobius_add(x, second_term, k, dim=dim)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "y = _mobius_add(x, second_term, k, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "_mobius_add(x, second_term, k, dim=dim)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_mobius_add",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(x, second_term, k, dim=dim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "second_term",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return y",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "y",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def expmap0(u: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the exponential map of :math:`u` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_0(u)\n        =\n        \\tan_\\kappa(\\|u\\|_2/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    u : tensor\n        speed vector on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{0, u}(1)` end point\n    \"\"\"\n    return _expmap0(u, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "expmap0",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(u: torch.Tensor, *, k: torch.Tensor, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "u: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "u",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the exponential map of :math:`u` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_0(u)\n        =\n        \\tan_\\kappa(\\|u\\|_2/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    u : tensor\n        speed vector on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{0, u}(1)` end point\n    \"\"\"\n    return _expmap0(u, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the exponential map of :math:`u` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_0(u)\n        =\n        \\tan_\\kappa(\\|u\\|_2/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    u : tensor\n        speed vector on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{0, u}(1)` end point\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the exponential map of :math:`u` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_0(u)\n        =\n        \\tan_\\kappa(\\|u\\|_2/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    u : tensor\n        speed vector on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{0, u}(1)` end point\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _expmap0(u, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_expmap0(u, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_expmap0",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(u, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "u",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _expmap0(u: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    gamma_1 = tan_k(u_norm, k) * (u / u_norm)\n    return gamma_1",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _expmap0(u: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    gamma_1 = tan_k(u_norm, k) * (u / u_norm)\n    return gamma_1",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_expmap0",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(u: torch.Tensor, k: torch.Tensor, dim: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "u: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "u",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    gamma_1 = tan_k(u_norm, k) * (u / u_norm)\n    return gamma_1",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "u_norm",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "u.norm(dim=dim, p=2, keepdim=True).clamp_min",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "u.norm(dim=dim, p=2, keepdim=True)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "u.norm",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "u",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(dim=dim, p=2, keepdim=True)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "p=2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "p",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "keepdim=True",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "true",
                                              "text": "True",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(1e-15)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "1e-15",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "gamma_1 = tan_k(u_norm, k) * (u / u_norm)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "gamma_1 = tan_k(u_norm, k) * (u / u_norm)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "gamma_1",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "tan_k(u_norm, k) * (u / u_norm)",
                          "children": [
                            {
                              "type": "call",
                              "text": "tan_k(u_norm, k)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "tan_k",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(u_norm, k)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "u_norm",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "parenthesized_expression",
                              "text": "(u / u_norm)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "u / u_norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "u",
                                      "children": []
                                    },
                                    {
                                      "type": "/",
                                      "text": "/",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "u_norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return gamma_1",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "gamma_1",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def geodesic_unit(\n    t: torch.Tensor, x: torch.Tensor, u: torch.Tensor, *, k: torch.Tensor, dim=-1\n):\n    r\"\"\"\n    Compute the point on the unit speed geodesic.\n\n    The point on the unit speed geodesic at time :math:`t`, starting\n    from :math:`x` with initial direction :math:`u/\\|u\\|_x` is computed\n    as follows:\n\n    .. math::\n\n        \\gamma_{x,u}(t) = x\\oplus_\\kappa \\tan_\\kappa(t/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    t : tensor\n        travelling time\n    x : tensor\n        initial point on manifold\n    u : tensor\n        initial direction in tangent space at x\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the point on the unit speed geodesic\n    \"\"\"\n    return _geodesic_unit(t, x, u, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "geodesic_unit",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(\n    t: torch.Tensor, x: torch.Tensor, u: torch.Tensor, *, k: torch.Tensor, dim=-1\n)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "t: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "t",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "u: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "u",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the point on the unit speed geodesic.\n\n    The point on the unit speed geodesic at time :math:`t`, starting\n    from :math:`x` with initial direction :math:`u/\\|u\\|_x` is computed\n    as follows:\n\n    .. math::\n\n        \\gamma_{x,u}(t) = x\\oplus_\\kappa \\tan_\\kappa(t/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    t : tensor\n        travelling time\n    x : tensor\n        initial point on manifold\n    u : tensor\n        initial direction in tangent space at x\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the point on the unit speed geodesic\n    \"\"\"\n    return _geodesic_unit(t, x, u, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the point on the unit speed geodesic.\n\n    The point on the unit speed geodesic at time :math:`t`, starting\n    from :math:`x` with initial direction :math:`u/\\|u\\|_x` is computed\n    as follows:\n\n    .. math::\n\n        \\gamma_{x,u}(t) = x\\oplus_\\kappa \\tan_\\kappa(t/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    t : tensor\n        travelling time\n    x : tensor\n        initial point on manifold\n    u : tensor\n        initial direction in tangent space at x\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the point on the unit speed geodesic\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the point on the unit speed geodesic.\n\n    The point on the unit speed geodesic at time :math:`t`, starting\n    from :math:`x` with initial direction :math:`u/\\|u\\|_x` is computed\n    as follows:\n\n    .. math::\n\n        \\gamma_{x,u}(t) = x\\oplus_\\kappa \\tan_\\kappa(t/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    t : tensor\n        travelling time\n    x : tensor\n        initial point on manifold\n    u : tensor\n        initial direction in tangent space at x\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the point on the unit speed geodesic\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _geodesic_unit(t, x, u, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_geodesic_unit(t, x, u, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_geodesic_unit",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(t, x, u, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "t",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "u",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _geodesic_unit(\n    t: torch.Tensor,\n    x: torch.Tensor,\n    u: torch.Tensor,\n    k: torch.Tensor,\n    dim: int = -1,\n):\n    u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    second_term = tan_k(t / 2.0, k) * (u / u_norm)\n    gamma_1 = _mobius_add(x, second_term, k, dim=dim)\n    return gamma_1",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _geodesic_unit(\n    t: torch.Tensor,\n    x: torch.Tensor,\n    u: torch.Tensor,\n    k: torch.Tensor,\n    dim: int = -1,\n):\n    u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    second_term = tan_k(t / 2.0, k) * (u / u_norm)\n    gamma_1 = _mobius_add(x, second_term, k, dim=dim)\n    return gamma_1",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_geodesic_unit",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(\n    t: torch.Tensor,\n    x: torch.Tensor,\n    u: torch.Tensor,\n    k: torch.Tensor,\n    dim: int = -1,\n)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "t: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "t",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "u: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "u",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    second_term = tan_k(t / 2.0, k) * (u / u_norm)\n    gamma_1 = _mobius_add(x, second_term, k, dim=dim)\n    return gamma_1",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "u_norm",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "u.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "u.norm(dim=dim, p=2, keepdim=True).clamp_min",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "u.norm(dim=dim, p=2, keepdim=True)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "u.norm",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "u",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(dim=dim, p=2, keepdim=True)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "p=2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "p",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "keepdim=True",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "true",
                                              "text": "True",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(1e-15)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "1e-15",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "second_term = tan_k(t / 2.0, k) * (u / u_norm)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "second_term = tan_k(t / 2.0, k) * (u / u_norm)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "second_term",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "tan_k(t / 2.0, k) * (u / u_norm)",
                          "children": [
                            {
                              "type": "call",
                              "text": "tan_k(t / 2.0, k)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "tan_k",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(t / 2.0, k)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "t / 2.0",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "t",
                                          "children": []
                                        },
                                        {
                                          "type": "/",
                                          "text": "/",
                                          "children": []
                                        },
                                        {
                                          "type": "float",
                                          "text": "2.0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "parenthesized_expression",
                              "text": "(u / u_norm)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "u / u_norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "u",
                                      "children": []
                                    },
                                    {
                                      "type": "/",
                                      "text": "/",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "u_norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "gamma_1 = _mobius_add(x, second_term, k, dim=dim)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "gamma_1 = _mobius_add(x, second_term, k, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "gamma_1",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "_mobius_add(x, second_term, k, dim=dim)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_mobius_add",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(x, second_term, k, dim=dim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "second_term",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return gamma_1",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "gamma_1",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def logmap(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the logarithmic map of :math:`y` at :math:`x`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_x(y) = \\frac{2}{\\lambda_x^\\kappa}\n        \\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n        * \\frac{(-x)\\oplus_\\kappa y}{\\|(-x)\\oplus_\\kappa y\\|_2}\n\n    The result of the logmap is a vector :math:`u` in the tangent space of\n    :math:`x` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_x(\\operatorname{log}^\\kappa_x(y))\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_x M` that transports :math:`x` to :math:`y`\n    \"\"\"\n    return _logmap(x, y, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "logmap",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x: torch.Tensor, y: torch.Tensor, *, k: torch.Tensor, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "y: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "y",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the logarithmic map of :math:`y` at :math:`x`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_x(y) = \\frac{2}{\\lambda_x^\\kappa}\n        \\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n        * \\frac{(-x)\\oplus_\\kappa y}{\\|(-x)\\oplus_\\kappa y\\|_2}\n\n    The result of the logmap is a vector :math:`u` in the tangent space of\n    :math:`x` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_x(\\operatorname{log}^\\kappa_x(y))\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_x M` that transports :math:`x` to :math:`y`\n    \"\"\"\n    return _logmap(x, y, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the logarithmic map of :math:`y` at :math:`x`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_x(y) = \\frac{2}{\\lambda_x^\\kappa}\n        \\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n        * \\frac{(-x)\\oplus_\\kappa y}{\\|(-x)\\oplus_\\kappa y\\|_2}\n\n    The result of the logmap is a vector :math:`u` in the tangent space of\n    :math:`x` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_x(\\operatorname{log}^\\kappa_x(y))\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_x M` that transports :math:`x` to :math:`y`\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the logarithmic map of :math:`y` at :math:`x`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_x(y) = \\frac{2}{\\lambda_x^\\kappa}\n        \\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n        * \\frac{(-x)\\oplus_\\kappa y}{\\|(-x)\\oplus_\\kappa y\\|_2}\n\n    The result of the logmap is a vector :math:`u` in the tangent space of\n    :math:`x` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_x(\\operatorname{log}^\\kappa_x(y))\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_x M` that transports :math:`x` to :math:`y`\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _logmap(x, y, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_logmap(x, y, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_logmap",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, y, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _logmap(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    sub = _mobius_add(-x, y, k, dim=dim)\n    sub_norm = sub.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    lam = _lambda_x(x, k, keepdim=True, dim=dim)\n    return 2.0 * artan_k(sub_norm, k) * (sub / (lam * sub_norm))",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _logmap(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    sub = _mobius_add(-x, y, k, dim=dim)\n    sub_norm = sub.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    lam = _lambda_x(x, k, keepdim=True, dim=dim)\n    return 2.0 * artan_k(sub_norm, k) * (sub / (lam * sub_norm))",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_logmap",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, y: torch.Tensor, k: torch.Tensor, dim: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "y: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "y",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "sub = _mobius_add(-x, y, k, dim=dim)\n    sub_norm = sub.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    lam = _lambda_x(x, k, keepdim=True, dim=dim)\n    return 2.0 * artan_k(sub_norm, k) * (sub / (lam * sub_norm))",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "sub = _mobius_add(-x, y, k, dim=dim)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "sub = _mobius_add(-x, y, k, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "sub",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "_mobius_add(-x, y, k, dim=dim)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_mobius_add",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(-x, y, k, dim=dim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "unary_operator",
                                  "text": "-x",
                                  "children": [
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "y",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "sub_norm = sub.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "sub_norm = sub.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "sub_norm",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "sub.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "sub.norm(dim=dim, p=2, keepdim=True).clamp_min",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "sub.norm(dim=dim, p=2, keepdim=True)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "sub.norm",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "sub",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(dim=dim, p=2, keepdim=True)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "p=2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "p",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "keepdim=True",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "true",
                                              "text": "True",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(1e-15)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "1e-15",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "lam = _lambda_x(x, k, keepdim=True, dim=dim)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "lam = _lambda_x(x, k, keepdim=True, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "lam",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "_lambda_x(x, k, keepdim=True, dim=dim)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_lambda_x",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(x, k, keepdim=True, dim=dim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return 2.0 * artan_k(sub_norm, k) * (sub / (lam * sub_norm))",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "2.0 * artan_k(sub_norm, k) * (sub / (lam * sub_norm))",
                      "children": [
                        {
                          "type": "binary_operator",
                          "text": "2.0 * artan_k(sub_norm, k)",
                          "children": [
                            {
                              "type": "float",
                              "text": "2.0",
                              "children": []
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "artan_k(sub_norm, k)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "artan_k",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(sub_norm, k)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "sub_norm",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "parenthesized_expression",
                          "text": "(sub / (lam * sub_norm))",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "sub / (lam * sub_norm)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "sub",
                                  "children": []
                                },
                                {
                                  "type": "/",
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(lam * sub_norm)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "lam * sub_norm",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "lam",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "sub_norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def logmap0(y: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the logarithmic map of :math:`y` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_0(y)\n        =\n        \\tan_\\kappa^{-1}(\\|y\\|_2) \\frac{y}{\\|y\\|_2}\n\n    The result of the logmap at the origin is a vector :math:`u` in the tangent\n    space of the origin :math:`0` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Parameters\n    ----------\n    y : tensor\n        target point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_0 M` that transports :math:`0` to :math:`y`\n    \"\"\"\n    return _logmap0(y, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "logmap0",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(y: torch.Tensor, *, k: torch.Tensor, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "y: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "y",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the logarithmic map of :math:`y` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_0(y)\n        =\n        \\tan_\\kappa^{-1}(\\|y\\|_2) \\frac{y}{\\|y\\|_2}\n\n    The result of the logmap at the origin is a vector :math:`u` in the tangent\n    space of the origin :math:`0` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Parameters\n    ----------\n    y : tensor\n        target point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_0 M` that transports :math:`0` to :math:`y`\n    \"\"\"\n    return _logmap0(y, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the logarithmic map of :math:`y` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_0(y)\n        =\n        \\tan_\\kappa^{-1}(\\|y\\|_2) \\frac{y}{\\|y\\|_2}\n\n    The result of the logmap at the origin is a vector :math:`u` in the tangent\n    space of the origin :math:`0` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Parameters\n    ----------\n    y : tensor\n        target point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_0 M` that transports :math:`0` to :math:`y`\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the logarithmic map of :math:`y` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_0(y)\n        =\n        \\tan_\\kappa^{-1}(\\|y\\|_2) \\frac{y}{\\|y\\|_2}\n\n    The result of the logmap at the origin is a vector :math:`u` in the tangent\n    space of the origin :math:`0` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Parameters\n    ----------\n    y : tensor\n        target point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_0 M` that transports :math:`0` to :math:`y`\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _logmap0(y, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_logmap0(y, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_logmap0",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(y, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _logmap0(y: torch.Tensor, k, dim: int = -1):\n    y_norm = y.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    return (y / y_norm) * artan_k(y_norm, k)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _logmap0(y: torch.Tensor, k, dim: int = -1):\n    y_norm = y.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    return (y / y_norm) * artan_k(y_norm, k)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_logmap0",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(y: torch.Tensor, k, dim: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "y: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "y",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "y_norm = y.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)\n    return (y / y_norm) * artan_k(y_norm, k)",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "y_norm = y.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "y_norm = y.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "y_norm",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "y.norm(dim=dim, p=2, keepdim=True).clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "y.norm(dim=dim, p=2, keepdim=True).clamp_min",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "y.norm(dim=dim, p=2, keepdim=True)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "y.norm",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "y",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(dim=dim, p=2, keepdim=True)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "p=2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "p",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "keepdim=True",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "true",
                                              "text": "True",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(1e-15)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "1e-15",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return (y / y_norm) * artan_k(y_norm, k)",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "(y / y_norm) * artan_k(y_norm, k)",
                      "children": [
                        {
                          "type": "parenthesized_expression",
                          "text": "(y / y_norm)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "y / y_norm",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "y",
                                  "children": []
                                },
                                {
                                  "type": "/",
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "y_norm",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "artan_k(y_norm, k)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "artan_k",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(y_norm, k)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "y_norm",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def mobius_matvec(m: torch.Tensor, x: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the generalization of matrix-vector multiplication in gyrovector spaces.\n\n    The Möbius matrix vector operation is defined as follows:\n\n    .. math::\n\n        M \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|Mx\\|_2}{\\|x\\|_2}\\tan_\\kappa^{-1}(\\|x\\|_2)\n        \\right)\\frac{Mx}{\\|Mx\\|_2}\n\n    .. plot:: plots/extended/stereographic/mobius_matvec.py\n\n    Parameters\n    ----------\n    m : tensor\n        matrix for multiplication. Batched matmul is performed if\n        ``m.dim() > 2``, but only last dim reduction is supported\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius matvec result\n    \"\"\"\n    return _mobius_matvec(m, x, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_matvec",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(m: torch.Tensor, x: torch.Tensor, *, k: torch.Tensor, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "m: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "m",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the generalization of matrix-vector multiplication in gyrovector spaces.\n\n    The Möbius matrix vector operation is defined as follows:\n\n    .. math::\n\n        M \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|Mx\\|_2}{\\|x\\|_2}\\tan_\\kappa^{-1}(\\|x\\|_2)\n        \\right)\\frac{Mx}{\\|Mx\\|_2}\n\n    .. plot:: plots/extended/stereographic/mobius_matvec.py\n\n    Parameters\n    ----------\n    m : tensor\n        matrix for multiplication. Batched matmul is performed if\n        ``m.dim() > 2``, but only last dim reduction is supported\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius matvec result\n    \"\"\"\n    return _mobius_matvec(m, x, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the generalization of matrix-vector multiplication in gyrovector spaces.\n\n    The Möbius matrix vector operation is defined as follows:\n\n    .. math::\n\n        M \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|Mx\\|_2}{\\|x\\|_2}\\tan_\\kappa^{-1}(\\|x\\|_2)\n        \\right)\\frac{Mx}{\\|Mx\\|_2}\n\n    .. plot:: plots/extended/stereographic/mobius_matvec.py\n\n    Parameters\n    ----------\n    m : tensor\n        matrix for multiplication. Batched matmul is performed if\n        ``m.dim() > 2``, but only last dim reduction is supported\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius matvec result\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the generalization of matrix-vector multiplication in gyrovector spaces.\n\n    The Möbius matrix vector operation is defined as follows:\n\n    .. math::\n\n        M \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|Mx\\|_2}{\\|x\\|_2}\\tan_\\kappa^{-1}(\\|x\\|_2)\n        \\right)\\frac{Mx}{\\|Mx\\|_2}\n\n    .. plot:: plots/extended/stereographic/mobius_matvec.py\n\n    Parameters\n    ----------\n    m : tensor\n        matrix for multiplication. Batched matmul is performed if\n        ``m.dim() > 2``, but only last dim reduction is supported\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius matvec result\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _mobius_matvec(m, x, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_matvec(m, x, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_matvec",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(m, x, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "m",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _mobius_matvec(m: torch.Tensor, x: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    if m.dim() > 2 and dim != -1:\n        raise RuntimeError(\n            \"broadcasted Möbius matvec is supported for the last dim only\"\n        )\n    x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    if dim != -1 or m.dim() == 2:\n        mx = torch.tensordot(x, m, ([dim], [1]))\n    else:\n        mx = torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)\n    mx_norm = mx.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    res_c = tan_k(mx_norm / x_norm * artan_k(x_norm, k), k) * (mx / mx_norm)\n    cond = (mx == 0).prod(dim=dim, keepdim=True, dtype=torch.bool)\n    res_0 = torch.zeros(1, dtype=res_c.dtype, device=res_c.device)\n    res = torch.where(cond, res_0, res_c)\n    return res",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _mobius_matvec(m: torch.Tensor, x: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    if m.dim() > 2 and dim != -1:\n        raise RuntimeError(\n            \"broadcasted Möbius matvec is supported for the last dim only\"\n        )\n    x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    if dim != -1 or m.dim() == 2:\n        mx = torch.tensordot(x, m, ([dim], [1]))\n    else:\n        mx = torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)\n    mx_norm = mx.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    res_c = tan_k(mx_norm / x_norm * artan_k(x_norm, k), k) * (mx / mx_norm)\n    cond = (mx == 0).prod(dim=dim, keepdim=True, dtype=torch.bool)\n    res_0 = torch.zeros(1, dtype=res_c.dtype, device=res_c.device)\n    res = torch.where(cond, res_0, res_c)\n    return res",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_mobius_matvec",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(m: torch.Tensor, x: torch.Tensor, k: torch.Tensor, dim: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "m: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "m",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "if m.dim() > 2 and dim != -1:\n        raise RuntimeError(\n            \"broadcasted Möbius matvec is supported for the last dim only\"\n        )\n    x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    if dim != -1 or m.dim() == 2:\n        mx = torch.tensordot(x, m, ([dim], [1]))\n    else:\n        mx = torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)\n    mx_norm = mx.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    res_c = tan_k(mx_norm / x_norm * artan_k(x_norm, k), k) * (mx / mx_norm)\n    cond = (mx == 0).prod(dim=dim, keepdim=True, dtype=torch.bool)\n    res_0 = torch.zeros(1, dtype=res_c.dtype, device=res_c.device)\n    res = torch.where(cond, res_0, res_c)\n    return res",
              "children": [
                {
                  "type": "if_statement",
                  "text": "if m.dim() > 2 and dim != -1:\n        raise RuntimeError(\n            \"broadcasted Möbius matvec is supported for the last dim only\"\n        )",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "boolean_operator",
                      "text": "m.dim() > 2 and dim != -1",
                      "children": [
                        {
                          "type": "comparison_operator",
                          "text": "m.dim() > 2",
                          "children": [
                            {
                              "type": "call",
                              "text": "m.dim()",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "m.dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "m",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ">",
                              "text": ">",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "and",
                          "text": "and",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "dim != -1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "!=",
                              "text": "!=",
                              "children": []
                            },
                            {
                              "type": "unary_operator",
                              "text": "-1",
                              "children": [
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "integer",
                                  "text": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "raise RuntimeError(\n            \"broadcasted Möbius matvec is supported for the last dim only\"\n        )",
                      "children": [
                        {
                          "type": "raise_statement",
                          "text": "raise RuntimeError(\n            \"broadcasted Möbius matvec is supported for the last dim only\"\n        )",
                          "children": [
                            {
                              "type": "raise",
                              "text": "raise",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "RuntimeError(\n            \"broadcasted Möbius matvec is supported for the last dim only\"\n        )",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "RuntimeError",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(\n            \"broadcasted Möbius matvec is supported for the last dim only\"\n        )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "string",
                                      "text": "\"broadcasted Möbius matvec is supported for the last dim only\"",
                                      "children": [
                                        {
                                          "type": "\"",
                                          "text": "\"",
                                          "children": []
                                        },
                                        {
                                          "type": "\"",
                                          "text": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "x_norm",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "x.norm(dim=dim, keepdim=True, p=2).clamp_min",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "x.norm(dim=dim, keepdim=True, p=2)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "x.norm",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(dim=dim, keepdim=True, p=2)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "keepdim=True",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "true",
                                              "text": "True",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "p=2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "p",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(1e-15)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "1e-15",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if dim != -1 or m.dim() == 2:\n        mx = torch.tensordot(x, m, ([dim], [1]))\n    else:\n        mx = torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "boolean_operator",
                      "text": "dim != -1 or m.dim() == 2",
                      "children": [
                        {
                          "type": "comparison_operator",
                          "text": "dim != -1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "!=",
                              "text": "!=",
                              "children": []
                            },
                            {
                              "type": "unary_operator",
                              "text": "-1",
                              "children": [
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "integer",
                                  "text": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "or",
                          "text": "or",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "m.dim() == 2",
                          "children": [
                            {
                              "type": "call",
                              "text": "m.dim()",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "m.dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "m",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "==",
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "2",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "mx = torch.tensordot(x, m, ([dim], [1]))",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "mx = torch.tensordot(x, m, ([dim], [1]))",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "mx = torch.tensordot(x, m, ([dim], [1]))",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "mx",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.tensordot(x, m, ([dim], [1]))",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.tensordot",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "tensordot",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(x, m, ([dim], [1]))",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "m",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "tuple",
                                          "text": "([dim], [1])",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "list",
                                              "text": "[dim]",
                                              "children": [
                                                {
                                                  "type": "[",
                                                  "text": "[",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "dim",
                                                  "children": []
                                                },
                                                {
                                                  "type": "]",
                                                  "text": "]",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "list",
                                              "text": "[1]",
                                              "children": [
                                                {
                                                  "type": "[",
                                                  "text": "[",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "1",
                                                  "children": []
                                                },
                                                {
                                                  "type": "]",
                                                  "text": "]",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "else_clause",
                      "text": "else:\n        mx = torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)",
                      "children": [
                        {
                          "type": "else",
                          "text": "else",
                          "children": []
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "mx = torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)",
                          "children": [
                            {
                              "type": "expression_statement",
                              "text": "mx = torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)",
                              "children": [
                                {
                                  "type": "assignment",
                                  "text": "mx = torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "mx",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "call",
                                      "text": "torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "torch.matmul(m, x.unsqueeze(-1)).squeeze",
                                          "children": [
                                            {
                                              "type": "call",
                                              "text": "torch.matmul(m, x.unsqueeze(-1))",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "torch.matmul",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "torch",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "matmul",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(m, x.unsqueeze(-1))",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "m",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ",",
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "call",
                                                      "text": "x.unsqueeze(-1)",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "text": "x.unsqueeze",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "x",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "unsqueeze",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(-1)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "unary_operator",
                                                              "text": "-1",
                                                              "children": [
                                                                {
                                                                  "type": "-",
                                                                  "text": "-",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "integer",
                                                                  "text": "1",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "squeeze",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(-1)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "unary_operator",
                                              "text": "-1",
                                              "children": [
                                                {
                                                  "type": "-",
                                                  "text": "-",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "1",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "mx_norm = mx.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "mx_norm = mx.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "mx_norm",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "mx.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "mx.norm(dim=dim, keepdim=True, p=2).clamp_min",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "mx.norm(dim=dim, keepdim=True, p=2)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "mx.norm",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "mx",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(dim=dim, keepdim=True, p=2)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "keepdim=True",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "true",
                                              "text": "True",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "p=2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "p",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(1e-15)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "1e-15",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "res_c = tan_k(mx_norm / x_norm * artan_k(x_norm, k), k) * (mx / mx_norm)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "res_c = tan_k(mx_norm / x_norm * artan_k(x_norm, k), k) * (mx / mx_norm)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "res_c",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "tan_k(mx_norm / x_norm * artan_k(x_norm, k), k) * (mx / mx_norm)",
                          "children": [
                            {
                              "type": "call",
                              "text": "tan_k(mx_norm / x_norm * artan_k(x_norm, k), k)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "tan_k",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(mx_norm / x_norm * artan_k(x_norm, k), k)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "mx_norm / x_norm * artan_k(x_norm, k)",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "mx_norm / x_norm",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "mx_norm",
                                              "children": []
                                            },
                                            {
                                              "type": "/",
                                              "text": "/",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "x_norm",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "artan_k(x_norm, k)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "artan_k",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(x_norm, k)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "x_norm",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "parenthesized_expression",
                              "text": "(mx / mx_norm)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "mx / mx_norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "mx",
                                      "children": []
                                    },
                                    {
                                      "type": "/",
                                      "text": "/",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "mx_norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "cond = (mx == 0).prod(dim=dim, keepdim=True, dtype=torch.bool)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "cond = (mx == 0).prod(dim=dim, keepdim=True, dtype=torch.bool)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "cond",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "(mx == 0).prod(dim=dim, keepdim=True, dtype=torch.bool)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "(mx == 0).prod",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(mx == 0)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "comparison_operator",
                                      "text": "mx == 0",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "mx",
                                          "children": []
                                        },
                                        {
                                          "type": "==",
                                          "text": "==",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "prod",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(dim=dim, keepdim=True, dtype=torch.bool)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dtype=torch.bool",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dtype",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "attribute",
                                      "text": "torch.bool",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "bool",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "res_0 = torch.zeros(1, dtype=res_c.dtype, device=res_c.device)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "res_0 = torch.zeros(1, dtype=res_c.dtype, device=res_c.device)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "res_0",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.zeros(1, dtype=res_c.dtype, device=res_c.device)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.zeros",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "zeros",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(1, dtype=res_c.dtype, device=res_c.device)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "integer",
                                  "text": "1",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dtype=res_c.dtype",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dtype",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "attribute",
                                      "text": "res_c.dtype",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "res_c",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dtype",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "device=res_c.device",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "device",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "attribute",
                                      "text": "res_c.device",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "res_c",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "device",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "res = torch.where(cond, res_0, res_c)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "res = torch.where(cond, res_0, res_c)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "res",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.where(cond, res_0, res_c)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.where",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "where",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(cond, res_0, res_c)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "cond",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "res_0",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "res_c",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return res",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "res",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "comment",
      "text": "# TODO: check if this extends to gyrovector spaces for positive curvature",
      "children": []
    },
    {
      "type": "comment",
      "text": "# TODO: add plot",
      "children": []
    },
    {
      "type": "function_definition",
      "text": "def mobius_pointwise_mul(w: torch.Tensor, x: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the generalization for point-wise multiplication in gyrovector spaces.\n\n    The Möbius pointwise multiplication is defined as follows\n\n    .. math::\n\n        \\operatorname{diag}(w) \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|\\operatorname{diag}(w)x\\|_2}{x}\\tanh^{-1}(\\|x\\|_2)\n        \\right)\\frac{\\|\\operatorname{diag}(w)x\\|_2}{\\|x\\|_2}\n\n\n    Parameters\n    ----------\n    w : tensor\n        weights for multiplication (should be broadcastable to x)\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius point-wise mul result\n    \"\"\"\n    return _mobius_pointwise_mul(w, x, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_pointwise_mul",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(w: torch.Tensor, x: torch.Tensor, *, k: torch.Tensor, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "w: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "w",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the generalization for point-wise multiplication in gyrovector spaces.\n\n    The Möbius pointwise multiplication is defined as follows\n\n    .. math::\n\n        \\operatorname{diag}(w) \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|\\operatorname{diag}(w)x\\|_2}{x}\\tanh^{-1}(\\|x\\|_2)\n        \\right)\\frac{\\|\\operatorname{diag}(w)x\\|_2}{\\|x\\|_2}\n\n\n    Parameters\n    ----------\n    w : tensor\n        weights for multiplication (should be broadcastable to x)\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius point-wise mul result\n    \"\"\"\n    return _mobius_pointwise_mul(w, x, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the generalization for point-wise multiplication in gyrovector spaces.\n\n    The Möbius pointwise multiplication is defined as follows\n\n    .. math::\n\n        \\operatorname{diag}(w) \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|\\operatorname{diag}(w)x\\|_2}{x}\\tanh^{-1}(\\|x\\|_2)\n        \\right)\\frac{\\|\\operatorname{diag}(w)x\\|_2}{\\|x\\|_2}\n\n\n    Parameters\n    ----------\n    w : tensor\n        weights for multiplication (should be broadcastable to x)\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius point-wise mul result\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the generalization for point-wise multiplication in gyrovector spaces.\n\n    The Möbius pointwise multiplication is defined as follows\n\n    .. math::\n\n        \\operatorname{diag}(w) \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|\\operatorname{diag}(w)x\\|_2}{x}\\tanh^{-1}(\\|x\\|_2)\n        \\right)\\frac{\\|\\operatorname{diag}(w)x\\|_2}{\\|x\\|_2}\n\n\n    Parameters\n    ----------\n    w : tensor\n        weights for multiplication (should be broadcastable to x)\n    x : tensor\n        point on manifold\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius point-wise mul result\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _mobius_pointwise_mul(w, x, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_pointwise_mul(w, x, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_pointwise_mul",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(w, x, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "w",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _mobius_pointwise_mul(\n    w: torch.Tensor, x: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    wx = w * x\n    wx_norm = wx.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    res_c = tan_k(wx_norm / x_norm * artan_k(x_norm, k), k) * (wx / wx_norm)\n    zero = torch.zeros((), dtype=res_c.dtype, device=res_c.device)\n    cond = wx.isclose(zero).prod(dim=dim, keepdim=True, dtype=torch.bool)\n    res = torch.where(cond, zero, res_c)\n    return res",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _mobius_pointwise_mul(\n    w: torch.Tensor, x: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    wx = w * x\n    wx_norm = wx.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    res_c = tan_k(wx_norm / x_norm * artan_k(x_norm, k), k) * (wx / wx_norm)\n    zero = torch.zeros((), dtype=res_c.dtype, device=res_c.device)\n    cond = wx.isclose(zero).prod(dim=dim, keepdim=True, dtype=torch.bool)\n    res = torch.where(cond, zero, res_c)\n    return res",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_mobius_pointwise_mul",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(\n    w: torch.Tensor, x: torch.Tensor, k: torch.Tensor, dim: int = -1\n)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "w: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "w",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    wx = w * x\n    wx_norm = wx.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)\n    res_c = tan_k(wx_norm / x_norm * artan_k(x_norm, k), k) * (wx / wx_norm)\n    zero = torch.zeros((), dtype=res_c.dtype, device=res_c.device)\n    cond = wx.isclose(zero).prod(dim=dim, keepdim=True, dtype=torch.bool)\n    res = torch.where(cond, zero, res_c)\n    return res",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "x_norm",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "x.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "x.norm(dim=dim, keepdim=True, p=2).clamp_min",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "x.norm(dim=dim, keepdim=True, p=2)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "x.norm",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(dim=dim, keepdim=True, p=2)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "keepdim=True",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "true",
                                              "text": "True",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "p=2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "p",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(1e-15)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "1e-15",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "wx = w * x",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "wx = w * x",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "wx",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "w * x",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "w",
                              "children": []
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "wx_norm = wx.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "wx_norm = wx.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "wx_norm",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "wx.norm(dim=dim, keepdim=True, p=2).clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "wx.norm(dim=dim, keepdim=True, p=2).clamp_min",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "wx.norm(dim=dim, keepdim=True, p=2)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "wx.norm",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "wx",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(dim=dim, keepdim=True, p=2)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "keepdim=True",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "true",
                                              "text": "True",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "p=2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "p",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(1e-15)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "1e-15",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "res_c = tan_k(wx_norm / x_norm * artan_k(x_norm, k), k) * (wx / wx_norm)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "res_c = tan_k(wx_norm / x_norm * artan_k(x_norm, k), k) * (wx / wx_norm)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "res_c",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "tan_k(wx_norm / x_norm * artan_k(x_norm, k), k) * (wx / wx_norm)",
                          "children": [
                            {
                              "type": "call",
                              "text": "tan_k(wx_norm / x_norm * artan_k(x_norm, k), k)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "tan_k",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(wx_norm / x_norm * artan_k(x_norm, k), k)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "wx_norm / x_norm * artan_k(x_norm, k)",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "wx_norm / x_norm",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "wx_norm",
                                              "children": []
                                            },
                                            {
                                              "type": "/",
                                              "text": "/",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "x_norm",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "artan_k(x_norm, k)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "artan_k",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(x_norm, k)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "x_norm",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "parenthesized_expression",
                              "text": "(wx / wx_norm)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "wx / wx_norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "wx",
                                      "children": []
                                    },
                                    {
                                      "type": "/",
                                      "text": "/",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "wx_norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "zero = torch.zeros((), dtype=res_c.dtype, device=res_c.device)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "zero = torch.zeros((), dtype=res_c.dtype, device=res_c.device)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "zero",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.zeros((), dtype=res_c.dtype, device=res_c.device)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.zeros",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "zeros",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "((), dtype=res_c.dtype, device=res_c.device)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "tuple",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dtype=res_c.dtype",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dtype",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "attribute",
                                      "text": "res_c.dtype",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "res_c",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dtype",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "device=res_c.device",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "device",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "attribute",
                                      "text": "res_c.device",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "res_c",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "device",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "cond = wx.isclose(zero).prod(dim=dim, keepdim=True, dtype=torch.bool)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "cond = wx.isclose(zero).prod(dim=dim, keepdim=True, dtype=torch.bool)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "cond",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "wx.isclose(zero).prod(dim=dim, keepdim=True, dtype=torch.bool)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "wx.isclose(zero).prod",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "wx.isclose(zero)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "wx.isclose",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "wx",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "isclose",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(zero)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "zero",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "prod",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(dim=dim, keepdim=True, dtype=torch.bool)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dtype=torch.bool",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dtype",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "attribute",
                                      "text": "torch.bool",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "bool",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "res = torch.where(cond, zero, res_c)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "res = torch.where(cond, zero, res_c)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "res",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.where(cond, zero, res_c)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.where",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "where",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(cond, zero, res_c)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "cond",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "zero",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "res_c",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return res",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "res",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def mobius_fn_apply_chain(x: torch.Tensor, *fns: callable, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the generalization of sequential function application in gyrovector spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the sequence of functions is\n    applied to the vector in the tangent space. The resulting tangent vector is\n    then mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    The definition of mobius function application allows chaining as\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Resulting in\n\n    .. math::\n\n        (f \\circ g)^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(\n            (f \\circ g) (\\operatorname{log}^\\kappa_0(y))\n        )\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fns : callable[]\n        functions to apply\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Apply chain result\n    \"\"\"\n    if not fns:\n        return x\n    else:\n        ex = _logmap0(x, k, dim=dim)\n        for fn in fns:\n            ex = fn(ex)\n        y = _expmap0(ex, k, dim=dim)\n        return y",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_fn_apply_chain",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x: torch.Tensor, *fns: callable, k: torch.Tensor, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "*fns: callable",
              "children": [
                {
                  "type": "list_splat_pattern",
                  "text": "*fns",
                  "children": [
                    {
                      "type": "*",
                      "text": "*",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "fns",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "callable",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "callable",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the generalization of sequential function application in gyrovector spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the sequence of functions is\n    applied to the vector in the tangent space. The resulting tangent vector is\n    then mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    The definition of mobius function application allows chaining as\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Resulting in\n\n    .. math::\n\n        (f \\circ g)^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(\n            (f \\circ g) (\\operatorname{log}^\\kappa_0(y))\n        )\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fns : callable[]\n        functions to apply\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Apply chain result\n    \"\"\"\n    if not fns:\n        return x\n    else:\n        ex = _logmap0(x, k, dim=dim)\n        for fn in fns:\n            ex = fn(ex)\n        y = _expmap0(ex, k, dim=dim)\n        return y",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the generalization of sequential function application in gyrovector spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the sequence of functions is\n    applied to the vector in the tangent space. The resulting tangent vector is\n    then mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    The definition of mobius function application allows chaining as\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Resulting in\n\n    .. math::\n\n        (f \\circ g)^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(\n            (f \\circ g) (\\operatorname{log}^\\kappa_0(y))\n        )\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fns : callable[]\n        functions to apply\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Apply chain result\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the generalization of sequential function application in gyrovector spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the sequence of functions is\n    applied to the vector in the tangent space. The resulting tangent vector is\n    then mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    The definition of mobius function application allows chaining as\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Resulting in\n\n    .. math::\n\n        (f \\circ g)^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(\n            (f \\circ g) (\\operatorname{log}^\\kappa_0(y))\n        )\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fns : callable[]\n        functions to apply\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Apply chain result\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "text": "if not fns:\n        return x\n    else:\n        ex = _logmap0(x, k, dim=dim)\n        for fn in fns:\n            ex = fn(ex)\n        y = _expmap0(ex, k, dim=dim)\n        return y",
              "children": [
                {
                  "type": "if",
                  "text": "if",
                  "children": []
                },
                {
                  "type": "not_operator",
                  "text": "not fns",
                  "children": [
                    {
                      "type": "not",
                      "text": "not",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "fns",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "return x",
                  "children": [
                    {
                      "type": "return_statement",
                      "text": "return x",
                      "children": [
                        {
                          "type": "return",
                          "text": "return",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "text": "else:\n        ex = _logmap0(x, k, dim=dim)\n        for fn in fns:\n            ex = fn(ex)\n        y = _expmap0(ex, k, dim=dim)\n        return y",
                  "children": [
                    {
                      "type": "else",
                      "text": "else",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "ex = _logmap0(x, k, dim=dim)\n        for fn in fns:\n            ex = fn(ex)\n        y = _expmap0(ex, k, dim=dim)\n        return y",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "ex = _logmap0(x, k, dim=dim)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "ex = _logmap0(x, k, dim=dim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "ex",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "_logmap0(x, k, dim=dim)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "_logmap0",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(x, k, dim=dim)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "for_statement",
                          "text": "for fn in fns:\n            ex = fn(ex)",
                          "children": [
                            {
                              "type": "for",
                              "text": "for",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "fn",
                              "children": []
                            },
                            {
                              "type": "in",
                              "text": "in",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "fns",
                              "children": []
                            },
                            {
                              "type": ":",
                              "text": ":",
                              "children": []
                            },
                            {
                              "type": "block",
                              "text": "ex = fn(ex)",
                              "children": [
                                {
                                  "type": "expression_statement",
                                  "text": "ex = fn(ex)",
                                  "children": [
                                    {
                                      "type": "assignment",
                                      "text": "ex = fn(ex)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "ex",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "fn(ex)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "fn",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(ex)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "ex",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "y = _expmap0(ex, k, dim=dim)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "y = _expmap0(ex, k, dim=dim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "y",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "_expmap0(ex, k, dim=dim)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "_expmap0",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(ex, k, dim=dim)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "ex",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "return_statement",
                          "text": "return y",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "y",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def mobius_fn_apply(\n    fn: callable, x: torch.Tensor, *args, k: torch.Tensor, dim=-1, **kwargs\n):\n    r\"\"\"\n    Compute the generalization of function application in gyrovector spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the function is applied\n    to the vector in the tangent space. The resulting tangent vector is then\n    mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    .. plot:: plots/extended/stereographic/mobius_sigmoid_apply.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fn : callable\n        function to apply\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Result of function in hyperbolic space\n    \"\"\"\n    ex = _logmap0(x, k, dim=dim)\n    ex = fn(ex, *args, **kwargs)\n    y = _expmap0(ex, k, dim=dim)\n    return y",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_fn_apply",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(\n    fn: callable, x: torch.Tensor, *args, k: torch.Tensor, dim=-1, **kwargs\n)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "fn: callable",
              "children": [
                {
                  "type": "identifier",
                  "text": "fn",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "callable",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "callable",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "list_splat_pattern",
              "text": "*args",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "args",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "dictionary_splat_pattern",
              "text": "**kwargs",
              "children": [
                {
                  "type": "**",
                  "text": "**",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "kwargs",
                  "children": []
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the generalization of function application in gyrovector spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the function is applied\n    to the vector in the tangent space. The resulting tangent vector is then\n    mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    .. plot:: plots/extended/stereographic/mobius_sigmoid_apply.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fn : callable\n        function to apply\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Result of function in hyperbolic space\n    \"\"\"\n    ex = _logmap0(x, k, dim=dim)\n    ex = fn(ex, *args, **kwargs)\n    y = _expmap0(ex, k, dim=dim)\n    return y",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the generalization of function application in gyrovector spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the function is applied\n    to the vector in the tangent space. The resulting tangent vector is then\n    mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    .. plot:: plots/extended/stereographic/mobius_sigmoid_apply.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fn : callable\n        function to apply\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Result of function in hyperbolic space\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the generalization of function application in gyrovector spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the function is applied\n    to the vector in the tangent space. The resulting tangent vector is then\n    mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    .. plot:: plots/extended/stereographic/mobius_sigmoid_apply.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fn : callable\n        function to apply\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Result of function in hyperbolic space\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "ex = _logmap0(x, k, dim=dim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "ex = _logmap0(x, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "ex",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_logmap0(x, k, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_logmap0",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(x, k, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "k",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "ex = fn(ex, *args, **kwargs)",
              "children": [
                {
                  "type": "assignment",
                  "text": "ex = fn(ex, *args, **kwargs)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "ex",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "fn(ex, *args, **kwargs)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "fn",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(ex, *args, **kwargs)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "ex",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "list_splat",
                              "text": "*args",
                              "children": [
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "args",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "dictionary_splat",
                              "text": "**kwargs",
                              "children": [
                                {
                                  "type": "**",
                                  "text": "**",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "kwargs",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "y = _expmap0(ex, k, dim=dim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "y = _expmap0(ex, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "y",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_expmap0(ex, k, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_expmap0",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(ex, k, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "ex",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "k",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return y",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "y",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def mobiusify(fn: callable):\n    r\"\"\"\n    Wrap a function such that is works in gyrovector spaces.\n\n    Parameters\n    ----------\n    fn : callable\n        function in Euclidean space\n\n    Returns\n    -------\n    callable\n        function working in gyrovector spaces\n\n    Notes\n    -----\n    New function will accept additional argument ``k`` and ``dim``.\n    \"\"\"\n\n    @functools.wraps(fn)\n    def mobius_fn(x, *args, k, dim=-1, **kwargs):\n        ex = _logmap0(x, k, dim=dim)\n        ex = fn(ex, *args, **kwargs)\n        y = _expmap0(ex, k, dim=dim)\n        return y\n\n    return mobius_fn",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobiusify",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(fn: callable)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "fn: callable",
              "children": [
                {
                  "type": "identifier",
                  "text": "fn",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "callable",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "callable",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Wrap a function such that is works in gyrovector spaces.\n\n    Parameters\n    ----------\n    fn : callable\n        function in Euclidean space\n\n    Returns\n    -------\n    callable\n        function working in gyrovector spaces\n\n    Notes\n    -----\n    New function will accept additional argument ``k`` and ``dim``.\n    \"\"\"\n\n    @functools.wraps(fn)\n    def mobius_fn(x, *args, k, dim=-1, **kwargs):\n        ex = _logmap0(x, k, dim=dim)\n        ex = fn(ex, *args, **kwargs)\n        y = _expmap0(ex, k, dim=dim)\n        return y\n\n    return mobius_fn",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Wrap a function such that is works in gyrovector spaces.\n\n    Parameters\n    ----------\n    fn : callable\n        function in Euclidean space\n\n    Returns\n    -------\n    callable\n        function working in gyrovector spaces\n\n    Notes\n    -----\n    New function will accept additional argument ``k`` and ``dim``.\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Wrap a function such that is works in gyrovector spaces.\n\n    Parameters\n    ----------\n    fn : callable\n        function in Euclidean space\n\n    Returns\n    -------\n    callable\n        function working in gyrovector spaces\n\n    Notes\n    -----\n    New function will accept additional argument ``k`` and ``dim``.\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "decorated_definition",
              "text": "@functools.wraps(fn)\n    def mobius_fn(x, *args, k, dim=-1, **kwargs):\n        ex = _logmap0(x, k, dim=dim)\n        ex = fn(ex, *args, **kwargs)\n        y = _expmap0(ex, k, dim=dim)\n        return y",
              "children": [
                {
                  "type": "decorator",
                  "text": "@functools.wraps(fn)",
                  "children": [
                    {
                      "type": "@",
                      "text": "@",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "functools.wraps(fn)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "functools.wraps",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "functools",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "wraps",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(fn)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "fn",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "function_definition",
                  "text": "def mobius_fn(x, *args, k, dim=-1, **kwargs):\n        ex = _logmap0(x, k, dim=dim)\n        ex = fn(ex, *args, **kwargs)\n        y = _expmap0(ex, k, dim=dim)\n        return y",
                  "children": [
                    {
                      "type": "def",
                      "text": "def",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "mobius_fn",
                      "children": []
                    },
                    {
                      "type": "parameters",
                      "text": "(x, *args, k, dim=-1, **kwargs)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "list_splat_pattern",
                          "text": "*args",
                          "children": [
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "args",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "default_parameter",
                          "text": "dim=-1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "unary_operator",
                              "text": "-1",
                              "children": [
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "integer",
                                  "text": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "dictionary_splat_pattern",
                          "text": "**kwargs",
                          "children": [
                            {
                              "type": "**",
                              "text": "**",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "kwargs",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "ex = _logmap0(x, k, dim=dim)\n        ex = fn(ex, *args, **kwargs)\n        y = _expmap0(ex, k, dim=dim)\n        return y",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "ex = _logmap0(x, k, dim=dim)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "ex = _logmap0(x, k, dim=dim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "ex",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "_logmap0(x, k, dim=dim)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "_logmap0",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(x, k, dim=dim)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "ex = fn(ex, *args, **kwargs)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "ex = fn(ex, *args, **kwargs)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "ex",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "fn(ex, *args, **kwargs)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "fn",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(ex, *args, **kwargs)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "ex",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "list_splat",
                                          "text": "*args",
                                          "children": [
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "args",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "dictionary_splat",
                                          "text": "**kwargs",
                                          "children": [
                                            {
                                              "type": "**",
                                              "text": "**",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "kwargs",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "y = _expmap0(ex, k, dim=dim)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "y = _expmap0(ex, k, dim=dim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "y",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "_expmap0(ex, k, dim=dim)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "_expmap0",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(ex, k, dim=dim)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "ex",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "return_statement",
                          "text": "return y",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "y",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return mobius_fn",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "mobius_fn",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def dist2plane(\n    x: torch.Tensor,\n    p: torch.Tensor,\n    a: torch.Tensor,\n    *,\n    k: torch.Tensor,\n    keepdim=False,\n    signed=False,\n    scaled=False,\n    dim=-1,\n):\n    r\"\"\"\n    Geodesic distance from :math:`x` to a hyperplane :math:`H_{a, b}`.\n\n    The hyperplane is such that its set of points is orthogonal to :math:`a` and\n    contains :math:`p`.\n\n    .. plot:: plots/extended/stereographic/distance2plane.py\n\n    To form an intuition what is a hyperplane in gyrovector spaces, let's first\n    consider an Euclidean hyperplane\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\},\n\n    where :math:`a\\in \\mathbb{R}^n\\backslash \\{\\mathbf{0}\\}` and\n    :math:`b\\in \\mathbb{R}^n`.\n\n    This formulation of a hyperplane is hard to generalize,\n    therefore we can rewrite :math:`\\langle x, a\\rangle - b`\n    utilizing orthogonal completion.\n    Setting any :math:`p` s.t. :math:`b=\\langle a, p\\rangle` we have\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\}\\\\\n        =H_{a, \\langle a, p\\rangle} = \\tilde{H}_{a, p}\\\\\n        = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - \\langle a, p\\rangle = 0\n        \\right\\}\\\\\n        =\\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle -p + x, a\\rangle = 0\n        \\right\\}\\\\\n        = p + \\{a\\}^\\perp\n\n    Naturally we have a set :math:`\\{a\\}^\\perp` with applied :math:`+` operator\n    to each element. Generalizing a notion of summation to the gyrovector space\n    we replace :math:`+` with :math:`\\oplus_\\kappa`.\n\n    Next, we should figure out what is :math:`\\{a\\}^\\perp` in the gyrovector\n    space.\n\n    First thing that we should acknowledge is that notion of orthogonality is\n    defined for vectors in tangent spaces. Let's consider now\n    :math:`p\\in \\mathcal{M}_\\kappa^n` and\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`.\n\n    Slightly deviating from traditional notation let's write\n    :math:`\\{a\\}_p^\\perp` highlighting the tight relationship of\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`\n    with :math:`p \\in \\mathcal{M}_\\kappa^n`. We then define\n\n    .. math::\n\n        \\{a\\}_p^\\perp := \\left\\{\n            z\\in T_p\\mathcal{M}_\\kappa^n \\;:\\; \\langle z, a\\rangle_p = 0\n        \\right\\}\n\n    Recalling that a tangent vector :math:`z` for point :math:`p` yields\n    :math:`x = \\operatorname{exp}^\\kappa_p(z)` we rewrite the above equation as\n\n    .. math::\n        \\{a\\}_p^\\perp := \\left\\{\n            x\\in \\mathcal{M}_\\kappa^n \\;:\\; \\langle\n            \\operatorname{log}_p^\\kappa(x), a\\rangle_p = 0\n        \\right\\}\n\n    This formulation is something more pleasant to work with.\n    Putting all together\n\n    .. math::\n\n        \\tilde{H}_{a, p}^\\kappa = p + \\{a\\}^\\perp_p\\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle\n            \\operatorname{log}^\\kappa_p(x),\n            a\\rangle_p = 0\n        \\right\\} \\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle -p \\oplus_\\kappa x, a\\rangle\n            = 0\n        \\right\\}\n\n    To compute the distance :math:`d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)` we find\n\n    .. math::\n\n        d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)\n        =\n        \\inf_{w\\in \\tilde{H}_{a, p}^\\kappa} d_\\kappa(x, w)\\\\\n        =\n        \\sin^{-1}_\\kappa\\left\\{\n            \\frac{\n            2 |\\langle(-p)\\oplus_\\kappa x, a\\rangle|\n            }{\n            (1+\\kappa\\|(-p)\\oplus_\\kappa \\|x\\|^2_2)\\|a\\|_2\n            }\n        \\right\\}\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold to compute distance for\n    a : tensor\n        hyperplane normal vector in tangent space of :math:`p`\n    p : tensor\n        point on manifold lying on the hyperplane\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    signed : bool\n        return signed distance\n    scaled : bool\n        scale distance by tangent norm\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        distance to the hyperplane\n    \"\"\"\n    return _dist2plane(\n        x, a, p, k, keepdim=keepdim, signed=signed, dim=dim, scaled=scaled\n    )",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "dist2plane",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(\n    x: torch.Tensor,\n    p: torch.Tensor,\n    a: torch.Tensor,\n    *,\n    k: torch.Tensor,\n    keepdim=False,\n    signed=False,\n    scaled=False,\n    dim=-1,\n)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "p: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "p",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "a: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "a",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "keepdim=False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "signed=False",
              "children": [
                {
                  "type": "identifier",
                  "text": "signed",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "scaled=False",
              "children": [
                {
                  "type": "identifier",
                  "text": "scaled",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Geodesic distance from :math:`x` to a hyperplane :math:`H_{a, b}`.\n\n    The hyperplane is such that its set of points is orthogonal to :math:`a` and\n    contains :math:`p`.\n\n    .. plot:: plots/extended/stereographic/distance2plane.py\n\n    To form an intuition what is a hyperplane in gyrovector spaces, let's first\n    consider an Euclidean hyperplane\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\},\n\n    where :math:`a\\in \\mathbb{R}^n\\backslash \\{\\mathbf{0}\\}` and\n    :math:`b\\in \\mathbb{R}^n`.\n\n    This formulation of a hyperplane is hard to generalize,\n    therefore we can rewrite :math:`\\langle x, a\\rangle - b`\n    utilizing orthogonal completion.\n    Setting any :math:`p` s.t. :math:`b=\\langle a, p\\rangle` we have\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\}\\\\\n        =H_{a, \\langle a, p\\rangle} = \\tilde{H}_{a, p}\\\\\n        = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - \\langle a, p\\rangle = 0\n        \\right\\}\\\\\n        =\\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle -p + x, a\\rangle = 0\n        \\right\\}\\\\\n        = p + \\{a\\}^\\perp\n\n    Naturally we have a set :math:`\\{a\\}^\\perp` with applied :math:`+` operator\n    to each element. Generalizing a notion of summation to the gyrovector space\n    we replace :math:`+` with :math:`\\oplus_\\kappa`.\n\n    Next, we should figure out what is :math:`\\{a\\}^\\perp` in the gyrovector\n    space.\n\n    First thing that we should acknowledge is that notion of orthogonality is\n    defined for vectors in tangent spaces. Let's consider now\n    :math:`p\\in \\mathcal{M}_\\kappa^n` and\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`.\n\n    Slightly deviating from traditional notation let's write\n    :math:`\\{a\\}_p^\\perp` highlighting the tight relationship of\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`\n    with :math:`p \\in \\mathcal{M}_\\kappa^n`. We then define\n\n    .. math::\n\n        \\{a\\}_p^\\perp := \\left\\{\n            z\\in T_p\\mathcal{M}_\\kappa^n \\;:\\; \\langle z, a\\rangle_p = 0\n        \\right\\}\n\n    Recalling that a tangent vector :math:`z` for point :math:`p` yields\n    :math:`x = \\operatorname{exp}^\\kappa_p(z)` we rewrite the above equation as\n\n    .. math::\n        \\{a\\}_p^\\perp := \\left\\{\n            x\\in \\mathcal{M}_\\kappa^n \\;:\\; \\langle\n            \\operatorname{log}_p^\\kappa(x), a\\rangle_p = 0\n        \\right\\}\n\n    This formulation is something more pleasant to work with.\n    Putting all together\n\n    .. math::\n\n        \\tilde{H}_{a, p}^\\kappa = p + \\{a\\}^\\perp_p\\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle\n            \\operatorname{log}^\\kappa_p(x),\n            a\\rangle_p = 0\n        \\right\\} \\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle -p \\oplus_\\kappa x, a\\rangle\n            = 0\n        \\right\\}\n\n    To compute the distance :math:`d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)` we find\n\n    .. math::\n\n        d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)\n        =\n        \\inf_{w\\in \\tilde{H}_{a, p}^\\kappa} d_\\kappa(x, w)\\\\\n        =\n        \\sin^{-1}_\\kappa\\left\\{\n            \\frac{\n            2 |\\langle(-p)\\oplus_\\kappa x, a\\rangle|\n            }{\n            (1+\\kappa\\|(-p)\\oplus_\\kappa \\|x\\|^2_2)\\|a\\|_2\n            }\n        \\right\\}\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold to compute distance for\n    a : tensor\n        hyperplane normal vector in tangent space of :math:`p`\n    p : tensor\n        point on manifold lying on the hyperplane\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    signed : bool\n        return signed distance\n    scaled : bool\n        scale distance by tangent norm\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        distance to the hyperplane\n    \"\"\"\n    return _dist2plane(\n        x, a, p, k, keepdim=keepdim, signed=signed, dim=dim, scaled=scaled\n    )",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Geodesic distance from :math:`x` to a hyperplane :math:`H_{a, b}`.\n\n    The hyperplane is such that its set of points is orthogonal to :math:`a` and\n    contains :math:`p`.\n\n    .. plot:: plots/extended/stereographic/distance2plane.py\n\n    To form an intuition what is a hyperplane in gyrovector spaces, let's first\n    consider an Euclidean hyperplane\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\},\n\n    where :math:`a\\in \\mathbb{R}^n\\backslash \\{\\mathbf{0}\\}` and\n    :math:`b\\in \\mathbb{R}^n`.\n\n    This formulation of a hyperplane is hard to generalize,\n    therefore we can rewrite :math:`\\langle x, a\\rangle - b`\n    utilizing orthogonal completion.\n    Setting any :math:`p` s.t. :math:`b=\\langle a, p\\rangle` we have\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\}\\\\\n        =H_{a, \\langle a, p\\rangle} = \\tilde{H}_{a, p}\\\\\n        = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - \\langle a, p\\rangle = 0\n        \\right\\}\\\\\n        =\\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle -p + x, a\\rangle = 0\n        \\right\\}\\\\\n        = p + \\{a\\}^\\perp\n\n    Naturally we have a set :math:`\\{a\\}^\\perp` with applied :math:`+` operator\n    to each element. Generalizing a notion of summation to the gyrovector space\n    we replace :math:`+` with :math:`\\oplus_\\kappa`.\n\n    Next, we should figure out what is :math:`\\{a\\}^\\perp` in the gyrovector\n    space.\n\n    First thing that we should acknowledge is that notion of orthogonality is\n    defined for vectors in tangent spaces. Let's consider now\n    :math:`p\\in \\mathcal{M}_\\kappa^n` and\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`.\n\n    Slightly deviating from traditional notation let's write\n    :math:`\\{a\\}_p^\\perp` highlighting the tight relationship of\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`\n    with :math:`p \\in \\mathcal{M}_\\kappa^n`. We then define\n\n    .. math::\n\n        \\{a\\}_p^\\perp := \\left\\{\n            z\\in T_p\\mathcal{M}_\\kappa^n \\;:\\; \\langle z, a\\rangle_p = 0\n        \\right\\}\n\n    Recalling that a tangent vector :math:`z` for point :math:`p` yields\n    :math:`x = \\operatorname{exp}^\\kappa_p(z)` we rewrite the above equation as\n\n    .. math::\n        \\{a\\}_p^\\perp := \\left\\{\n            x\\in \\mathcal{M}_\\kappa^n \\;:\\; \\langle\n            \\operatorname{log}_p^\\kappa(x), a\\rangle_p = 0\n        \\right\\}\n\n    This formulation is something more pleasant to work with.\n    Putting all together\n\n    .. math::\n\n        \\tilde{H}_{a, p}^\\kappa = p + \\{a\\}^\\perp_p\\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle\n            \\operatorname{log}^\\kappa_p(x),\n            a\\rangle_p = 0\n        \\right\\} \\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle -p \\oplus_\\kappa x, a\\rangle\n            = 0\n        \\right\\}\n\n    To compute the distance :math:`d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)` we find\n\n    .. math::\n\n        d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)\n        =\n        \\inf_{w\\in \\tilde{H}_{a, p}^\\kappa} d_\\kappa(x, w)\\\\\n        =\n        \\sin^{-1}_\\kappa\\left\\{\n            \\frac{\n            2 |\\langle(-p)\\oplus_\\kappa x, a\\rangle|\n            }{\n            (1+\\kappa\\|(-p)\\oplus_\\kappa \\|x\\|^2_2)\\|a\\|_2\n            }\n        \\right\\}\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold to compute distance for\n    a : tensor\n        hyperplane normal vector in tangent space of :math:`p`\n    p : tensor\n        point on manifold lying on the hyperplane\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    signed : bool\n        return signed distance\n    scaled : bool\n        scale distance by tangent norm\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        distance to the hyperplane\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Geodesic distance from :math:`x` to a hyperplane :math:`H_{a, b}`.\n\n    The hyperplane is such that its set of points is orthogonal to :math:`a` and\n    contains :math:`p`.\n\n    .. plot:: plots/extended/stereographic/distance2plane.py\n\n    To form an intuition what is a hyperplane in gyrovector spaces, let's first\n    consider an Euclidean hyperplane\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\},\n\n    where :math:`a\\in \\mathbb{R}^n\\backslash \\{\\mathbf{0}\\}` and\n    :math:`b\\in \\mathbb{R}^n`.\n\n    This formulation of a hyperplane is hard to generalize,\n    therefore we can rewrite :math:`\\langle x, a\\rangle - b`\n    utilizing orthogonal completion.\n    Setting any :math:`p` s.t. :math:`b=\\langle a, p\\rangle` we have\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\}\\\\\n        =H_{a, \\langle a, p\\rangle} = \\tilde{H}_{a, p}\\\\\n        = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - \\langle a, p\\rangle = 0\n        \\right\\}\\\\\n        =\\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle -p + x, a\\rangle = 0\n        \\right\\}\\\\\n        = p + \\{a\\}^\\perp\n\n    Naturally we have a set :math:`\\{a\\}^\\perp` with applied :math:`+` operator\n    to each element. Generalizing a notion of summation to the gyrovector space\n    we replace :math:`+` with :math:`\\oplus_\\kappa`.\n\n    Next, we should figure out what is :math:`\\{a\\}^\\perp` in the gyrovector\n    space.\n\n    First thing that we should acknowledge is that notion of orthogonality is\n    defined for vectors in tangent spaces. Let's consider now\n    :math:`p\\in \\mathcal{M}_\\kappa^n` and\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`.\n\n    Slightly deviating from traditional notation let's write\n    :math:`\\{a\\}_p^\\perp` highlighting the tight relationship of\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`\n    with :math:`p \\in \\mathcal{M}_\\kappa^n`. We then define\n\n    .. math::\n\n        \\{a\\}_p^\\perp := \\left\\{\n            z\\in T_p\\mathcal{M}_\\kappa^n \\;:\\; \\langle z, a\\rangle_p = 0\n        \\right\\}\n\n    Recalling that a tangent vector :math:`z` for point :math:`p` yields\n    :math:`x = \\operatorname{exp}^\\kappa_p(z)` we rewrite the above equation as\n\n    .. math::\n        \\{a\\}_p^\\perp := \\left\\{\n            x\\in \\mathcal{M}_\\kappa^n \\;:\\; \\langle\n            \\operatorname{log}_p^\\kappa(x), a\\rangle_p = 0\n        \\right\\}\n\n    This formulation is something more pleasant to work with.\n    Putting all together\n\n    .. math::\n\n        \\tilde{H}_{a, p}^\\kappa = p + \\{a\\}^\\perp_p\\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle\n            \\operatorname{log}^\\kappa_p(x),\n            a\\rangle_p = 0\n        \\right\\} \\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle -p \\oplus_\\kappa x, a\\rangle\n            = 0\n        \\right\\}\n\n    To compute the distance :math:`d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)` we find\n\n    .. math::\n\n        d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)\n        =\n        \\inf_{w\\in \\tilde{H}_{a, p}^\\kappa} d_\\kappa(x, w)\\\\\n        =\n        \\sin^{-1}_\\kappa\\left\\{\n            \\frac{\n            2 |\\langle(-p)\\oplus_\\kappa x, a\\rangle|\n            }{\n            (1+\\kappa\\|(-p)\\oplus_\\kappa \\|x\\|^2_2)\\|a\\|_2\n            }\n        \\right\\}\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold to compute distance for\n    a : tensor\n        hyperplane normal vector in tangent space of :math:`p`\n    p : tensor\n        point on manifold lying on the hyperplane\n    k : tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    signed : bool\n        return signed distance\n    scaled : bool\n        scale distance by tangent norm\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        distance to the hyperplane\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _dist2plane(\n        x, a, p, k, keepdim=keepdim, signed=signed, dim=dim, scaled=scaled\n    )",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_dist2plane(\n        x, a, p, k, keepdim=keepdim, signed=signed, dim=dim, scaled=scaled\n    )",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_dist2plane",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(\n        x, a, p, k, keepdim=keepdim, signed=signed, dim=dim, scaled=scaled\n    )",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "a",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "p",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "keepdim=keepdim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "signed=signed",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "signed",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "signed",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "scaled=scaled",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "scaled",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "scaled",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _dist2plane(\n    x: torch.Tensor,\n    a: torch.Tensor,\n    p: torch.Tensor,\n    k: torch.Tensor,\n    keepdim: bool = False,\n    signed: bool = False,\n    scaled: bool = False,\n    dim: int = -1,\n):\n    diff = _mobius_add(-p, x, k, dim=dim)\n    diff_norm2 = diff.pow(2).sum(dim=dim, keepdim=keepdim).clamp_min(1e-15)\n    sc_diff_a = (diff * a).sum(dim=dim, keepdim=keepdim)\n    if not signed:\n        sc_diff_a = sc_diff_a.abs()\n    a_norm = a.norm(dim=dim, keepdim=keepdim, p=2)\n    num = 2.0 * sc_diff_a\n    denom = clamp_abs((1 + k * diff_norm2) * a_norm)\n    distance = arsin_k(num / denom, k)\n    if scaled:\n        distance = distance * a_norm\n    return distance",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _dist2plane(\n    x: torch.Tensor,\n    a: torch.Tensor,\n    p: torch.Tensor,\n    k: torch.Tensor,\n    keepdim: bool = False,\n    signed: bool = False,\n    scaled: bool = False,\n    dim: int = -1,\n):\n    diff = _mobius_add(-p, x, k, dim=dim)\n    diff_norm2 = diff.pow(2).sum(dim=dim, keepdim=keepdim).clamp_min(1e-15)\n    sc_diff_a = (diff * a).sum(dim=dim, keepdim=keepdim)\n    if not signed:\n        sc_diff_a = sc_diff_a.abs()\n    a_norm = a.norm(dim=dim, keepdim=keepdim, p=2)\n    num = 2.0 * sc_diff_a\n    denom = clamp_abs((1 + k * diff_norm2) * a_norm)\n    distance = arsin_k(num / denom, k)\n    if scaled:\n        distance = distance * a_norm\n    return distance",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_dist2plane",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(\n    x: torch.Tensor,\n    a: torch.Tensor,\n    p: torch.Tensor,\n    k: torch.Tensor,\n    keepdim: bool = False,\n    signed: bool = False,\n    scaled: bool = False,\n    dim: int = -1,\n)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "a: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "a",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "p: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "p",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "keepdim: bool = False",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "keepdim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "bool",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "bool",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "false",
                      "text": "False",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "signed: bool = False",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "signed",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "bool",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "bool",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "false",
                      "text": "False",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "scaled: bool = False",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "scaled",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "bool",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "bool",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "false",
                      "text": "False",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "diff = _mobius_add(-p, x, k, dim=dim)\n    diff_norm2 = diff.pow(2).sum(dim=dim, keepdim=keepdim).clamp_min(1e-15)\n    sc_diff_a = (diff * a).sum(dim=dim, keepdim=keepdim)\n    if not signed:\n        sc_diff_a = sc_diff_a.abs()\n    a_norm = a.norm(dim=dim, keepdim=keepdim, p=2)\n    num = 2.0 * sc_diff_a\n    denom = clamp_abs((1 + k * diff_norm2) * a_norm)\n    distance = arsin_k(num / denom, k)\n    if scaled:\n        distance = distance * a_norm\n    return distance",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "diff = _mobius_add(-p, x, k, dim=dim)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "diff = _mobius_add(-p, x, k, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "diff",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "_mobius_add(-p, x, k, dim=dim)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_mobius_add",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(-p, x, k, dim=dim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "unary_operator",
                                  "text": "-p",
                                  "children": [
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "p",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "diff_norm2 = diff.pow(2).sum(dim=dim, keepdim=keepdim).clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "diff_norm2 = diff.pow(2).sum(dim=dim, keepdim=keepdim).clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "diff_norm2",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "diff.pow(2).sum(dim=dim, keepdim=keepdim).clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "diff.pow(2).sum(dim=dim, keepdim=keepdim).clamp_min",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "diff.pow(2).sum(dim=dim, keepdim=keepdim)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "diff.pow(2).sum",
                                      "children": [
                                        {
                                          "type": "call",
                                          "text": "diff.pow(2)",
                                          "children": [
                                            {
                                              "type": "attribute",
                                              "text": "diff.pow",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "diff",
                                                  "children": []
                                                },
                                                {
                                                  "type": ".",
                                                  "text": ".",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "pow",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(2)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "2",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "sum",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(dim=dim, keepdim=keepdim)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "keepdim=keepdim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(1e-15)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "1e-15",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "sc_diff_a = (diff * a).sum(dim=dim, keepdim=keepdim)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "sc_diff_a = (diff * a).sum(dim=dim, keepdim=keepdim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "sc_diff_a",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "(diff * a).sum(dim=dim, keepdim=keepdim)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "(diff * a).sum",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(diff * a)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "diff * a",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "diff",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "a",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sum",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(dim=dim, keepdim=keepdim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=keepdim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if not signed:\n        sc_diff_a = sc_diff_a.abs()",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "not_operator",
                      "text": "not signed",
                      "children": [
                        {
                          "type": "not",
                          "text": "not",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "signed",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "sc_diff_a = sc_diff_a.abs()",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "sc_diff_a = sc_diff_a.abs()",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "sc_diff_a = sc_diff_a.abs()",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "sc_diff_a",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "sc_diff_a.abs()",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "sc_diff_a.abs",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "sc_diff_a",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "abs",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "a_norm = a.norm(dim=dim, keepdim=keepdim, p=2)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "a_norm = a.norm(dim=dim, keepdim=keepdim, p=2)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "a_norm",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "a.norm(dim=dim, keepdim=keepdim, p=2)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "a.norm",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "a",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "norm",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(dim=dim, keepdim=keepdim, p=2)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=keepdim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "p=2",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "p",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "num = 2.0 * sc_diff_a",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "num = 2.0 * sc_diff_a",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "num",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "2.0 * sc_diff_a",
                          "children": [
                            {
                              "type": "float",
                              "text": "2.0",
                              "children": []
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "sc_diff_a",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "denom = clamp_abs((1 + k * diff_norm2) * a_norm)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "denom = clamp_abs((1 + k * diff_norm2) * a_norm)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "denom",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "clamp_abs((1 + k * diff_norm2) * a_norm)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "clamp_abs",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "((1 + k * diff_norm2) * a_norm)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "(1 + k * diff_norm2) * a_norm",
                                  "children": [
                                    {
                                      "type": "parenthesized_expression",
                                      "text": "(1 + k * diff_norm2)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "1 + k * diff_norm2",
                                          "children": [
                                            {
                                              "type": "integer",
                                              "text": "1",
                                              "children": []
                                            },
                                            {
                                              "type": "+",
                                              "text": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "k * diff_norm2",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "diff_norm2",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "a_norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "distance = arsin_k(num / denom, k)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "distance = arsin_k(num / denom, k)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "distance",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "arsin_k(num / denom, k)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "arsin_k",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(num / denom, k)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "num / denom",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "num",
                                      "children": []
                                    },
                                    {
                                      "type": "/",
                                      "text": "/",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "denom",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if scaled:\n        distance = distance * a_norm",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "scaled",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "distance = distance * a_norm",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "distance = distance * a_norm",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "distance = distance * a_norm",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "distance",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "distance * a_norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "distance",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "a_norm",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return distance",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "distance",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def parallel_transport(\n    x: torch.Tensor, y: torch.Tensor, v: torch.Tensor, *, k: torch.Tensor, dim=-1\n):\n    r\"\"\"\n    Compute the parallel transport of :math:`v` from :math:`x` to :math:`y`.\n\n    The parallel transport is essential for adaptive algorithms on Riemannian\n    manifolds. For gyrovector spaces the parallel transport is expressed through\n    the gyration.\n\n    .. plot:: plots/extended/stereographic/gyrovector_parallel_transport.py\n\n    To recover parallel transport we first need to study isomorphisms between\n    gyrovectors and vectors. The reason is that originally, parallel transport\n    is well defined for gyrovectors as\n\n    .. math::\n\n        P_{x\\to y}(z) = \\operatorname{gyr}[y, -x]z,\n\n    where :math:`x,\\:y,\\:z \\in \\mathcal{M}_\\kappa^n` and\n    :math:`\\operatorname{gyr}[a, b]c = \\ominus (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa c))`\n\n    But we want to obtain parallel transport for vectors, not for gyrovectors.\n    The blessing is the isomorphism mentioned above. This mapping is given by\n\n    .. math::\n\n        U^\\kappa_p \\: : \\: T_p\\mathcal{M}_\\kappa^n \\to \\mathbb{G}\n        =\n        v \\mapsto \\lambda^\\kappa_p v\n\n\n    Finally, having the points :math:`x,\\:y \\in \\mathcal{M}_\\kappa^n` and a\n    tangent vector :math:`u\\in T_x\\mathcal{M}_\\kappa^n` we obtain\n\n    .. math::\n\n        P^\\kappa_{x\\to y}(v)\n        =\n        (U^\\kappa_y)^{-1}\\left(\\operatorname{gyr}[y, -x] U^\\kappa_x(v)\\right)\\\\\n        =\n        \\operatorname{gyr}[y, -x] v \\lambda^\\kappa_x / \\lambda^\\kappa_y\n\n    .. plot:: plots/extended/stereographic/parallel_transport.py\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point\n    y : tensor\n        end point\n    v : tensor\n        tangent vector at x to be transported to y\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        transported vector\n    \"\"\"\n    return _parallel_transport(x, y, v, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "parallel_transport",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(\n    x: torch.Tensor, y: torch.Tensor, v: torch.Tensor, *, k: torch.Tensor, dim=-1\n)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "y: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "y",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "v: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "v",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the parallel transport of :math:`v` from :math:`x` to :math:`y`.\n\n    The parallel transport is essential for adaptive algorithms on Riemannian\n    manifolds. For gyrovector spaces the parallel transport is expressed through\n    the gyration.\n\n    .. plot:: plots/extended/stereographic/gyrovector_parallel_transport.py\n\n    To recover parallel transport we first need to study isomorphisms between\n    gyrovectors and vectors. The reason is that originally, parallel transport\n    is well defined for gyrovectors as\n\n    .. math::\n\n        P_{x\\to y}(z) = \\operatorname{gyr}[y, -x]z,\n\n    where :math:`x,\\:y,\\:z \\in \\mathcal{M}_\\kappa^n` and\n    :math:`\\operatorname{gyr}[a, b]c = \\ominus (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa c))`\n\n    But we want to obtain parallel transport for vectors, not for gyrovectors.\n    The blessing is the isomorphism mentioned above. This mapping is given by\n\n    .. math::\n\n        U^\\kappa_p \\: : \\: T_p\\mathcal{M}_\\kappa^n \\to \\mathbb{G}\n        =\n        v \\mapsto \\lambda^\\kappa_p v\n\n\n    Finally, having the points :math:`x,\\:y \\in \\mathcal{M}_\\kappa^n` and a\n    tangent vector :math:`u\\in T_x\\mathcal{M}_\\kappa^n` we obtain\n\n    .. math::\n\n        P^\\kappa_{x\\to y}(v)\n        =\n        (U^\\kappa_y)^{-1}\\left(\\operatorname{gyr}[y, -x] U^\\kappa_x(v)\\right)\\\\\n        =\n        \\operatorname{gyr}[y, -x] v \\lambda^\\kappa_x / \\lambda^\\kappa_y\n\n    .. plot:: plots/extended/stereographic/parallel_transport.py\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point\n    y : tensor\n        end point\n    v : tensor\n        tangent vector at x to be transported to y\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        transported vector\n    \"\"\"\n    return _parallel_transport(x, y, v, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the parallel transport of :math:`v` from :math:`x` to :math:`y`.\n\n    The parallel transport is essential for adaptive algorithms on Riemannian\n    manifolds. For gyrovector spaces the parallel transport is expressed through\n    the gyration.\n\n    .. plot:: plots/extended/stereographic/gyrovector_parallel_transport.py\n\n    To recover parallel transport we first need to study isomorphisms between\n    gyrovectors and vectors. The reason is that originally, parallel transport\n    is well defined for gyrovectors as\n\n    .. math::\n\n        P_{x\\to y}(z) = \\operatorname{gyr}[y, -x]z,\n\n    where :math:`x,\\:y,\\:z \\in \\mathcal{M}_\\kappa^n` and\n    :math:`\\operatorname{gyr}[a, b]c = \\ominus (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa c))`\n\n    But we want to obtain parallel transport for vectors, not for gyrovectors.\n    The blessing is the isomorphism mentioned above. This mapping is given by\n\n    .. math::\n\n        U^\\kappa_p \\: : \\: T_p\\mathcal{M}_\\kappa^n \\to \\mathbb{G}\n        =\n        v \\mapsto \\lambda^\\kappa_p v\n\n\n    Finally, having the points :math:`x,\\:y \\in \\mathcal{M}_\\kappa^n` and a\n    tangent vector :math:`u\\in T_x\\mathcal{M}_\\kappa^n` we obtain\n\n    .. math::\n\n        P^\\kappa_{x\\to y}(v)\n        =\n        (U^\\kappa_y)^{-1}\\left(\\operatorname{gyr}[y, -x] U^\\kappa_x(v)\\right)\\\\\n        =\n        \\operatorname{gyr}[y, -x] v \\lambda^\\kappa_x / \\lambda^\\kappa_y\n\n    .. plot:: plots/extended/stereographic/parallel_transport.py\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point\n    y : tensor\n        end point\n    v : tensor\n        tangent vector at x to be transported to y\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        transported vector\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the parallel transport of :math:`v` from :math:`x` to :math:`y`.\n\n    The parallel transport is essential for adaptive algorithms on Riemannian\n    manifolds. For gyrovector spaces the parallel transport is expressed through\n    the gyration.\n\n    .. plot:: plots/extended/stereographic/gyrovector_parallel_transport.py\n\n    To recover parallel transport we first need to study isomorphisms between\n    gyrovectors and vectors. The reason is that originally, parallel transport\n    is well defined for gyrovectors as\n\n    .. math::\n\n        P_{x\\to y}(z) = \\operatorname{gyr}[y, -x]z,\n\n    where :math:`x,\\:y,\\:z \\in \\mathcal{M}_\\kappa^n` and\n    :math:`\\operatorname{gyr}[a, b]c = \\ominus (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa c))`\n\n    But we want to obtain parallel transport for vectors, not for gyrovectors.\n    The blessing is the isomorphism mentioned above. This mapping is given by\n\n    .. math::\n\n        U^\\kappa_p \\: : \\: T_p\\mathcal{M}_\\kappa^n \\to \\mathbb{G}\n        =\n        v \\mapsto \\lambda^\\kappa_p v\n\n\n    Finally, having the points :math:`x,\\:y \\in \\mathcal{M}_\\kappa^n` and a\n    tangent vector :math:`u\\in T_x\\mathcal{M}_\\kappa^n` we obtain\n\n    .. math::\n\n        P^\\kappa_{x\\to y}(v)\n        =\n        (U^\\kappa_y)^{-1}\\left(\\operatorname{gyr}[y, -x] U^\\kappa_x(v)\\right)\\\\\n        =\n        \\operatorname{gyr}[y, -x] v \\lambda^\\kappa_x / \\lambda^\\kappa_y\n\n    .. plot:: plots/extended/stereographic/parallel_transport.py\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point\n    y : tensor\n        end point\n    v : tensor\n        tangent vector at x to be transported to y\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        transported vector\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _parallel_transport(x, y, v, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_parallel_transport(x, y, v, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_parallel_transport",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, y, v, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "v",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _parallel_transport(\n    x: torch.Tensor, y: torch.Tensor, u: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    return (\n        _gyration(y, -x, u, k, dim=dim)\n        * _lambda_x(x, k, keepdim=True, dim=dim)\n        / _lambda_x(y, k, keepdim=True, dim=dim)\n    )",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _parallel_transport(\n    x: torch.Tensor, y: torch.Tensor, u: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    return (\n        _gyration(y, -x, u, k, dim=dim)\n        * _lambda_x(x, k, keepdim=True, dim=dim)\n        / _lambda_x(y, k, keepdim=True, dim=dim)\n    )",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_parallel_transport",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(\n    x: torch.Tensor, y: torch.Tensor, u: torch.Tensor, k: torch.Tensor, dim: int = -1\n)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "y: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "y",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "u: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "u",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "return (\n        _gyration(y, -x, u, k, dim=dim)\n        * _lambda_x(x, k, keepdim=True, dim=dim)\n        / _lambda_x(y, k, keepdim=True, dim=dim)\n    )",
              "children": [
                {
                  "type": "return_statement",
                  "text": "return (\n        _gyration(y, -x, u, k, dim=dim)\n        * _lambda_x(x, k, keepdim=True, dim=dim)\n        / _lambda_x(y, k, keepdim=True, dim=dim)\n    )",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "parenthesized_expression",
                      "text": "(\n        _gyration(y, -x, u, k, dim=dim)\n        * _lambda_x(x, k, keepdim=True, dim=dim)\n        / _lambda_x(y, k, keepdim=True, dim=dim)\n    )",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "_gyration(y, -x, u, k, dim=dim)\n        * _lambda_x(x, k, keepdim=True, dim=dim)\n        / _lambda_x(y, k, keepdim=True, dim=dim)",
                          "children": [
                            {
                              "type": "binary_operator",
                              "text": "_gyration(y, -x, u, k, dim=dim)\n        * _lambda_x(x, k, keepdim=True, dim=dim)",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "_gyration(y, -x, u, k, dim=dim)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "_gyration",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(y, -x, u, k, dim=dim)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "y",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "unary_operator",
                                          "text": "-x",
                                          "children": [
                                            {
                                              "type": "-",
                                              "text": "-",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "u",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "_lambda_x(x, k, keepdim=True, dim=dim)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "_lambda_x",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(x, k, keepdim=True, dim=dim)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "keepdim=True",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "true",
                                              "text": "True",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "/",
                              "text": "/",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "_lambda_x(y, k, keepdim=True, dim=dim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "_lambda_x",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(y, k, keepdim=True, dim=dim)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "y",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=True",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "true",
                                          "text": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def parallel_transport0(y: torch.Tensor, v: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Compute the parallel transport of :math:`v` from the origin :math:`0` to :math:`y`.\n\n    This is just a special case of the parallel transport with the starting\n    point at the origin that can be computed more efficiently and more\n    numerically stable.\n\n    Parameters\n    ----------\n    y : tensor\n        target point\n    v : tensor\n        vector to be transported from the origin to y\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"\n    return _parallel_transport0(y, v, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "parallel_transport0",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(y: torch.Tensor, v: torch.Tensor, *, k: torch.Tensor, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "y: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "y",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "v: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "v",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the parallel transport of :math:`v` from the origin :math:`0` to :math:`y`.\n\n    This is just a special case of the parallel transport with the starting\n    point at the origin that can be computed more efficiently and more\n    numerically stable.\n\n    Parameters\n    ----------\n    y : tensor\n        target point\n    v : tensor\n        vector to be transported from the origin to y\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"\n    return _parallel_transport0(y, v, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the parallel transport of :math:`v` from the origin :math:`0` to :math:`y`.\n\n    This is just a special case of the parallel transport with the starting\n    point at the origin that can be computed more efficiently and more\n    numerically stable.\n\n    Parameters\n    ----------\n    y : tensor\n        target point\n    v : tensor\n        vector to be transported from the origin to y\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the parallel transport of :math:`v` from the origin :math:`0` to :math:`y`.\n\n    This is just a special case of the parallel transport with the starting\n    point at the origin that can be computed more efficiently and more\n    numerically stable.\n\n    Parameters\n    ----------\n    y : tensor\n        target point\n    v : tensor\n        vector to be transported from the origin to y\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _parallel_transport0(y, v, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_parallel_transport0(y, v, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_parallel_transport0",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(y, v, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "v",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _parallel_transport0(\n    y: torch.Tensor, v: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    return v * (1 + k * y.pow(2).sum(dim=dim, keepdim=True)).clamp_min(1e-15)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _parallel_transport0(\n    y: torch.Tensor, v: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    return v * (1 + k * y.pow(2).sum(dim=dim, keepdim=True)).clamp_min(1e-15)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_parallel_transport0",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(\n    y: torch.Tensor, v: torch.Tensor, k: torch.Tensor, dim: int = -1\n)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "y: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "y",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "v: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "v",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "return v * (1 + k * y.pow(2).sum(dim=dim, keepdim=True)).clamp_min(1e-15)",
              "children": [
                {
                  "type": "return_statement",
                  "text": "return v * (1 + k * y.pow(2).sum(dim=dim, keepdim=True)).clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "v * (1 + k * y.pow(2).sum(dim=dim, keepdim=True)).clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "v",
                          "children": []
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "(1 + k * y.pow(2).sum(dim=dim, keepdim=True)).clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "(1 + k * y.pow(2).sum(dim=dim, keepdim=True)).clamp_min",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(1 + k * y.pow(2).sum(dim=dim, keepdim=True))",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "1 + k * y.pow(2).sum(dim=dim, keepdim=True)",
                                      "children": [
                                        {
                                          "type": "integer",
                                          "text": "1",
                                          "children": []
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "k * y.pow(2).sum(dim=dim, keepdim=True)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "k",
                                              "children": []
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "call",
                                              "text": "y.pow(2).sum(dim=dim, keepdim=True)",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "y.pow(2).sum",
                                                  "children": [
                                                    {
                                                      "type": "call",
                                                      "text": "y.pow(2)",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "text": "y.pow",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "y",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "pow",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(2)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "2",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "sum",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(dim=dim, keepdim=True)",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "keyword_argument",
                                                      "text": "dim=dim",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "dim",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "=",
                                                          "text": "=",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "dim",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ",",
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "keyword_argument",
                                                      "text": "keepdim=True",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "keepdim",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "=",
                                                          "text": "=",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "true",
                                                          "text": "True",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(1e-15)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "1e-15",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def parallel_transport0back(\n    x: torch.Tensor, v: torch.Tensor, *, k: torch.Tensor, dim: int = -1\n):\n    r\"\"\"\n    Perform parallel transport to the zero point.\n\n    Special case parallel transport with last point at zero that\n    can be computed more efficiently and numerically stable\n\n    Parameters\n    ----------\n    x : tensor\n        target point\n    v : tensor\n        vector to be transported\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"\n    return _parallel_transport0back(x, v, k=k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "parallel_transport0back",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(\n    x: torch.Tensor, v: torch.Tensor, *, k: torch.Tensor, dim: int = -1\n)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "v: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "v",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Perform parallel transport to the zero point.\n\n    Special case parallel transport with last point at zero that\n    can be computed more efficiently and numerically stable\n\n    Parameters\n    ----------\n    x : tensor\n        target point\n    v : tensor\n        vector to be transported\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"\n    return _parallel_transport0back(x, v, k=k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Perform parallel transport to the zero point.\n\n    Special case parallel transport with last point at zero that\n    can be computed more efficiently and numerically stable\n\n    Parameters\n    ----------\n    x : tensor\n        target point\n    v : tensor\n        vector to be transported\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Perform parallel transport to the zero point.\n\n    Special case parallel transport with last point at zero that\n    can be computed more efficiently and numerically stable\n\n    Parameters\n    ----------\n    x : tensor\n        target point\n    v : tensor\n        vector to be transported\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _parallel_transport0back(x, v, k=k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_parallel_transport0back(x, v, k=k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_parallel_transport0back",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, v, k=k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "v",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "k=k",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "k",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "k",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _parallel_transport0back(\n    x: torch.Tensor, v: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    return v / (1 + k * x.pow(2).sum(dim=dim, keepdim=True)).clamp_min(1e-15)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _parallel_transport0back(\n    x: torch.Tensor, v: torch.Tensor, k: torch.Tensor, dim: int = -1\n):\n    return v / (1 + k * x.pow(2).sum(dim=dim, keepdim=True)).clamp_min(1e-15)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_parallel_transport0back",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(\n    x: torch.Tensor, v: torch.Tensor, k: torch.Tensor, dim: int = -1\n)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "v: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "v",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "return v / (1 + k * x.pow(2).sum(dim=dim, keepdim=True)).clamp_min(1e-15)",
              "children": [
                {
                  "type": "return_statement",
                  "text": "return v / (1 + k * x.pow(2).sum(dim=dim, keepdim=True)).clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "v / (1 + k * x.pow(2).sum(dim=dim, keepdim=True)).clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "v",
                          "children": []
                        },
                        {
                          "type": "/",
                          "text": "/",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "(1 + k * x.pow(2).sum(dim=dim, keepdim=True)).clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "(1 + k * x.pow(2).sum(dim=dim, keepdim=True)).clamp_min",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(1 + k * x.pow(2).sum(dim=dim, keepdim=True))",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "1 + k * x.pow(2).sum(dim=dim, keepdim=True)",
                                      "children": [
                                        {
                                          "type": "integer",
                                          "text": "1",
                                          "children": []
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "k * x.pow(2).sum(dim=dim, keepdim=True)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "k",
                                              "children": []
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "call",
                                              "text": "x.pow(2).sum(dim=dim, keepdim=True)",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "x.pow(2).sum",
                                                  "children": [
                                                    {
                                                      "type": "call",
                                                      "text": "x.pow(2)",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "text": "x.pow",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "x",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "pow",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(2)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "2",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "sum",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(dim=dim, keepdim=True)",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "keyword_argument",
                                                      "text": "dim=dim",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "dim",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "=",
                                                          "text": "=",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "dim",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ",",
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "keyword_argument",
                                                      "text": "keepdim=True",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "keepdim",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "=",
                                                          "text": "=",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "true",
                                                          "text": "True",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(1e-15)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "1e-15",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def egrad2rgrad(x: torch.Tensor, grad: torch.Tensor, *, k: torch.Tensor, dim=-1):\n    r\"\"\"\n    Convert the Euclidean gradient to the Riemannian gradient.\n\n    .. math::\n\n        \\nabla_x = \\nabla^E_x / (\\lambda_x^\\kappa)^2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    grad : tensor\n        Euclidean gradient for :math:`x`\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Riemannian gradient :math:`u\\in T_x\\mathcal{M}_\\kappa^n`\n    \"\"\"\n    return _egrad2rgrad(x, grad, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "egrad2rgrad",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x: torch.Tensor, grad: torch.Tensor, *, k: torch.Tensor, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "grad: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "grad",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Convert the Euclidean gradient to the Riemannian gradient.\n\n    .. math::\n\n        \\nabla_x = \\nabla^E_x / (\\lambda_x^\\kappa)^2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    grad : tensor\n        Euclidean gradient for :math:`x`\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Riemannian gradient :math:`u\\in T_x\\mathcal{M}_\\kappa^n`\n    \"\"\"\n    return _egrad2rgrad(x, grad, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Convert the Euclidean gradient to the Riemannian gradient.\n\n    .. math::\n\n        \\nabla_x = \\nabla^E_x / (\\lambda_x^\\kappa)^2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    grad : tensor\n        Euclidean gradient for :math:`x`\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Riemannian gradient :math:`u\\in T_x\\mathcal{M}_\\kappa^n`\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Convert the Euclidean gradient to the Riemannian gradient.\n\n    .. math::\n\n        \\nabla_x = \\nabla^E_x / (\\lambda_x^\\kappa)^2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    grad : tensor\n        Euclidean gradient for :math:`x`\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Riemannian gradient :math:`u\\in T_x\\mathcal{M}_\\kappa^n`\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _egrad2rgrad(x, grad, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_egrad2rgrad(x, grad, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_egrad2rgrad",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, grad, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "grad",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _egrad2rgrad(x: torch.Tensor, grad: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    return grad / _lambda_x(x, k, keepdim=True, dim=dim) ** 2",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _egrad2rgrad(x: torch.Tensor, grad: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    return grad / _lambda_x(x, k, keepdim=True, dim=dim) ** 2",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_egrad2rgrad",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, grad: torch.Tensor, k: torch.Tensor, dim: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "grad: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "grad",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "return grad / _lambda_x(x, k, keepdim=True, dim=dim) ** 2",
              "children": [
                {
                  "type": "return_statement",
                  "text": "return grad / _lambda_x(x, k, keepdim=True, dim=dim) ** 2",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "grad / _lambda_x(x, k, keepdim=True, dim=dim) ** 2",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "grad",
                          "children": []
                        },
                        {
                          "type": "/",
                          "text": "/",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "_lambda_x(x, k, keepdim=True, dim=dim) ** 2",
                          "children": [
                            {
                              "type": "call",
                              "text": "_lambda_x(x, k, keepdim=True, dim=dim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "_lambda_x",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(x, k, keepdim=True, dim=dim)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=True",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "true",
                                          "text": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "**",
                              "text": "**",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "2",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def sproj(x: torch.Tensor, *, k: torch.Tensor, dim: int = -1):\n    \"\"\"\n    Stereographic Projection from hyperboloid or sphere.\n\n    Parameters\n    ----------\n    x : tensor\n        point to be projected\n    k : tensor\n        constant sectional curvature\n    dim : int\n        dimension to operate on\n\n    Returns\n    -------\n    tensor\n        the result of the projection\n    \"\"\"\n    return _sproj(x, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "sproj",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x: torch.Tensor, *, k: torch.Tensor, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "\"\"\"\n    Stereographic Projection from hyperboloid or sphere.\n\n    Parameters\n    ----------\n    x : tensor\n        point to be projected\n    k : tensor\n        constant sectional curvature\n    dim : int\n        dimension to operate on\n\n    Returns\n    -------\n    tensor\n        the result of the projection\n    \"\"\"\n    return _sproj(x, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "\"\"\"\n    Stereographic Projection from hyperboloid or sphere.\n\n    Parameters\n    ----------\n    x : tensor\n        point to be projected\n    k : tensor\n        constant sectional curvature\n    dim : int\n        dimension to operate on\n\n    Returns\n    -------\n    tensor\n        the result of the projection\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "\"\"\"\n    Stereographic Projection from hyperboloid or sphere.\n\n    Parameters\n    ----------\n    x : tensor\n        point to be projected\n    k : tensor\n        constant sectional curvature\n    dim : int\n        dimension to operate on\n\n    Returns\n    -------\n    tensor\n        the result of the projection\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _sproj(x, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_sproj(x, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_sproj",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _sproj(x: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    inv_r = torch.sqrt(sabs(k))\n    factor = 1.0 / (1.0 + inv_r * x.narrow(dim, -1, 1))\n    proj = factor * x.narrow(dim, 0, x.size(dim) - 1)\n    return proj",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _sproj(x: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    inv_r = torch.sqrt(sabs(k))\n    factor = 1.0 / (1.0 + inv_r * x.narrow(dim, -1, 1))\n    proj = factor * x.narrow(dim, 0, x.size(dim) - 1)\n    return proj",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_sproj",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, k: torch.Tensor, dim: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "inv_r = torch.sqrt(sabs(k))\n    factor = 1.0 / (1.0 + inv_r * x.narrow(dim, -1, 1))\n    proj = factor * x.narrow(dim, 0, x.size(dim) - 1)\n    return proj",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "inv_r = torch.sqrt(sabs(k))",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "inv_r = torch.sqrt(sabs(k))",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "inv_r",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.sqrt(sabs(k))",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.sqrt",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sqrt",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(sabs(k))",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "sabs(k)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "sabs",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(k)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "factor = 1.0 / (1.0 + inv_r * x.narrow(dim, -1, 1))",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "factor = 1.0 / (1.0 + inv_r * x.narrow(dim, -1, 1))",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "factor",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "1.0 / (1.0 + inv_r * x.narrow(dim, -1, 1))",
                          "children": [
                            {
                              "type": "float",
                              "text": "1.0",
                              "children": []
                            },
                            {
                              "type": "/",
                              "text": "/",
                              "children": []
                            },
                            {
                              "type": "parenthesized_expression",
                              "text": "(1.0 + inv_r * x.narrow(dim, -1, 1))",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "1.0 + inv_r * x.narrow(dim, -1, 1)",
                                  "children": [
                                    {
                                      "type": "float",
                                      "text": "1.0",
                                      "children": []
                                    },
                                    {
                                      "type": "+",
                                      "text": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "inv_r * x.narrow(dim, -1, 1)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "inv_r",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "x.narrow(dim, -1, 1)",
                                          "children": [
                                            {
                                              "type": "attribute",
                                              "text": "x.narrow",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": ".",
                                                  "text": ".",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "narrow",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(dim, -1, 1)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "dim",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "unary_operator",
                                                  "text": "-1",
                                                  "children": [
                                                    {
                                                      "type": "-",
                                                      "text": "-",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "text": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "1",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "proj = factor * x.narrow(dim, 0, x.size(dim) - 1)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "proj = factor * x.narrow(dim, 0, x.size(dim) - 1)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "proj",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "factor * x.narrow(dim, 0, x.size(dim) - 1)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "factor",
                              "children": []
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "x.narrow(dim, 0, x.size(dim) - 1)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "x.narrow",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "narrow",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim, 0, x.size(dim) - 1)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "0",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "x.size(dim) - 1",
                                      "children": [
                                        {
                                          "type": "call",
                                          "text": "x.size(dim)",
                                          "children": [
                                            {
                                              "type": "attribute",
                                              "text": "x.size",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                },
                                                {
                                                  "type": ".",
                                                  "text": ".",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "size",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(dim)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "dim",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return proj",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "proj",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def inv_sproj(x: torch.Tensor, *, k: torch.Tensor, dim: int = -1):\n    \"\"\"\n    Inverse of Stereographic Projection to hyperboloid or sphere.\n\n    Parameters\n    ----------\n    x : tensor\n        point to be projected\n    k : tensor\n        constant sectional curvature\n    dim : int\n        dimension to operate on\n\n    Returns\n    -------\n    tensor\n        the result of the projection\n    \"\"\"\n    return _inv_sproj(x, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "inv_sproj",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x: torch.Tensor, *, k: torch.Tensor, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "\"\"\"\n    Inverse of Stereographic Projection to hyperboloid or sphere.\n\n    Parameters\n    ----------\n    x : tensor\n        point to be projected\n    k : tensor\n        constant sectional curvature\n    dim : int\n        dimension to operate on\n\n    Returns\n    -------\n    tensor\n        the result of the projection\n    \"\"\"\n    return _inv_sproj(x, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "\"\"\"\n    Inverse of Stereographic Projection to hyperboloid or sphere.\n\n    Parameters\n    ----------\n    x : tensor\n        point to be projected\n    k : tensor\n        constant sectional curvature\n    dim : int\n        dimension to operate on\n\n    Returns\n    -------\n    tensor\n        the result of the projection\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "\"\"\"\n    Inverse of Stereographic Projection to hyperboloid or sphere.\n\n    Parameters\n    ----------\n    x : tensor\n        point to be projected\n    k : tensor\n        constant sectional curvature\n    dim : int\n        dimension to operate on\n\n    Returns\n    -------\n    tensor\n        the result of the projection\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _inv_sproj(x, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_inv_sproj(x, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_inv_sproj",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _inv_sproj(x: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    inv_r = torch.sqrt(sabs(k))\n    lam_x = _lambda_x(x, k, keepdim=True, dim=dim)\n    A = lam_x * x\n    B = 1.0 / inv_r * (lam_x - 1.0)\n    proj = torch.cat((A, B), dim=dim)\n    return proj",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _inv_sproj(x: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    inv_r = torch.sqrt(sabs(k))\n    lam_x = _lambda_x(x, k, keepdim=True, dim=dim)\n    A = lam_x * x\n    B = 1.0 / inv_r * (lam_x - 1.0)\n    proj = torch.cat((A, B), dim=dim)\n    return proj",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_inv_sproj",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, k: torch.Tensor, dim: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "inv_r = torch.sqrt(sabs(k))\n    lam_x = _lambda_x(x, k, keepdim=True, dim=dim)\n    A = lam_x * x\n    B = 1.0 / inv_r * (lam_x - 1.0)\n    proj = torch.cat((A, B), dim=dim)\n    return proj",
              "children": [
                {
                  "type": "expression_statement",
                  "text": "inv_r = torch.sqrt(sabs(k))",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "inv_r = torch.sqrt(sabs(k))",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "inv_r",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.sqrt(sabs(k))",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.sqrt",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sqrt",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(sabs(k))",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "sabs(k)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "sabs",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(k)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "lam_x = _lambda_x(x, k, keepdim=True, dim=dim)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "lam_x = _lambda_x(x, k, keepdim=True, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "lam_x",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "_lambda_x(x, k, keepdim=True, dim=dim)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_lambda_x",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(x, k, keepdim=True, dim=dim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "A = lam_x * x",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "A = lam_x * x",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "A",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "lam_x * x",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "lam_x",
                              "children": []
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "B = 1.0 / inv_r * (lam_x - 1.0)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "B = 1.0 / inv_r * (lam_x - 1.0)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "B",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "1.0 / inv_r * (lam_x - 1.0)",
                          "children": [
                            {
                              "type": "binary_operator",
                              "text": "1.0 / inv_r",
                              "children": [
                                {
                                  "type": "float",
                                  "text": "1.0",
                                  "children": []
                                },
                                {
                                  "type": "/",
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "inv_r",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "parenthesized_expression",
                              "text": "(lam_x - 1.0)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "lam_x - 1.0",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "lam_x",
                                      "children": []
                                    },
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "float",
                                      "text": "1.0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "proj = torch.cat((A, B), dim=dim)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "proj = torch.cat((A, B), dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "proj",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.cat((A, B), dim=dim)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.cat",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "cat",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "((A, B), dim=dim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "tuple",
                                  "text": "(A, B)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "A",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "B",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return proj",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "proj",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def antipode(x: torch.Tensor, *, k: torch.Tensor, dim: int = -1):\n    r\"\"\"\n    Compute the antipode of a point :math:`x_1,...,x_n` for :math:`\\kappa > 0`.\n\n    Let :math:`x` be a point on some sphere. Then :math:`-x` is its antipode.\n    Since we're dealing with stereographic projections, for :math:`sproj(x)` we\n    get the antipode :math:`sproj(-x)`. Which is given as follows:\n\n    .. math::\n\n        \\text{antipode}(x)\n        =\n        \\frac{1+\\kappa\\|x\\|^2_2}{2\\kappa\\|x\\|^2_2}{}(-x)\n\n    Parameters\n    ----------\n    x : tensor\n        points :math:`x_1,...,x_n` on manifold to compute antipode for\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        antipode\n    \"\"\"\n    return _antipode(x, k, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "antipode",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x: torch.Tensor, *, k: torch.Tensor, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "x: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "x",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute the antipode of a point :math:`x_1,...,x_n` for :math:`\\kappa > 0`.\n\n    Let :math:`x` be a point on some sphere. Then :math:`-x` is its antipode.\n    Since we're dealing with stereographic projections, for :math:`sproj(x)` we\n    get the antipode :math:`sproj(-x)`. Which is given as follows:\n\n    .. math::\n\n        \\text{antipode}(x)\n        =\n        \\frac{1+\\kappa\\|x\\|^2_2}{2\\kappa\\|x\\|^2_2}{}(-x)\n\n    Parameters\n    ----------\n    x : tensor\n        points :math:`x_1,...,x_n` on manifold to compute antipode for\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        antipode\n    \"\"\"\n    return _antipode(x, k, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute the antipode of a point :math:`x_1,...,x_n` for :math:`\\kappa > 0`.\n\n    Let :math:`x` be a point on some sphere. Then :math:`-x` is its antipode.\n    Since we're dealing with stereographic projections, for :math:`sproj(x)` we\n    get the antipode :math:`sproj(-x)`. Which is given as follows:\n\n    .. math::\n\n        \\text{antipode}(x)\n        =\n        \\frac{1+\\kappa\\|x\\|^2_2}{2\\kappa\\|x\\|^2_2}{}(-x)\n\n    Parameters\n    ----------\n    x : tensor\n        points :math:`x_1,...,x_n` on manifold to compute antipode for\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        antipode\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute the antipode of a point :math:`x_1,...,x_n` for :math:`\\kappa > 0`.\n\n    Let :math:`x` be a point on some sphere. Then :math:`-x` is its antipode.\n    Since we're dealing with stereographic projections, for :math:`sproj(x)` we\n    get the antipode :math:`sproj(-x)`. Which is given as follows:\n\n    .. math::\n\n        \\text{antipode}(x)\n        =\n        \\frac{1+\\kappa\\|x\\|^2_2}{2\\kappa\\|x\\|^2_2}{}(-x)\n\n    Parameters\n    ----------\n    x : tensor\n        points :math:`x_1,...,x_n` on manifold to compute antipode for\n    k : tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        antipode\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _antipode(x, k, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_antipode(x, k, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_antipode",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, k, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "k",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _antipode(x: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    # NOTE: implementation that uses stereographic projections seems to be less accurate\n    # sproj(-inv_sproj(x))\n    if torch.all(k.le(0)):\n        return -x\n    v = x / x.norm(p=2, dim=dim, keepdim=True).clamp_min(1e-15)\n    R = sabs(k).sqrt().reciprocal()\n    pi = 3.141592653589793\n\n    a = _geodesic_unit(pi * R, x, v, k, dim=dim)\n    return torch.where(k.gt(0), a, -x)",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _antipode(x: torch.Tensor, k: torch.Tensor, dim: int = -1):\n    # NOTE: implementation that uses stereographic projections seems to be less accurate\n    # sproj(-inv_sproj(x))\n    if torch.all(k.le(0)):\n        return -x\n    v = x / x.norm(p=2, dim=dim, keepdim=True).clamp_min(1e-15)\n    R = sabs(k).sqrt().reciprocal()\n    pi = 3.141592653589793\n\n    a = _geodesic_unit(pi * R, x, v, k, dim=dim)\n    return torch.where(k.gt(0), a, -x)",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_antipode",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(x: torch.Tensor, k: torch.Tensor, dim: int = -1)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "x: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "comment",
              "text": "# NOTE: implementation that uses stereographic projections seems to be less accurate",
              "children": []
            },
            {
              "type": "comment",
              "text": "# sproj(-inv_sproj(x))",
              "children": []
            },
            {
              "type": "block",
              "text": "if torch.all(k.le(0)):\n        return -x\n    v = x / x.norm(p=2, dim=dim, keepdim=True).clamp_min(1e-15)\n    R = sabs(k).sqrt().reciprocal()\n    pi = 3.141592653589793\n\n    a = _geodesic_unit(pi * R, x, v, k, dim=dim)\n    return torch.where(k.gt(0), a, -x)",
              "children": [
                {
                  "type": "if_statement",
                  "text": "if torch.all(k.le(0)):\n        return -x",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.all(k.le(0))",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.all",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "all",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(k.le(0))",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "k.le(0)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "k.le",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "le",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(0)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "0",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return -x",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return -x",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "unary_operator",
                              "text": "-x",
                              "children": [
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "v = x / x.norm(p=2, dim=dim, keepdim=True).clamp_min(1e-15)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "v = x / x.norm(p=2, dim=dim, keepdim=True).clamp_min(1e-15)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "v",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "x / x.norm(p=2, dim=dim, keepdim=True).clamp_min(1e-15)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": "/",
                              "text": "/",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "x.norm(p=2, dim=dim, keepdim=True).clamp_min(1e-15)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "x.norm(p=2, dim=dim, keepdim=True).clamp_min",
                                  "children": [
                                    {
                                      "type": "call",
                                      "text": "x.norm(p=2, dim=dim, keepdim=True)",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "x.norm",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "norm",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(p=2, dim=dim, keepdim=True)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "keyword_argument",
                                              "text": "p=2",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "p",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "2",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "keyword_argument",
                                              "text": "dim=dim",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "dim",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "dim",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "keyword_argument",
                                              "text": "keepdim=True",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "keepdim",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "true",
                                                  "text": "True",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "clamp_min",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(1e-15)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "float",
                                      "text": "1e-15",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "R = sabs(k).sqrt().reciprocal()",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "R = sabs(k).sqrt().reciprocal()",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "R",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "sabs(k).sqrt().reciprocal()",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "sabs(k).sqrt().reciprocal",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "sabs(k).sqrt()",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "sabs(k).sqrt",
                                      "children": [
                                        {
                                          "type": "call",
                                          "text": "sabs(k)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "sabs",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(k)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "k",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "sqrt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "reciprocal",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "()",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "pi = 3.141592653589793",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "pi = 3.141592653589793",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "pi",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "float",
                          "text": "3.141592653589793",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "a = _geodesic_unit(pi * R, x, v, k, dim=dim)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "a = _geodesic_unit(pi * R, x, v, k, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "a",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "_geodesic_unit(pi * R, x, v, k, dim=dim)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_geodesic_unit",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(pi * R, x, v, k, dim=dim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "pi * R",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "pi",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "R",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "v",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "k",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return torch.where(k.gt(0), a, -x)",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.where(k.gt(0), a, -x)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.where",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "where",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(k.gt(0), a, -x)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "k.gt(0)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "k.gt",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "gt",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(0)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "0",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "a",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "unary_operator",
                              "text": "-x",
                              "children": [
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def weighted_midpoint(\n    xs: torch.Tensor,\n    weights: Optional[torch.Tensor] = None,\n    *,\n    k: torch.Tensor,\n    reducedim: Optional[List[int]] = None,\n    dim: int = -1,\n    keepdim: bool = False,\n    lincomb: bool = False,\n    posweight: bool = False,\n):\n    r\"\"\"\n    Compute weighted Möbius gyromidpoint.\n\n    The weighted Möbius gyromidpoint of a set of points\n    :math:`x_1,...,x_n` according to weights\n    :math:`\\alpha_1,...,\\alpha_n` is computed as follows:\n\n    The weighted Möbius gyromidpoint is computed as follows\n\n    .. math::\n\n        m_{\\kappa}(x_1,\\ldots,x_n,\\alpha_1,\\ldots,\\alpha_n)\n        =\n        \\frac{1}{2}\n        \\otimes_\\kappa\n        \\left(\n        \\sum_{i=1}^n\n        \\frac{\n        \\alpha_i\\lambda_{x_i}^\\kappa\n        }{\n        \\sum_{j=1}^n\\alpha_j(\\lambda_{x_j}^\\kappa-1)\n        }\n        x_i\n        \\right)\n\n    where the weights :math:`\\alpha_1,...,\\alpha_n` do not necessarily need\n    to sum to 1 (only their relative weight matters). Note that this formula\n    also requires to choose between the midpoint and its antipode for\n    :math:`\\kappa > 0`.\n\n    Parameters\n    ----------\n    xs : tensor\n        points on poincare ball\n    weights : tensor\n        weights for averaging (make sure they broadcast correctly and manifold dimension is skipped)\n    reducedim : int|list|tuple\n        reduce dimension\n    dim : int\n        dimension to calculate conformal and Lorenz factors\n    k : tensor\n        constant sectional curvature\n    keepdim : bool\n        retain the last dim? (default: false)\n    lincomb : bool\n        linear combination implementation\n    posweight : bool\n        make all weights positive. Negative weight will weight antipode of entry with positive weight instead.\n        This will give experimentally better numerics and nice interpolation\n        properties for linear combination and averaging\n\n    Returns\n    -------\n    tensor\n        Einstein midpoint in poincare coordinates\n    \"\"\"\n    return _weighted_midpoint(\n        xs=xs,\n        k=k,\n        weights=weights,\n        reducedim=reducedim,\n        dim=dim,\n        keepdim=keepdim,\n        lincomb=lincomb,\n        posweight=posweight,\n    )",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "weighted_midpoint",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(\n    xs: torch.Tensor,\n    weights: Optional[torch.Tensor] = None,\n    *,\n    k: torch.Tensor,\n    reducedim: Optional[List[int]] = None,\n    dim: int = -1,\n    keepdim: bool = False,\n    lincomb: bool = False,\n    posweight: bool = False,\n)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "xs: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "xs",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "weights: Optional[torch.Tensor] = None",
              "children": [
                {
                  "type": "identifier",
                  "text": "weights",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "Optional[torch.Tensor]",
                  "children": [
                    {
                      "type": "subscript",
                      "text": "Optional[torch.Tensor]",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "Optional",
                          "children": []
                        },
                        {
                          "type": "[",
                          "text": "[",
                          "children": []
                        },
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "]",
                          "text": "]",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "none",
                  "text": "None",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_parameter",
              "text": "k: torch.Tensor",
              "children": [
                {
                  "type": "identifier",
                  "text": "k",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "torch.Tensor",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "Tensor",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "reducedim: Optional[List[int]] = None",
              "children": [
                {
                  "type": "identifier",
                  "text": "reducedim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "Optional[List[int]]",
                  "children": [
                    {
                      "type": "subscript",
                      "text": "Optional[List[int]]",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "Optional",
                          "children": []
                        },
                        {
                          "type": "[",
                          "text": "[",
                          "children": []
                        },
                        {
                          "type": "subscript",
                          "text": "List[int]",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "List",
                              "children": []
                            },
                            {
                              "type": "[",
                              "text": "[",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "int",
                              "children": []
                            },
                            {
                              "type": "]",
                              "text": "]",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "]",
                          "text": "]",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "none",
                  "text": "None",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "keepdim: bool = False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "bool",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "lincomb: bool = False",
              "children": [
                {
                  "type": "identifier",
                  "text": "lincomb",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "bool",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "posweight: bool = False",
              "children": [
                {
                  "type": "identifier",
                  "text": "posweight",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "bool",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Compute weighted Möbius gyromidpoint.\n\n    The weighted Möbius gyromidpoint of a set of points\n    :math:`x_1,...,x_n` according to weights\n    :math:`\\alpha_1,...,\\alpha_n` is computed as follows:\n\n    The weighted Möbius gyromidpoint is computed as follows\n\n    .. math::\n\n        m_{\\kappa}(x_1,\\ldots,x_n,\\alpha_1,\\ldots,\\alpha_n)\n        =\n        \\frac{1}{2}\n        \\otimes_\\kappa\n        \\left(\n        \\sum_{i=1}^n\n        \\frac{\n        \\alpha_i\\lambda_{x_i}^\\kappa\n        }{\n        \\sum_{j=1}^n\\alpha_j(\\lambda_{x_j}^\\kappa-1)\n        }\n        x_i\n        \\right)\n\n    where the weights :math:`\\alpha_1,...,\\alpha_n` do not necessarily need\n    to sum to 1 (only their relative weight matters). Note that this formula\n    also requires to choose between the midpoint and its antipode for\n    :math:`\\kappa > 0`.\n\n    Parameters\n    ----------\n    xs : tensor\n        points on poincare ball\n    weights : tensor\n        weights for averaging (make sure they broadcast correctly and manifold dimension is skipped)\n    reducedim : int|list|tuple\n        reduce dimension\n    dim : int\n        dimension to calculate conformal and Lorenz factors\n    k : tensor\n        constant sectional curvature\n    keepdim : bool\n        retain the last dim? (default: false)\n    lincomb : bool\n        linear combination implementation\n    posweight : bool\n        make all weights positive. Negative weight will weight antipode of entry with positive weight instead.\n        This will give experimentally better numerics and nice interpolation\n        properties for linear combination and averaging\n\n    Returns\n    -------\n    tensor\n        Einstein midpoint in poincare coordinates\n    \"\"\"\n    return _weighted_midpoint(\n        xs=xs,\n        k=k,\n        weights=weights,\n        reducedim=reducedim,\n        dim=dim,\n        keepdim=keepdim,\n        lincomb=lincomb,\n        posweight=posweight,\n    )",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Compute weighted Möbius gyromidpoint.\n\n    The weighted Möbius gyromidpoint of a set of points\n    :math:`x_1,...,x_n` according to weights\n    :math:`\\alpha_1,...,\\alpha_n` is computed as follows:\n\n    The weighted Möbius gyromidpoint is computed as follows\n\n    .. math::\n\n        m_{\\kappa}(x_1,\\ldots,x_n,\\alpha_1,\\ldots,\\alpha_n)\n        =\n        \\frac{1}{2}\n        \\otimes_\\kappa\n        \\left(\n        \\sum_{i=1}^n\n        \\frac{\n        \\alpha_i\\lambda_{x_i}^\\kappa\n        }{\n        \\sum_{j=1}^n\\alpha_j(\\lambda_{x_j}^\\kappa-1)\n        }\n        x_i\n        \\right)\n\n    where the weights :math:`\\alpha_1,...,\\alpha_n` do not necessarily need\n    to sum to 1 (only their relative weight matters). Note that this formula\n    also requires to choose between the midpoint and its antipode for\n    :math:`\\kappa > 0`.\n\n    Parameters\n    ----------\n    xs : tensor\n        points on poincare ball\n    weights : tensor\n        weights for averaging (make sure they broadcast correctly and manifold dimension is skipped)\n    reducedim : int|list|tuple\n        reduce dimension\n    dim : int\n        dimension to calculate conformal and Lorenz factors\n    k : tensor\n        constant sectional curvature\n    keepdim : bool\n        retain the last dim? (default: false)\n    lincomb : bool\n        linear combination implementation\n    posweight : bool\n        make all weights positive. Negative weight will weight antipode of entry with positive weight instead.\n        This will give experimentally better numerics and nice interpolation\n        properties for linear combination and averaging\n\n    Returns\n    -------\n    tensor\n        Einstein midpoint in poincare coordinates\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Compute weighted Möbius gyromidpoint.\n\n    The weighted Möbius gyromidpoint of a set of points\n    :math:`x_1,...,x_n` according to weights\n    :math:`\\alpha_1,...,\\alpha_n` is computed as follows:\n\n    The weighted Möbius gyromidpoint is computed as follows\n\n    .. math::\n\n        m_{\\kappa}(x_1,\\ldots,x_n,\\alpha_1,\\ldots,\\alpha_n)\n        =\n        \\frac{1}{2}\n        \\otimes_\\kappa\n        \\left(\n        \\sum_{i=1}^n\n        \\frac{\n        \\alpha_i\\lambda_{x_i}^\\kappa\n        }{\n        \\sum_{j=1}^n\\alpha_j(\\lambda_{x_j}^\\kappa-1)\n        }\n        x_i\n        \\right)\n\n    where the weights :math:`\\alpha_1,...,\\alpha_n` do not necessarily need\n    to sum to 1 (only their relative weight matters). Note that this formula\n    also requires to choose between the midpoint and its antipode for\n    :math:`\\kappa > 0`.\n\n    Parameters\n    ----------\n    xs : tensor\n        points on poincare ball\n    weights : tensor\n        weights for averaging (make sure they broadcast correctly and manifold dimension is skipped)\n    reducedim : int|list|tuple\n        reduce dimension\n    dim : int\n        dimension to calculate conformal and Lorenz factors\n    k : tensor\n        constant sectional curvature\n    keepdim : bool\n        retain the last dim? (default: false)\n    lincomb : bool\n        linear combination implementation\n    posweight : bool\n        make all weights positive. Negative weight will weight antipode of entry with positive weight instead.\n        This will give experimentally better numerics and nice interpolation\n        properties for linear combination and averaging\n\n    Returns\n    -------\n    tensor\n        Einstein midpoint in poincare coordinates\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _weighted_midpoint(\n        xs=xs,\n        k=k,\n        weights=weights,\n        reducedim=reducedim,\n        dim=dim,\n        keepdim=keepdim,\n        lincomb=lincomb,\n        posweight=posweight,\n    )",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_weighted_midpoint(\n        xs=xs,\n        k=k,\n        weights=weights,\n        reducedim=reducedim,\n        dim=dim,\n        keepdim=keepdim,\n        lincomb=lincomb,\n        posweight=posweight,\n    )",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_weighted_midpoint",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(\n        xs=xs,\n        k=k,\n        weights=weights,\n        reducedim=reducedim,\n        dim=dim,\n        keepdim=keepdim,\n        lincomb=lincomb,\n        posweight=posweight,\n    )",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "xs=xs",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "xs",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "xs",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "k=k",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "k",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "k",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "weights=weights",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "weights",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "weights",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "reducedim=reducedim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "reducedim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "reducedim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "keepdim=keepdim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "lincomb=lincomb",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "lincomb",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "lincomb",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "posweight=posweight",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "posweight",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "posweight",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "decorated_definition",
      "text": "@torch.jit.script\ndef _weighted_midpoint(\n    xs: torch.Tensor,\n    k: torch.Tensor,\n    weights: Optional[torch.Tensor] = None,\n    reducedim: Optional[List[int]] = None,\n    dim: int = -1,\n    keepdim: bool = False,\n    lincomb: bool = False,\n    posweight: bool = False,\n):\n    if reducedim is None:\n        reducedim = list_range(xs.dim())\n        reducedim.pop(dim)\n    gamma = _lambda_x(xs, k=k, dim=dim, keepdim=True)\n    if weights is None:\n        weights = torch.tensor(1.0, dtype=xs.dtype, device=xs.device)\n    else:\n        weights = weights.unsqueeze(dim)\n    if posweight and weights.lt(0).any():\n        xs = torch.where(weights.lt(0), _antipode(xs, k=k, dim=dim), xs)\n        weights = weights.abs()\n    denominator = ((gamma - 1) * weights).sum(reducedim, keepdim=True)\n    nominator = (gamma * weights * xs).sum(reducedim, keepdim=True)\n    two_mean = nominator / clamp_abs(denominator, 1e-10)\n    a_mean = _mobius_scalar_mul(\n        torch.tensor(0.5, dtype=xs.dtype, device=xs.device), two_mean, k=k, dim=dim\n    )\n    if torch.any(k.gt(0)):\n        # check antipode\n        b_mean = _antipode(a_mean, k, dim=dim)\n        a_dist = _dist(a_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )\n        b_dist = _dist(b_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )\n        better = k.gt(0) & (b_dist < a_dist)\n        a_mean = torch.where(better, b_mean, a_mean)\n    if lincomb:\n        if weights.numel() == 1:\n            alpha = weights.clone()\n            for d in reducedim:\n                alpha *= xs.size(d)\n        else:\n            weights, _ = torch.broadcast_tensors(weights, gamma)\n            alpha = weights.sum(reducedim, keepdim=True)\n        a_mean = _mobius_scalar_mul(alpha, a_mean, k=k, dim=dim)\n    if not keepdim:\n        a_mean = drop_dims(a_mean, reducedim)\n    return a_mean",
      "children": [
        {
          "type": "decorator",
          "text": "@torch.jit.script",
          "children": [
            {
              "type": "@",
              "text": "@",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.jit.script",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.jit",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "jit",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "script",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "function_definition",
          "text": "def _weighted_midpoint(\n    xs: torch.Tensor,\n    k: torch.Tensor,\n    weights: Optional[torch.Tensor] = None,\n    reducedim: Optional[List[int]] = None,\n    dim: int = -1,\n    keepdim: bool = False,\n    lincomb: bool = False,\n    posweight: bool = False,\n):\n    if reducedim is None:\n        reducedim = list_range(xs.dim())\n        reducedim.pop(dim)\n    gamma = _lambda_x(xs, k=k, dim=dim, keepdim=True)\n    if weights is None:\n        weights = torch.tensor(1.0, dtype=xs.dtype, device=xs.device)\n    else:\n        weights = weights.unsqueeze(dim)\n    if posweight and weights.lt(0).any():\n        xs = torch.where(weights.lt(0), _antipode(xs, k=k, dim=dim), xs)\n        weights = weights.abs()\n    denominator = ((gamma - 1) * weights).sum(reducedim, keepdim=True)\n    nominator = (gamma * weights * xs).sum(reducedim, keepdim=True)\n    two_mean = nominator / clamp_abs(denominator, 1e-10)\n    a_mean = _mobius_scalar_mul(\n        torch.tensor(0.5, dtype=xs.dtype, device=xs.device), two_mean, k=k, dim=dim\n    )\n    if torch.any(k.gt(0)):\n        # check antipode\n        b_mean = _antipode(a_mean, k, dim=dim)\n        a_dist = _dist(a_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )\n        b_dist = _dist(b_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )\n        better = k.gt(0) & (b_dist < a_dist)\n        a_mean = torch.where(better, b_mean, a_mean)\n    if lincomb:\n        if weights.numel() == 1:\n            alpha = weights.clone()\n            for d in reducedim:\n                alpha *= xs.size(d)\n        else:\n            weights, _ = torch.broadcast_tensors(weights, gamma)\n            alpha = weights.sum(reducedim, keepdim=True)\n        a_mean = _mobius_scalar_mul(alpha, a_mean, k=k, dim=dim)\n    if not keepdim:\n        a_mean = drop_dims(a_mean, reducedim)\n    return a_mean",
          "children": [
            {
              "type": "def",
              "text": "def",
              "children": []
            },
            {
              "type": "identifier",
              "text": "_weighted_midpoint",
              "children": []
            },
            {
              "type": "parameters",
              "text": "(\n    xs: torch.Tensor,\n    k: torch.Tensor,\n    weights: Optional[torch.Tensor] = None,\n    reducedim: Optional[List[int]] = None,\n    dim: int = -1,\n    keepdim: bool = False,\n    lincomb: bool = False,\n    posweight: bool = False,\n)",
              "children": [
                {
                  "type": "(",
                  "text": "(",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "xs: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "xs",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_parameter",
                  "text": "k: torch.Tensor",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "k",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "torch.Tensor",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.Tensor",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "Tensor",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "weights: Optional[torch.Tensor] = None",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "weights",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "Optional[torch.Tensor]",
                      "children": [
                        {
                          "type": "subscript",
                          "text": "Optional[torch.Tensor]",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "Optional",
                              "children": []
                            },
                            {
                              "type": "[",
                              "text": "[",
                              "children": []
                            },
                            {
                              "type": "attribute",
                              "text": "torch.Tensor",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "Tensor",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "]",
                              "text": "]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "none",
                      "text": "None",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "reducedim: Optional[List[int]] = None",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "reducedim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "Optional[List[int]]",
                      "children": [
                        {
                          "type": "subscript",
                          "text": "Optional[List[int]]",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "Optional",
                              "children": []
                            },
                            {
                              "type": "[",
                              "text": "[",
                              "children": []
                            },
                            {
                              "type": "subscript",
                              "text": "List[int]",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "List",
                                  "children": []
                                },
                                {
                                  "type": "[",
                                  "text": "[",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "int",
                                  "children": []
                                },
                                {
                                  "type": "]",
                                  "text": "]",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "]",
                              "text": "]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "none",
                      "text": "None",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "dim: int = -1",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "dim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "int",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_operator",
                      "text": "-1",
                      "children": [
                        {
                          "type": "-",
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "keepdim: bool = False",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "keepdim",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "bool",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "bool",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "false",
                      "text": "False",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "lincomb: bool = False",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "lincomb",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "bool",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "bool",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "false",
                      "text": "False",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "typed_default_parameter",
                  "text": "posweight: bool = False",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "posweight",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "type",
                      "text": "bool",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "bool",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "false",
                      "text": "False",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": ")",
                  "text": ")",
                  "children": []
                }
              ]
            },
            {
              "type": ":",
              "text": ":",
              "children": []
            },
            {
              "type": "block",
              "text": "if reducedim is None:\n        reducedim = list_range(xs.dim())\n        reducedim.pop(dim)\n    gamma = _lambda_x(xs, k=k, dim=dim, keepdim=True)\n    if weights is None:\n        weights = torch.tensor(1.0, dtype=xs.dtype, device=xs.device)\n    else:\n        weights = weights.unsqueeze(dim)\n    if posweight and weights.lt(0).any():\n        xs = torch.where(weights.lt(0), _antipode(xs, k=k, dim=dim), xs)\n        weights = weights.abs()\n    denominator = ((gamma - 1) * weights).sum(reducedim, keepdim=True)\n    nominator = (gamma * weights * xs).sum(reducedim, keepdim=True)\n    two_mean = nominator / clamp_abs(denominator, 1e-10)\n    a_mean = _mobius_scalar_mul(\n        torch.tensor(0.5, dtype=xs.dtype, device=xs.device), two_mean, k=k, dim=dim\n    )\n    if torch.any(k.gt(0)):\n        # check antipode\n        b_mean = _antipode(a_mean, k, dim=dim)\n        a_dist = _dist(a_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )\n        b_dist = _dist(b_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )\n        better = k.gt(0) & (b_dist < a_dist)\n        a_mean = torch.where(better, b_mean, a_mean)\n    if lincomb:\n        if weights.numel() == 1:\n            alpha = weights.clone()\n            for d in reducedim:\n                alpha *= xs.size(d)\n        else:\n            weights, _ = torch.broadcast_tensors(weights, gamma)\n            alpha = weights.sum(reducedim, keepdim=True)\n        a_mean = _mobius_scalar_mul(alpha, a_mean, k=k, dim=dim)\n    if not keepdim:\n        a_mean = drop_dims(a_mean, reducedim)\n    return a_mean",
              "children": [
                {
                  "type": "if_statement",
                  "text": "if reducedim is None:\n        reducedim = list_range(xs.dim())\n        reducedim.pop(dim)",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "comparison_operator",
                      "text": "reducedim is None",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "reducedim",
                          "children": []
                        },
                        {
                          "type": "is",
                          "text": "is",
                          "children": []
                        },
                        {
                          "type": "none",
                          "text": "None",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "reducedim = list_range(xs.dim())\n        reducedim.pop(dim)",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "reducedim = list_range(xs.dim())",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "reducedim = list_range(xs.dim())",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "reducedim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "list_range(xs.dim())",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "list_range",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(xs.dim())",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "xs.dim()",
                                          "children": [
                                            {
                                              "type": "attribute",
                                              "text": "xs.dim",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "xs",
                                                  "children": []
                                                },
                                                {
                                                  "type": ".",
                                                  "text": ".",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "dim",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "()",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "reducedim.pop(dim)",
                          "children": [
                            {
                              "type": "call",
                              "text": "reducedim.pop(dim)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "reducedim.pop",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "reducedim",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "pop",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "gamma = _lambda_x(xs, k=k, dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "gamma = _lambda_x(xs, k=k, dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "gamma",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "_lambda_x(xs, k=k, dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_lambda_x",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(xs, k=k, dim=dim, keepdim=True)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "xs",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "k=k",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if weights is None:\n        weights = torch.tensor(1.0, dtype=xs.dtype, device=xs.device)\n    else:\n        weights = weights.unsqueeze(dim)",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "comparison_operator",
                      "text": "weights is None",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "weights",
                          "children": []
                        },
                        {
                          "type": "is",
                          "text": "is",
                          "children": []
                        },
                        {
                          "type": "none",
                          "text": "None",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "weights = torch.tensor(1.0, dtype=xs.dtype, device=xs.device)",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "weights = torch.tensor(1.0, dtype=xs.dtype, device=xs.device)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "weights = torch.tensor(1.0, dtype=xs.dtype, device=xs.device)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "weights",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.tensor(1.0, dtype=xs.dtype, device=xs.device)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.tensor",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "tensor",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(1.0, dtype=xs.dtype, device=xs.device)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "float",
                                          "text": "1.0",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dtype=xs.dtype",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dtype",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "attribute",
                                              "text": "xs.dtype",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "xs",
                                                  "children": []
                                                },
                                                {
                                                  "type": ".",
                                                  "text": ".",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "dtype",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "device=xs.device",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "device",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "attribute",
                                              "text": "xs.device",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "xs",
                                                  "children": []
                                                },
                                                {
                                                  "type": ".",
                                                  "text": ".",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "device",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "else_clause",
                      "text": "else:\n        weights = weights.unsqueeze(dim)",
                      "children": [
                        {
                          "type": "else",
                          "text": "else",
                          "children": []
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "weights = weights.unsqueeze(dim)",
                          "children": [
                            {
                              "type": "expression_statement",
                              "text": "weights = weights.unsqueeze(dim)",
                              "children": [
                                {
                                  "type": "assignment",
                                  "text": "weights = weights.unsqueeze(dim)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "weights",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "call",
                                      "text": "weights.unsqueeze(dim)",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "weights.unsqueeze",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "weights",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "unsqueeze",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(dim)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if posweight and weights.lt(0).any():\n        xs = torch.where(weights.lt(0), _antipode(xs, k=k, dim=dim), xs)\n        weights = weights.abs()",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "boolean_operator",
                      "text": "posweight and weights.lt(0).any()",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "posweight",
                          "children": []
                        },
                        {
                          "type": "and",
                          "text": "and",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "weights.lt(0).any()",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "weights.lt(0).any",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "weights.lt(0)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "weights.lt",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "weights",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "lt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(0)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "0",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "any",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "()",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "xs = torch.where(weights.lt(0), _antipode(xs, k=k, dim=dim), xs)\n        weights = weights.abs()",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "xs = torch.where(weights.lt(0), _antipode(xs, k=k, dim=dim), xs)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "xs = torch.where(weights.lt(0), _antipode(xs, k=k, dim=dim), xs)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "xs",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.where(weights.lt(0), _antipode(xs, k=k, dim=dim), xs)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.where",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "where",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(weights.lt(0), _antipode(xs, k=k, dim=dim), xs)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "weights.lt(0)",
                                          "children": [
                                            {
                                              "type": "attribute",
                                              "text": "weights.lt",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "weights",
                                                  "children": []
                                                },
                                                {
                                                  "type": ".",
                                                  "text": ".",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "lt",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(0)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "0",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "_antipode(xs, k=k, dim=dim)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "_antipode",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(xs, k=k, dim=dim)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "xs",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "keyword_argument",
                                                  "text": "k=k",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "keyword_argument",
                                                  "text": "dim=dim",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "dim",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "dim",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "xs",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "weights = weights.abs()",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "weights = weights.abs()",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "weights",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "weights.abs()",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "weights.abs",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "weights",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "abs",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "denominator = ((gamma - 1) * weights).sum(reducedim, keepdim=True)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "denominator = ((gamma - 1) * weights).sum(reducedim, keepdim=True)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "denominator",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "((gamma - 1) * weights).sum(reducedim, keepdim=True)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "((gamma - 1) * weights).sum",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "((gamma - 1) * weights)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "(gamma - 1) * weights",
                                      "children": [
                                        {
                                          "type": "parenthesized_expression",
                                          "text": "(gamma - 1)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "gamma - 1",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "gamma",
                                                  "children": []
                                                },
                                                {
                                                  "type": "-",
                                                  "text": "-",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "1",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "weights",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sum",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(reducedim, keepdim=True)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "reducedim",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "nominator = (gamma * weights * xs).sum(reducedim, keepdim=True)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "nominator = (gamma * weights * xs).sum(reducedim, keepdim=True)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "nominator",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "(gamma * weights * xs).sum(reducedim, keepdim=True)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "(gamma * weights * xs).sum",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(gamma * weights * xs)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "gamma * weights * xs",
                                      "children": [
                                        {
                                          "type": "binary_operator",
                                          "text": "gamma * weights",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "gamma",
                                              "children": []
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "weights",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "xs",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sum",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(reducedim, keepdim=True)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "reducedim",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "two_mean = nominator / clamp_abs(denominator, 1e-10)",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "two_mean = nominator / clamp_abs(denominator, 1e-10)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "two_mean",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "nominator / clamp_abs(denominator, 1e-10)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "nominator",
                              "children": []
                            },
                            {
                              "type": "/",
                              "text": "/",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "clamp_abs(denominator, 1e-10)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "clamp_abs",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(denominator, 1e-10)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "denominator",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "float",
                                      "text": "1e-10",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "expression_statement",
                  "text": "a_mean = _mobius_scalar_mul(\n        torch.tensor(0.5, dtype=xs.dtype, device=xs.device), two_mean, k=k, dim=dim\n    )",
                  "children": [
                    {
                      "type": "assignment",
                      "text": "a_mean = _mobius_scalar_mul(\n        torch.tensor(0.5, dtype=xs.dtype, device=xs.device), two_mean, k=k, dim=dim\n    )",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "a_mean",
                          "children": []
                        },
                        {
                          "type": "=",
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "_mobius_scalar_mul(\n        torch.tensor(0.5, dtype=xs.dtype, device=xs.device), two_mean, k=k, dim=dim\n    )",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_mobius_scalar_mul",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(\n        torch.tensor(0.5, dtype=xs.dtype, device=xs.device), two_mean, k=k, dim=dim\n    )",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.tensor(0.5, dtype=xs.dtype, device=xs.device)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.tensor",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "tensor",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(0.5, dtype=xs.dtype, device=xs.device)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "float",
                                          "text": "0.5",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dtype=xs.dtype",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dtype",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "attribute",
                                              "text": "xs.dtype",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "xs",
                                                  "children": []
                                                },
                                                {
                                                  "type": ".",
                                                  "text": ".",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "dtype",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "device=xs.device",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "device",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "attribute",
                                              "text": "xs.device",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "xs",
                                                  "children": []
                                                },
                                                {
                                                  "type": ".",
                                                  "text": ".",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "device",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "two_mean",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "k=k",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if torch.any(k.gt(0)):\n        # check antipode\n        b_mean = _antipode(a_mean, k, dim=dim)\n        a_dist = _dist(a_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )\n        b_dist = _dist(b_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )\n        better = k.gt(0) & (b_dist < a_dist)\n        a_mean = torch.where(better, b_mean, a_mean)",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.any(k.gt(0))",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.any",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "any",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(k.gt(0))",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "k.gt(0)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "k.gt",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "k",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "gt",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(0)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "0",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "comment",
                      "text": "# check antipode",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "b_mean = _antipode(a_mean, k, dim=dim)\n        a_dist = _dist(a_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )\n        b_dist = _dist(b_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )\n        better = k.gt(0) & (b_dist < a_dist)\n        a_mean = torch.where(better, b_mean, a_mean)",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "b_mean = _antipode(a_mean, k, dim=dim)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "b_mean = _antipode(a_mean, k, dim=dim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "b_mean",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "_antipode(a_mean, k, dim=dim)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "_antipode",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(a_mean, k, dim=dim)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "a_mean",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "k",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "a_dist = _dist(a_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "a_dist = _dist(a_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "a_dist",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "_dist(a_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "_dist(a_mean, xs, k=k, keepdim=True, dim=dim).sum",
                                      "children": [
                                        {
                                          "type": "call",
                                          "text": "_dist(a_mean, xs, k=k, keepdim=True, dim=dim)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "_dist",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(a_mean, xs, k=k, keepdim=True, dim=dim)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "a_mean",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "xs",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "keyword_argument",
                                                  "text": "k=k",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "keyword_argument",
                                                  "text": "keepdim=True",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "keepdim",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "true",
                                                      "text": "True",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "keyword_argument",
                                                  "text": "dim=dim",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "dim",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "dim",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "sum",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(\n            reducedim, keepdim=True\n        )",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "reducedim",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "keepdim=True",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "true",
                                              "text": "True",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "b_dist = _dist(b_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "b_dist = _dist(b_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "b_dist",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "_dist(b_mean, xs, k=k, keepdim=True, dim=dim).sum(\n            reducedim, keepdim=True\n        )",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "_dist(b_mean, xs, k=k, keepdim=True, dim=dim).sum",
                                      "children": [
                                        {
                                          "type": "call",
                                          "text": "_dist(b_mean, xs, k=k, keepdim=True, dim=dim)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "_dist",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(b_mean, xs, k=k, keepdim=True, dim=dim)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "b_mean",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "xs",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "keyword_argument",
                                                  "text": "k=k",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "k",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "keyword_argument",
                                                  "text": "keepdim=True",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "keepdim",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "true",
                                                      "text": "True",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "keyword_argument",
                                                  "text": "dim=dim",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "dim",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "dim",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "sum",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(\n            reducedim, keepdim=True\n        )",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "reducedim",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "keepdim=True",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "keepdim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "true",
                                              "text": "True",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "better = k.gt(0) & (b_dist < a_dist)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "better = k.gt(0) & (b_dist < a_dist)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "better",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "k.gt(0) & (b_dist < a_dist)",
                                  "children": [
                                    {
                                      "type": "call",
                                      "text": "k.gt(0)",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "k.gt",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "k",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "gt",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(0)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "0",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "&",
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "parenthesized_expression",
                                      "text": "(b_dist < a_dist)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "comparison_operator",
                                          "text": "b_dist < a_dist",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "b_dist",
                                              "children": []
                                            },
                                            {
                                              "type": "<",
                                              "text": "<",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "a_dist",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "a_mean = torch.where(better, b_mean, a_mean)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "a_mean = torch.where(better, b_mean, a_mean)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "a_mean",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.where(better, b_mean, a_mean)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.where",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "where",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(better, b_mean, a_mean)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "better",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "b_mean",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "a_mean",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if lincomb:\n        if weights.numel() == 1:\n            alpha = weights.clone()\n            for d in reducedim:\n                alpha *= xs.size(d)\n        else:\n            weights, _ = torch.broadcast_tensors(weights, gamma)\n            alpha = weights.sum(reducedim, keepdim=True)\n        a_mean = _mobius_scalar_mul(alpha, a_mean, k=k, dim=dim)",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "lincomb",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "if weights.numel() == 1:\n            alpha = weights.clone()\n            for d in reducedim:\n                alpha *= xs.size(d)\n        else:\n            weights, _ = torch.broadcast_tensors(weights, gamma)\n            alpha = weights.sum(reducedim, keepdim=True)\n        a_mean = _mobius_scalar_mul(alpha, a_mean, k=k, dim=dim)",
                      "children": [
                        {
                          "type": "if_statement",
                          "text": "if weights.numel() == 1:\n            alpha = weights.clone()\n            for d in reducedim:\n                alpha *= xs.size(d)\n        else:\n            weights, _ = torch.broadcast_tensors(weights, gamma)\n            alpha = weights.sum(reducedim, keepdim=True)",
                          "children": [
                            {
                              "type": "if",
                              "text": "if",
                              "children": []
                            },
                            {
                              "type": "comparison_operator",
                              "text": "weights.numel() == 1",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "weights.numel()",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "weights.numel",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "weights",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "numel",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "==",
                                  "text": "==",
                                  "children": []
                                },
                                {
                                  "type": "integer",
                                  "text": "1",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ":",
                              "text": ":",
                              "children": []
                            },
                            {
                              "type": "block",
                              "text": "alpha = weights.clone()\n            for d in reducedim:\n                alpha *= xs.size(d)",
                              "children": [
                                {
                                  "type": "expression_statement",
                                  "text": "alpha = weights.clone()",
                                  "children": [
                                    {
                                      "type": "assignment",
                                      "text": "alpha = weights.clone()",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "alpha",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "weights.clone()",
                                          "children": [
                                            {
                                              "type": "attribute",
                                              "text": "weights.clone",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "weights",
                                                  "children": []
                                                },
                                                {
                                                  "type": ".",
                                                  "text": ".",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "clone",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "()",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "for_statement",
                                  "text": "for d in reducedim:\n                alpha *= xs.size(d)",
                                  "children": [
                                    {
                                      "type": "for",
                                      "text": "for",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "d",
                                      "children": []
                                    },
                                    {
                                      "type": "in",
                                      "text": "in",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "reducedim",
                                      "children": []
                                    },
                                    {
                                      "type": ":",
                                      "text": ":",
                                      "children": []
                                    },
                                    {
                                      "type": "block",
                                      "text": "alpha *= xs.size(d)",
                                      "children": [
                                        {
                                          "type": "expression_statement",
                                          "text": "alpha *= xs.size(d)",
                                          "children": [
                                            {
                                              "type": "augmented_assignment",
                                              "text": "alpha *= xs.size(d)",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "alpha",
                                                  "children": []
                                                },
                                                {
                                                  "type": "*=",
                                                  "text": "*=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "call",
                                                  "text": "xs.size(d)",
                                                  "children": [
                                                    {
                                                      "type": "attribute",
                                                      "text": "xs.size",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "xs",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": ".",
                                                          "text": ".",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "size",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "argument_list",
                                                      "text": "(d)",
                                                      "children": [
                                                        {
                                                          "type": "(",
                                                          "text": "(",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "d",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": ")",
                                                          "text": ")",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "else_clause",
                              "text": "else:\n            weights, _ = torch.broadcast_tensors(weights, gamma)\n            alpha = weights.sum(reducedim, keepdim=True)",
                              "children": [
                                {
                                  "type": "else",
                                  "text": "else",
                                  "children": []
                                },
                                {
                                  "type": ":",
                                  "text": ":",
                                  "children": []
                                },
                                {
                                  "type": "block",
                                  "text": "weights, _ = torch.broadcast_tensors(weights, gamma)\n            alpha = weights.sum(reducedim, keepdim=True)",
                                  "children": [
                                    {
                                      "type": "expression_statement",
                                      "text": "weights, _ = torch.broadcast_tensors(weights, gamma)",
                                      "children": [
                                        {
                                          "type": "assignment",
                                          "text": "weights, _ = torch.broadcast_tensors(weights, gamma)",
                                          "children": [
                                            {
                                              "type": "pattern_list",
                                              "text": "weights, _",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "weights",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "_",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "call",
                                              "text": "torch.broadcast_tensors(weights, gamma)",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "torch.broadcast_tensors",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "torch",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "broadcast_tensors",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(weights, gamma)",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "weights",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ",",
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "gamma",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "expression_statement",
                                      "text": "alpha = weights.sum(reducedim, keepdim=True)",
                                      "children": [
                                        {
                                          "type": "assignment",
                                          "text": "alpha = weights.sum(reducedim, keepdim=True)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "alpha",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "call",
                                              "text": "weights.sum(reducedim, keepdim=True)",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "weights.sum",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "weights",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "sum",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(reducedim, keepdim=True)",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "reducedim",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ",",
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "keyword_argument",
                                                      "text": "keepdim=True",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "keepdim",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "=",
                                                          "text": "=",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "true",
                                                          "text": "True",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "a_mean = _mobius_scalar_mul(alpha, a_mean, k=k, dim=dim)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "a_mean = _mobius_scalar_mul(alpha, a_mean, k=k, dim=dim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "a_mean",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "_mobius_scalar_mul(alpha, a_mean, k=k, dim=dim)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "_mobius_scalar_mul",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(alpha, a_mean, k=k, dim=dim)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "alpha",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "a_mean",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "k=k",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "k",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "k",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "if_statement",
                  "text": "if not keepdim:\n        a_mean = drop_dims(a_mean, reducedim)",
                  "children": [
                    {
                      "type": "if",
                      "text": "if",
                      "children": []
                    },
                    {
                      "type": "not_operator",
                      "text": "not keepdim",
                      "children": [
                        {
                          "type": "not",
                          "text": "not",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "keepdim",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "a_mean = drop_dims(a_mean, reducedim)",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "a_mean = drop_dims(a_mean, reducedim)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "a_mean = drop_dims(a_mean, reducedim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "a_mean",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "drop_dims(a_mean, reducedim)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "drop_dims",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(a_mean, reducedim)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "a_mean",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "reducedim",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "text": "return a_mean",
                  "children": [
                    {
                      "type": "return",
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "a_mean",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}