{
  "type": "module",
  "text": "import functools\nimport torch.jit\n\n\n# NUMERICAL PRECISION ##########################################################\n\n\n# Clamping safety\n# TODO: make this datatype dependent\nMIN_NORM = 1e-15\n# Ball epsilon safety border\nBALL_EPS = {torch.float32: 4e-3, torch.float64: 1e-5}\n\n\n# TRIGONOMETRIC FUNCTIONS ######################################################\n\n\ndef tanh(x):\n    return x.clamp(-15, 15).tanh()\n\n\nclass Artanh(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, x):\n        x = x.clamp(-1 + 1e-15, 1 - 1e-15)\n        ctx.save_for_backward(x)\n        dtype = x.dtype\n        x = x.double()\n        res = (torch.log_(1 + x).sub_(torch.log_(1 - x))).mul_(0.5)\n        return res.to(dtype)\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        (input,) = ctx.saved_tensors\n        return grad_output / (1 - input ** 2)\n\n\nclass Arsinh(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, x):\n        ctx.save_for_backward(x)\n        z = x.double()\n        res = z + torch.sqrt_(1 + z.pow(2))\n        return (res).clamp_min_(MIN_NORM).log_().to(x.dtype)\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        (input,) = ctx.saved_tensors\n        return grad_output / (1 + input ** 2) ** 0.5\n\n\ndef artanh(x):\n    return Artanh.apply(x)\n\n\ndef arsinh(x):\n    return Arsinh.apply(x)\n\n\n# CURVATURE-PARAMETRIZED TRIGONOMETRIC FUNCTIONS ###############################\n\n\n\"\"\"\nThe following functions select the appropriate trigonometric function (normal or\nhyperbolic) depending on the value of the curvature :math:`\\kappa`.\n\"\"\"\n\ndef tan_K(x, K):\n    if K <= 0:\n        sqrt_minus_K = torch.sqrt(-K)\n        return (1.0/sqrt_minus_K) * tanh(sqrt_minus_K * x)\n    else:\n        sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.tan(sqrt_K * x)\n\n\ndef arctan_K(x, K):\n    if K <= 0:\n        sqrt_minus_K = torch.sqrt(-K)\n        return (1.0/sqrt_minus_K) * artanh(sqrt_minus_K * x)\n    else:\n        sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.atan(sqrt_K * x)\n\n\ndef arcsin_K(x, K):\n    if K <= 0:\n        sqrt_minus_K = torch.sqrt(-K)\n        return (1.0/sqrt_minus_K) * arsinh(sqrt_minus_K * x)\n    else:\n        sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.asin(sqrt_K * x)\n\n\n# GYROVECTOR SPACE MATH ########################################################\n\n\ndef project(x, *, K=1.0, dim=-1, eps=None):\n    r\"\"\"\n    Safe projects :math:`x` into the manifold for numerical stability. Only has\n    an effect for the Poincaré ball, not for the stereographic projection of the\n    sphere.\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension to compute norm\n    eps : float\n        stability parameter, uses default for dtype if not provided\n        (see BALL_EPS above)\n\n    Returns\n    -------\n    tensor\n        projected vector on the manifold\n    \"\"\"\n    return _project(x, K, dim, eps)\n\n\ndef _project(x, K, dim: int = -1, eps: float = None):\n    K_smaller_zero = K < 0\n    num_smaller_zero = K_smaller_zero.sum()\n    # this check is done to improve performance\n    # (no projections or norm-checks if K >= 0)\n    if num_smaller_zero > 0:\n        norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n        if eps is None:\n            eps = BALL_EPS[x.dtype]\n        maxnorm = (1 - eps) / (K.abs().sqrt())\n        cond = (norm > maxnorm) * K_smaller_zero\n        projected = (x / norm) * maxnorm\n        return torch.where(cond, projected, x)\n    else:\n        return x\n\n\ndef gamma_x(x, *, K=1.0, keepdim=False, dim=-1):\n    r\"\"\"\n    Computes the Lorentz factor :math:`\\gamma^\\kappa_x` at the point\n    :math:`x` on the manifold.\n\n    .. math::\n\n        \\lambda^\\kappa_x = \\frac{1}{1 + \\kappa \\|x\\|_2^2}\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        Lorentz factor\n    \"\"\"\n    return _gamma_x(x, K, keepdim=keepdim, dim=dim)\n\n\ndef _gamma_x(x, K, keepdim: bool = False, dim: int = -1):\n    x_norm = x.pow(2).sum(dim=dim, keepdim=keepdim)\n    gam = 1.0/(torch.sqrt(1.0+K*x_norm).clamp_min(MIN_NORM))\n    return gam\n\n\ndef lambda_x(x, *, K=1.0, keepdim=False, dim=-1):\n    r\"\"\"\n    Computes the conformal factor :math:`\\lambda^\\kappa_x` at the point\n    :math:`x` on the manifold.\n\n    .. math::\n\n        \\lambda^\\kappa_x = \\frac{1}{1 + \\kappa \\|x\\|_2^2}\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        conformal factor\n    \"\"\"\n    return _lambda_x(x, K, keepdim=keepdim, dim=dim)\n\n\ndef _lambda_x(x, K, keepdim: bool = False, dim: int = -1):\n    lam = 2.0/(1.0+K*x.pow(2).sum(dim=dim, keepdim=keepdim)).clamp_min(MIN_NORM)\n    return lam\n\n\ndef inner(x, u, v, *, K=1.0, keepdim=False, dim=-1):\n    r\"\"\"\n    Computes the inner product for two vectors :math:`u,v` in the tangent space\n    of :math:`x` w.r.t the Riemannian metric of the manifold.\n\n    .. math::\n\n        \\langle u, v\\rangle_x = (\\lambda^\\kappa_x)^2 \\langle u, v \\rangle\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    u : tensor\n        tangent vector to :math:`x` on manifold\n    v : tensor\n        tangent vector to :math:`x` on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        inner product\n    \"\"\"\n    inner_prod = _inner(x, u, v, K, keepdim=keepdim, dim=dim)\n    return inner_prod\n\n\ndef _inner(x, u, v, K, keepdim: bool = False, dim: int = -1):\n    return _lambda_x(x, K, keepdim=True, dim=dim) ** 2 * \\\n           (u * v).sum(dim=dim, keepdim=keepdim)\n\n\ndef norm(x, u, *, K=1.0, keepdim=False, dim=-1):\n    r\"\"\"\n    Computes the norm of a vectors :math:`u` in the tangent space of :math:`x`\n    w.r.t the Riemannian metric of the manifold.\n\n    .. math::\n\n        \\|u\\|_x = \\lambda^\\kappa_x \\|u\\|_2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    u : tensor\n        tangent vector to :math:`x` on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        norm of vector\n    \"\"\"\n    return _norm(x, u, K, keepdim=keepdim, dim=dim)\n\n\ndef _norm(x, u, K, keepdim: bool = False, dim: int = -1):\n    lam = _lambda_x(x, K, keepdim=keepdim, dim=dim)\n    u_norm = u.norm(dim=dim, keepdim=keepdim, p=2)\n    return lam * u_norm\n\n\ndef mobius_add(x, y, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the Möbius gyrovector addition.\n\n    .. math::\n\n        x \\oplus_\\kappa y =\n        \\frac{\n            (1 - 2 \\kappa \\langle x, y\\rangle - \\kappa \\|y\\|^2_2) x +\n            (1 + \\kappa \\|x\\|_2^2) y\n        }{\n            1 - 2 \\kappa \\langle x, y\\rangle + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        }\n\n    .. plot:: plots/extended/universal/mobius_add.py\n\n    In general this operation is not commutative:\n\n    .. math::\n\n        x \\oplus_\\kappa y \\ne y \\oplus_\\kappa x\n\n    But in some cases this property holds:\n\n    * zero vector case\n\n    .. math::\n\n        \\mathbf{0} \\oplus_\\kappa x = x \\oplus_\\kappa \\mathbf{0}\n\n    * zero curvature case that is same as Euclidean addition\n\n    .. math::\n\n        x \\oplus_0 y = y \\oplus_0 x\n\n    Another useful property is so called left-cancellation law:\n\n    .. math::\n\n        (-x) \\oplus_\\kappa (x \\oplus_\\kappa y) = y\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    y : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius addition\n    \"\"\"\n    return _mobius_add(x, y, K, dim=dim)\n\n\ndef _mobius_add(x, y, K, dim=-1):\n    x2 = x.pow(2).sum(dim=dim, keepdim=True)\n    y2 = y.pow(2).sum(dim=dim, keepdim=True)\n    xy = (x * y).sum(dim=dim, keepdim=True)\n    num = (1 - 2 * K * xy - K * y2) * x + (1 + K * x2) * y\n    denom = 1 - 2 * K * xy + K ** 2 * x2 * y2\n    # minimize denom (omit K to simplify th notation)\n    # 1)\n    # {d(denom)/d(x) = 2 y + 2x * <y, y> = 0\n    # {d(denom)/d(y) = 2 x + 2y * <x, x> = 0\n    # 2)\n    # {y + x * <y, y> = 0\n    # {x + y * <x, x> = 0\n    # 3)\n    # {- y/<y, y> = x\n    # {- x/<x, x> = y\n    # 4)\n    # minimum = 1 - 2 <y, y>/<y, y> + <y, y>/<y, y> = 0\n    return num / denom.clamp_min(MIN_NORM)\n\n\ndef mobius_sub(x, y, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the Möbius gyrovector subtraction.\n\n    The Möbius subtraction can be represented via the Möbius addition as\n    follows:\n\n    .. math::\n\n        x \\ominus_\\kappa y = x \\oplus_\\kappa (-y)\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius subtraction\n    \"\"\"\n    return _mobius_sub(x, y, K, dim=dim)\n\n\ndef _mobius_sub(x, y, K, dim: int = -1):\n    return _mobius_add(x, -y, K, dim=dim)\n\n\ndef mobius_coadd(x, y, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the Möbius gyrovector coaddition.\n\n    The addition operation :math:`\\oplus_\\kappa` is neither associative, nor\n    commutative. In contrast, the coaddition :math:`\\boxplus_\\kappa` (or\n    cooperation) is an associative operation that is defined as follows.\n\n    .. math::\n\n        a \\boxplus_\\kappa b\n        =\n        b \\boxplus_\\kappa a\n        =\n        a\\operatorname{gyr}[a, -b]b\\\\\n        = \\frac{\n            (1 + \\kappa \\|y\\|^2_2) x + (1 + \\kappa \\|x\\|_2^2) y\n            }{\n            1 + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        },\n\n    where :math:`\\operatorname{gyr}[a, b]v = \\ominus_\\kappa (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa v))`\n\n    The following right cancellation property holds\n\n    .. math::\n\n        (a \\boxplus_\\kappa b) \\ominus_\\kappa b = a\\\\\n        (a \\oplus_\\kappa b) \\boxminus_\\kappa b = a\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius coaddition\n\n    \"\"\"\n    return _mobius_coadd(x, y, K, dim=dim)\n\n# TODO: check numerical stability with Gregor's paper!!!\ndef _mobius_coadd(x, y, K, dim: int = -1):\n    #x2 = x.pow(2).sum(dim=dim, keepdim=True)\n    #y2 = y.pow(2).sum(dim=dim, keepdim=True)\n    #num = (1 + K * y2) * x + (1 + K * x2) * y\n    #denom = 1 - K ** 2 * x2 * y2\n    ## avoid division by zero in this way\n    #return num / denom.clamp_min(MIN_NORM)\n    return _mobius_add(x, _gyration(x, -y, y, K=K, dim=dim), K, dim=dim)\n\n\ndef mobius_cosub(x, y, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the Möbius gyrovector cosubtraction.\n\n    The Möbius cosubtraction is defined as follows:\n\n    .. math::\n\n        a \\boxminus_\\kappa b = a \\boxplus_\\kappa -b\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius cosubtraction\n\n    \"\"\"\n    return _mobius_cosub(x, y, K, dim=dim)\n\n\ndef _mobius_cosub(x, y, K, dim: int = -1):\n    return _mobius_coadd(x, -y, K, dim=dim)\n\n# TODO: can we make this operation somehow safer by breaking up the\n# TODO: scalar multiplication for K>0 when the argument to the\n# TODO: tan function gets close to pi/2+k*pi for k in Z?\n# TODO: one could use the scalar associative law\n# TODO: s_1 (X) s_2 (X) x = (s_1*s_2) (X) x\n# TODO: to implement a more stable Möbius scalar mult\ndef mobius_scalar_mul(r, x, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the Möbius scalar multiplication.\n\n    .. math::\n\n        r \\otimes_\\kappa x\n        =\n        \\tan_\\kappa(r\\tan_\\kappa^{-1}(\\|x\\|_2))\\frac{x}{\\|x\\|_2}\n\n    This operation has properties similar to the Euclidean scalar multiplication\n\n    * `n-addition` property\n\n    .. math::\n\n         r \\otimes_\\kappa x = x \\oplus_\\kappa \\dots \\oplus_\\kappa x\n\n    * Distributive property\n\n    .. math::\n\n         (r_1 + r_2) \\otimes_\\kappa x\n         =\n         r_1 \\otimes_\\kappa x \\oplus r_2 \\otimes_\\kappa x\n\n    * Scalar associativity\n\n    .. math::\n\n         (r_1 r_2) \\otimes_\\kappa x = r_1 \\otimes_\\kappa (r_2 \\otimes_\\kappa x)\n\n    * Monodistributivity\n\n    .. math::\n\n         r \\otimes_\\kappa (r_1 \\otimes x \\oplus r_2 \\otimes x) =\n         r \\otimes_\\kappa (r_1 \\otimes x) \\oplus r \\otimes (r_2 \\otimes x)\n\n    * Scaling property\n\n    .. math::\n\n        |r| \\otimes_\\kappa x / \\|r \\otimes_\\kappa x\\|_2 = x/\\|x\\|_2\n\n    Parameters\n    ----------\n    r : float|tensor\n        scalar for multiplication\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius scalar multiplication\n    \"\"\"\n    return _mobius_scalar_mul(r, x, K, dim=dim)\n\n\ndef _mobius_scalar_mul(r, x, K, dim: int = -1):\n    x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n    res_c = tan_K(r * arctan_K(x_norm, K), K) * (x / x_norm)\n    return res_c\n\n\ndef dist(x, y, *, K=1.0, keepdim=False, dim=-1):\n    r\"\"\"\n    Computes the geodesic distance between :math:`x` and :math:`y` on the\n    manifold.\n\n    .. math::\n\n        d_\\kappa(x, y) = 2\\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n\n    .. plot:: plots/extended/universal/distance.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`y`\n    \"\"\"\n    return _dist(x, y, K, keepdim=keepdim, dim=dim)\n\n\ndef _dist(x, y, K, keepdim: bool = False, dim: int = -1):\n    return 2.0 * arctan_K(\n        _mobius_add(-x, y, K, dim=dim).norm(dim=dim, p=2, keepdim=keepdim), K\n    )\n\n\ndef dist0(x, *, K=1.0, keepdim=False, dim=-1):\n    r\"\"\"\n    Computes geodesic distance to the manifold's origin.\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`0`\n    \"\"\"\n    return _dist0(x, K, keepdim=keepdim, dim=dim)\n\n\ndef _dist0(x, K, keepdim: bool = False, dim: int = -1):\n    return 2.0 * arctan_K(x.norm(dim=dim, p=2, keepdim=keepdim), K)\n\n\ndef geodesic(t, x, y, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the point on the geodesic (shortest) path connecting :math:`x` and\n    :math:`y` at time :math:`x`.\n\n    The path can also be treated as an extension of the line segment to an\n    unbounded geodesic that goes through :math:`x` and :math:`y`. The equation\n    of the geodesic is given as:\n\n    .. math::\n\n        \\gamma_{x\\to y}(t)\n        =\n        x \\oplus_\\kappa t \\otimes_\\kappa ((-x) \\oplus_\\kappa y)\n\n    The properties of the geodesic are the following:\n\n    .. math::\n\n        \\gamma_{x\\to y}(0) = x\\\\\n        \\gamma_{x\\to y}(1) = y\\\\\n        \\dot\\gamma_{x\\to y}(t) = v\n\n    Furthermore, the geodesic also satisfies the property of local distance\n    minimization:\n\n    .. math::\n\n         d_\\kappa(\\gamma_{x\\to y}(t_1), \\gamma_{x\\to y}(t_2)) = v|t_1-t_2|\n\n    \"Natural parametrization\" of the curve ensures unit speed geodesics which\n    yields the above formula with :math:`v=1`.\n\n    However, we can always compute the constant speed :math:`v` from the points\n    that the particular path connects:\n\n    .. math::\n\n        v = d_\\kappa(\\gamma_{x\\to y}(0), \\gamma_{x\\to y}(1)) = d_\\kappa(x, y)\n\n\n    Parameters\n    ----------\n    t : float|tensor\n        travelling time\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        point on the geodesic going through x and y\n    \"\"\"\n    return _geodesic(t, x, y, K, dim=dim)\n\n\ndef _geodesic(t, x, y, K, dim: int = -1):\n    # this is not very numerically stable\n    v = _mobius_add(-x, y, K, dim=dim)\n    tv = _mobius_scalar_mul(t, v, K, dim=dim)\n    gamma_t = _mobius_add(x, tv, K, dim=dim)\n    return gamma_t\n\n\ndef expmap(x, u, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the exponential map of :math:`u` at :math:`x`.\n\n    The expmap is tightly related with :func:`geodesic`. Intuitively, the\n    expmap represents a smooth travel along a geodesic from the starting point\n    :math:`x`, into the initial direction :math:`u` at speed :math:`\\|u\\|_x` for\n    the duration of one time unit. In formulas one can express this as the\n    travel along the curve :math:`\\gamma_{x, u}(t)` such that\n\n    .. math::\n\n        \\gamma_{x, u}(0) = x\\\\\n        \\dot\\gamma_{x, u}(0) = u\\\\\n        \\|\\dot\\gamma_{x, u}(t)\\|_{\\gamma_{x, u}(t)} = \\|u\\|_x\n\n    The existence of this curve relies on uniqueness of the differential\n    equation solution, that is local. For the universal manifold the solution\n    is well defined globally and we have.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_x(u) = \\gamma_{x, u}(1) = \\\\\n        x\\oplus_\\kappa \\tan_\\kappa(\\|u\\|_x/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    u : tensor\n        speed vector in tangent space at x\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{x, u}(1)` end point\n    \"\"\"\n    return _expmap(x, u, K, dim=dim)\n\n\ndef _expmap(x, u, K, dim: int = -1):\n    u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)\n    lam = _lambda_x(x, K, dim=dim, keepdim=True)\n    second_term = tan_K((lam/2.0) * u_norm, K) * (u/u_norm)\n    y = _mobius_add(x, second_term, K, dim=dim)\n    return y\n\n\ndef expmap0(u, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the exponential map of :math:`u` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_0(u)\n        =\n        \\tan_\\kappa(\\|u\\|_2/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    u : tensor\n        speed vector on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{0, u}(1)` end point\n    \"\"\"\n    return _expmap0(u, K, dim=dim)\n\n\ndef _expmap0(u, K, dim: int = -1):\n    u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)\n    gamma_1 = tan_K(u_norm, K) * (u/u_norm)\n    return gamma_1\n\n\ndef geodesic_unit(t, x, u, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the point on the unit speed geodesic at time :math:`t`, starting\n    from :math:`x` with initial direction :math:`u/\\|u\\|_x`.\n\n    .. math::\n\n        \\gamma_{x,u}(t) = x\\oplus_\\kappa \\tan_\\kappa(t/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    t : tensor\n        travelling time\n    x : tensor\n        initial point on manifold\n    u : tensor\n        initial direction in tangent space at x\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the point on the unit speed geodesic\n    \"\"\"\n    return _geodesic_unit(t, x, u, K, dim=dim)\n\n\ndef _geodesic_unit(t, x, u, K, dim: int = -1):\n    u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)\n    second_term = tan_K(t/2.0, K) * (u / u_norm)\n    gamma_1 = _mobius_add(x, second_term, K, dim=dim)\n    return gamma_1\n\n\ndef logmap(x, y, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the logarithmic map of :math:`y` at :math:`x`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_x(y) = \\frac{2}{\\lambda_x^\\kappa}\n        \\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n        * \\frac{(-x)\\oplus_\\kappa y}{\\|(-x)\\oplus_\\kappa y\\|_2}\n\n    The result of the logmap is a vector :math:`u` in the tangent space of\n    :math:`x` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_x(\\operatorname{log}^\\kappa_x(y))\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_x M` that transports :math:`x` to :math:`y`\n    \"\"\"\n    return _logmap(x, y, K, dim=dim)\n\n\ndef _logmap(x, y, K, dim: int = -1):\n    sub = _mobius_add(-x, y, K, dim=dim)\n    sub_norm = sub.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)\n    lam = _lambda_x(x, K, keepdim=True, dim=dim)\n    return 2.0*arctan_K(sub_norm, K) * (sub / (lam*sub_norm))\n\n\ndef logmap0(y, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the logarithmic map of :math:`y` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_0(y)\n        =\n        \\tan_\\kappa^{-1}(\\|y\\|_2) \\frac{y}{\\|y\\|_2}\n\n    The result of the logmap at the origin is a vector :math:`u` in the tangent\n    space of the origin :math:`0` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Parameters\n    ----------\n    y : tensor\n        target point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_0 M` that transports :math:`0` to :math:`y`\n    \"\"\"\n    return _logmap0(y, K, dim=dim)\n\n\ndef _logmap0(y, K, dim: int = -1):\n    y_norm = y.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)\n    return (y/y_norm) * arctan_K(y_norm, K)\n\n\ndef mobius_matvec(m, x, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the generalization of matrix-vector multiplication in gyrovector\n    spaces.\n\n    The Möbius matrix vector operation is defined as follows:\n\n    .. math::\n\n        M \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|Mx\\|_2}{\\|x\\|_2}\\tan_\\kappa^{-1}(\\|x\\|_2)\n        \\right)\\frac{Mx}{\\|Mx\\|_2}\n\n    .. plot:: plots/extended/universal/mobius_matvec.py\n\n    Parameters\n    ----------\n    m : tensor\n        matrix for multiplication. Batched matmul is performed if\n        ``m.dim() > 2``, but only last dim reduction is supported\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius matvec result\n    \"\"\"\n    return _mobius_matvec(m, x, K, dim=dim)\n\n\ndef _mobius_matvec(m, x, K, dim: int = -1):\n    if m.dim() > 2 and dim != -1:\n        raise RuntimeError(\n            \"broadcasted Möbius matvec is supported for the last dim only\"\n        )\n    x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n    if dim != -1 or m.dim() == 2:\n        mx = torch.tensordot(x, m, dims=([dim], [1]))\n    else:\n        mx = torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)\n    mx_norm = mx.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n    res_c = tan_K(mx_norm / x_norm * arctan_K(x_norm, K), K) * (mx / mx_norm)\n    cond = (mx == 0).prod(dim=dim, keepdim=True, dtype=torch.uint8)\n    res_0 = torch.zeros(1, dtype=res_c.dtype, device=res_c.device)\n    res = torch.where(cond, res_0, res_c)\n    return res\n\n# TODO: check if this extends to gyrovector spaces for positive curvature\n# TODO: add plot\ndef mobius_pointwise_mul(w, x, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the generalization for point-wise multiplication in gyrovector\n    spaces.\n\n    The Möbius pointwise multiplication is defined as follows\n\n    .. math::\n\n        \\operatorname{diag}(w) \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|\\operatorname{diag}(w)x\\|_2}{x}\\tanh^{-1}(\\|x\\|_2)\n        \\right)\\frac{\\|\\operatorname{diag}(w)x\\|_2}{\\|x\\|_2}\n\n\n    Parameters\n    ----------\n    w : tensor\n        weights for multiplication (should be broadcastable to x)\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius point-wise mul result\n    \"\"\"\n    return _mobius_pointwise_mul(w, x, K, dim=dim)\n\n\ndef _mobius_pointwise_mul(w, x, K, dim: int = -1):\n    x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n    wx = w * x\n    wx_norm = wx.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n    res_c = tan_K(wx_norm / x_norm * arctan_K(x_norm, K), K) * (wx/wx_norm)\n    cond = (wx == 0).prod(dim=dim, keepdim=True, dtype=torch.uint8)\n    res_0 = torch.zeros(1, dtype=res_c.dtype, device=res_c.device)\n    res = torch.where(cond, res_0, res_c)\n    return res\n\n\ndef mobius_fn_apply_chain(x, *fns, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the generalization of sequential function application in gyrovector\n    spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the sequence of functions is\n    applied to the vector in the tangent space. The resulting tangent vector is\n    then mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    The definition of mobius function application allows chaining as\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Resulting in\n\n    .. math::\n\n        (f \\circ g)^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(\n            (f \\circ g) (\\operatorname{log}^\\kappa_0(y))\n        )\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fns : callable[]\n        functions to apply\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Apply chain result\n    \"\"\"\n    if not fns:\n        return x\n    else:\n        ex = _logmap0(x, K, dim=dim)\n        for fn in fns:\n            ex = fn(ex)\n        y = _expmap0(ex, K, dim=dim)\n        return y\n\n\ndef mobius_fn_apply(fn, x, *args, K=1.0, dim=-1, **kwargs):\n    r\"\"\"\n    Computes the generalization of function application in gyrovector spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the function is applied\n    to the vector in the tangent space. The resulting tangent vector is then\n    mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    .. plot:: plots/extended/universal/mobius_sigmoid_apply.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fn : callable\n        function to apply\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Result of function in hyperbolic space\n    \"\"\"\n    ex = _logmap0(x, K, dim=dim)\n    ex = fn(ex, *args, **kwargs)\n    y = _expmap0(ex, K, dim=dim)\n    return y\n\n\ndef mobiusify(fn):\n    r\"\"\"\n    Wraps a function such that is works in gyrovector spaces.\n\n    Parameters\n    ----------\n    fn : callable\n        function in Euclidean space\n\n    Returns\n    -------\n    callable\n        function working in gyrovector spaces\n\n    Notes\n    -----\n    New function will accept additional argument ``K``.\n    \"\"\"\n\n    @functools.wraps(fn)\n    def mobius_fn(x, *args, K=1.0, dim=-1, **kwargs):\n        ex = _logmap0(x, K, dim=dim)\n        ex = fn(ex, *args, **kwargs)\n        y = _expmap0(ex, K, dim=dim)\n        return y\n\n    return mobius_fn\n\n\ndef dist2plane(x, p, a, *, K=1.0, keepdim=False, signed=False, dim=-1):\n    r\"\"\"\n    Computes the geodesic distance from :math:`x` to a hyperplane going through\n    :math:`x` with the normal vector :math:`a`.\n\n    The hyperplane is such that its set of points is orthogonal to :math:`a` and\n    contains :math:`p`.\n\n    .. plot:: plots/extended/universal/distance2plane.py\n\n    To form an intuition what is a hyperplane in gyrovector spaces, let's first\n    consider an Euclidean hyperplane\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\},\n\n    where :math:`a\\in \\mathbb{R}^n\\backslash \\{\\mathbf{0}\\}` and\n    :math:`b\\in \\mathbb{R}^n`.\n\n    This formulation of a hyperplane is hard to generalize,\n    therefore we can rewrite :math:`\\langle x, a\\rangle - b`\n    utilizing orthogonal completion.\n    Setting any :math:`p` s.t. :math:`b=\\langle a, p\\rangle` we have\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\}\\\\\n        =H_{a, \\langle a, p\\rangle} = \\tilde{H}_{a, p}\\\\\n        = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - \\langle a, p\\rangle = 0\n        \\right\\}\\\\\n        =\\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle -p + x, a\\rangle = 0\n        \\right\\}\\\\\n        = p + \\{a\\}^\\perp\n\n    Naturally we have a set :math:`\\{a\\}^\\perp` with applied :math:`+` operator\n    to each element. Generalizing a notion of summation to the gyrovector space\n    we replace :math:`+` with :math:`\\oplus_\\kappa`.\n\n    Next, we should figure out what is :math:`\\{a\\}^\\perp` in the gyrovector\n    space.\n\n    First thing that we should acknowledge is that notion of orthogonality is\n    defined for vectors in tangent spaces. Let's consider now\n    :math:`p\\in \\mathcal{M}_\\kappa^n` and\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`.\n\n    Slightly deviating from traditional notation let's write\n    :math:`\\{a\\}_p^\\perp` highlighting the tight relationship of\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`\n    with :math:`p \\in \\mathcal{M}_\\kappa^n`. We then define\n\n    .. math::\n\n        \\{a\\}_p^\\perp := \\left\\{\n            z\\in T_p\\mathcal{M}_\\kappa^n \\;:\\; \\langle z, a\\rangle_p = 0\n        \\right\\}\n\n    Recalling that a tangent vector :math:`z` for point :math:`p` yields\n    :math:`x = \\operatorname{exp}^\\kappa_p(z)` we rewrite the above equation as\n\n    .. math::\n        \\{a\\}_p^\\perp := \\left\\{\n            x\\in \\mathcal{M}_\\kappa^n \\;:\\; \\langle\n            \\operatorname{log}_p^\\kappa(x), a\\rangle_p = 0\n        \\right\\}\n\n    This formulation is something more pleasant to work with.\n    Putting all together\n\n    .. math::\n\n        \\tilde{H}_{a, p}^\\kappa = p + \\{a\\}^\\perp_p\\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle\n            \\operatorname{log}^\\kappa_p(x),\n            a\\rangle_p = 0\n        \\right\\} \\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle -p \\oplus_\\kappa x, a\\rangle\n            = 0\n        \\right\\}\n\n    To compute the distance :math:`d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)` we find\n\n    .. math::\n\n        d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)\n        =\n        \\inf_{w\\in \\tilde{H}_{a, p}^\\kappa} d_\\kappa(x, w)\\\\\n        =\n        \\sin^{-1}_\\kappa\\left\\{\n            \\frac{\n            2 |\\langle(-p)\\oplus_\\kappa x, a\\rangle|\n            }{\n            (1+\\kappa\\|(-p)\\oplus_\\kappa \\|x\\|^2_2)\\|a\\|_2\n            }\n        \\right\\}\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold to compute distance for\n    a : tensor\n        hyperplane normal vector in tangent space of :math:`p`\n    p : tensor\n        point on manifold lying on the hyperplane\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    signed : bool\n        return signed distance\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        distance to the hyperplane\n    \"\"\"\n    return _dist2plane(x, a, p, K, keepdim=keepdim, signed=signed, dim=dim)\n\n\ndef _dist2plane(x, a, p, K, keepdim: bool = False, signed: bool = False,\n                dim: int = -1):\n    diff = _mobius_add(-p, x, K, dim=dim)\n    diff_norm2 = diff.pow(2).sum(dim=dim, keepdim=keepdim).clamp_min(MIN_NORM)\n    sc_diff_a = (diff * a).sum(dim=dim, keepdim=keepdim)\n    if not signed:\n        sc_diff_a = sc_diff_a.abs()\n    a_norm = a.norm(dim=dim, keepdim=keepdim, p=2).clamp_min(MIN_NORM)\n    num = 2.0 * sc_diff_a\n    denom = ((1 + K * diff_norm2) * a_norm).clamp_min(MIN_NORM)\n    return arcsin_K(num / denom, K)\n\n\ndef sproj(x, K):\n    factor = 1.0 / (1.0 + torch.sqrt(K.abs())*x[:,-1])\n    proj = factor[:, None] * x[:,:-1]\n    return proj\n\n\ndef inv_sproj(x, K):\n    lam_x = _lambda_x(x, K, keepdim=True, dim=-1)\n    A = lam_x[:, None] * x\n    B = 1.0/torch.sqrt(K.abs())*(lam_x - 1.0).unsqueeze(dim=-1)\n    proj = torch.cat((A,B), dim=-1)\n    return proj\n\n\ndef antipode(x, K, dim: int = -1):\n    r\"\"\"\n    Computes the antipode of a point :math:`x_1,...,x_n` for :math:`\\kappa > 0`.\n\n    Let :math:`x` be a point on some sphere. Then :math:`-x` is its antipode.\n    Since we're dealing with stereographic projections, for :math:`sproj(x)` we\n    get the antipode :math:`sproj(-x)`. Which is given as follows:\n\n    .. math::\n\n        \\text{antipode}(x)\n        =\n        \\frac{1+\\kappa\\|x\\|^2_2}{2\\kappa\\|x\\|^2_2}{}(-x)\n\n    Parameters\n    ----------\n    x : tensor\n        points :math:`x_1,...,x_n` on manifold to compute antipode for\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        antipode\n    \"\"\"\n    return _antipode(x, K, dim=dim)\n\n\ndef _antipode(x, K, dim=-1):\n    # TODO: add implementation that uses stereographic projections!!!\n    # TODO: this one is correct, but it could be more efficient!!!\n    v = x/x.norm(p=2, dim=-1)\n    R = 1.0/torch.sqrt(K.abs())\n    import math\n    return _geodesic_unit(math.pi*R, x, v, K, dim=-1)\n\n\ndef weighted_midpoint(x, a, *, K=1.0, keepdim=False, dim=-1):\n    r\"\"\"\n    Computes the weighted Möbius gyromidpoint of a set of points\n    :math:`x_1,...,x_n` according to weights :math:`\\alpha_1,...,\\alpha_n`.\n\n    The gyromidpoint looks as follows:\n\n    .. plot:: plots/extended/universal/midpoint.py\n\n    The weighted Möbius gyromidpoint is computed as follows\n\n    .. math::\n\n        m_{\\kappa}(x_1,\\ldots,x_n,\\alpha_1,\\ldots,\\alpha_n)\n        =\n        \\frac{1}{2}\n        \\otimes_\\kappa\n        \\left(\n        \\sum_{i=1}^n\n        \\frac{\n        \\alpha_i\\lambda_{x_i}^\\kappa\n        }{\n        \\sum_{j=1}^n\\alpha_j(\\lambda_{x_j}^\\kappa-1)\n        }\n        x_i\n        \\right)\n\n    where the weights :math:`\\alpha_1,...,\\alpha_n` do not necessarily need\n    to sum to 1 (only their relative weight matters). Note that this formula\n    also requires to choose between the midpoint and its antipode for\n    :math:`\\kappa > 0`.\n\n    Parameters\n    ----------\n    x : tensor\n        points :math:`x_1,...,x_n` on manifold to compute weighted Möbius\n        gyromidpoint for\n    a : tensor\n        scalar midpoint weights :math:`\\alpha_1,...,\\alpha_n`\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        weighted Möbius gyromidpoint\n    \"\"\"\n    return _weighted_midpoint(x, a, K, keepdim=keepdim, dim=dim)\n\n\ndef _weighted_midpoint(x, w, K, keepdim: bool = False, dim: int = -1):\n    lam_x = _lambda_x(x, K, keepdim=False, dim=dim)\n    w_times_lam_x = w * lam_x\n    denominator = (w_times_lam_x - w).sum()\n\n    # min-clamp denominator\n    s = torch.sign(torch.sign(denominator) + 0.1)\n    if denominator.abs() < MIN_NORM:\n        denominator = s * MIN_NORM\n    linear_weights = w_times_lam_x / denominator\n\n    # multiply rows of X by linear weights\n    # TODO: incorporate dimension independence in next two lines\n    x = x.t()\n    rhs = torch.matmul(x, linear_weights).t()\n    x = x.t()   # restore\n    # TODO: remove dimension appropriately (the specified one)\n    if not keepdim:\n        rhs = rhs.squeeze()\n\n    # determine midpoint\n    midpoint = None\n    m = _mobius_scalar_mul(0.5, rhs, K, dim=dim)\n    # also compute and compare to antipode of m for positive curvature\n    if K > 0:\n        m_a = _antipode(m, K, dim=dim)\n        # determine whether m or m_a minimizes the sum of distances\n        d = _dist(x, m, K, keepdim=keepdim, dim=dim).sum(dim=dim, keepdim=False)\n        d_a = _dist(x, m_a, K, keepdim=keepdim, dim=dim).sum(dim=dim, keepdim=False)\n        # use midpoint that has smaller sum of squared distances\n        midpoint = m if d < d_a else m_a\n    else:\n        midpoint = m\n\n    return midpoint\n\n\ndef gyration(a, b, u, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the gyration of :math:`u` by :math:`[a,b]`.\n\n    The gyration is a special operation of gyrovector spaces. The gyrovector\n    space addition operation :math:`\\oplus_\\kappa` is not associative (as\n    mentioned in :func:`mobius_add`), but it is gyroassociative, which means\n\n    .. math::\n\n        u \\oplus_\\kappa (v \\oplus_\\kappa w)\n        =\n        (u\\oplus_\\kappa v) \\oplus_\\kappa \\operatorname{gyr}[u, v]w,\n\n    where\n\n    .. math::\n\n        \\operatorname{gyr}[u, v]w\n        =\n        \\ominus (u \\oplus_\\kappa v) \\oplus (u \\oplus_\\kappa (v \\oplus_\\kappa w))\n\n    We can simplify this equation using the explicit formula for the Möbius\n    addition [1]. Recall,\n\n    .. math::\n\n        A = - \\kappa^2 \\langle u, w\\rangle \\langle v, v\\rangle\n            - \\kappa \\langle v, w\\rangle\n            + 2 \\kappa^2 \\langle u, v\\rangle \\langle v, w\\rangle\\\\\n        B = - \\kappa^2 \\langle v, w\\rangle \\langle u, u\\rangle\n            + \\kappa \\langle u, w\\rangle\\\\\n        D = 1 - 2 \\kappa \\langle u, v\\rangle\n            + \\kappa^2 \\langle u, u\\rangle \\langle v, v\\rangle\\\\\n\n        \\operatorname{gyr}[u, v]w = w + 2 \\frac{A u + B v}{D}.\n\n    Parameters\n    ----------\n    a : tensor\n        first point on manifold\n    b : tensor\n        second point on manifold\n    u : tensor\n        vector field for operation\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of automorphism\n\n    References\n    ----------\n    [1]  A. A. Ungar (2009), A Gyrovector Space Approach to Hyperbolic Geometry\n    \"\"\"\n    return _gyration(a, b, u, K, dim=dim)\n\n\ndef _gyration(u, v, w, K, dim: int = -1):\n    # non-simplified\n    # mupv = -_mobius_add(u, v, K)\n    # vpw = _mobius_add(u, w, K)\n    # upvpw = _mobius_add(u, vpw, K)\n    # return _mobius_add(mupv, upvpw, K)\n    # simplified\n    u2 = u.pow(2).sum(dim=dim, keepdim=True)\n    v2 = v.pow(2).sum(dim=dim, keepdim=True)\n    uv = (u * v).sum(dim=dim, keepdim=True)\n    uw = (u * w).sum(dim=dim, keepdim=True)\n    vw = (v * w).sum(dim=dim, keepdim=True)\n    K2 = K ** 2\n    a = -K2 * uw * v2 - K * vw + 2 * K2 * uv * vw\n    b = -K2 * vw * u2 + K * uw\n    d = 1 - 2 * K * uv + K2 * u2 * v2\n    return w + 2 * (a * u + b * v) / d.clamp_min(MIN_NORM)\n\n\ndef parallel_transport(x, y, v, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the parallel transport of :math:`v` from :math:`x` to :math:`y`.\n\n    The parallel transport is essential for adaptive algorithms on Riemannian\n    manifolds. For gyrovector spaces the parallel transport is expressed through\n    the gyration.\n\n    .. plot:: plots/extended/universal/gyrovector_parallel_transport.py\n\n    To recover parallel transport we first need to study isomorphisms between\n    gyrovectors and vectors. The reason is that originally, parallel transport\n    is well defined for gyrovectors as\n\n    .. math::\n\n        P_{x\\to y}(z) = \\operatorname{gyr}[y, -x]z,\n\n    where :math:`x,\\:y,\\:z \\in \\mathcal{M}_\\kappa^n` and\n    :math:`\\operatorname{gyr}[a, b]c = \\ominus (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa c))`\n\n    But we want to obtain parallel transport for vectors, not for gyrovectors.\n    The blessing is the isomorphism mentioned above. This mapping is given by\n\n    .. math::\n\n        U^\\kappa_p \\: : \\: T_p\\mathcal{M}_\\kappa^n \\to \\mathbb{G}\n        =\n        v \\mapsto \\lambda^\\kappa_p v\n\n\n    Finally, having the points :math:`x,\\:y \\in \\mathcal{M}_\\kappa^n` and a\n    tangent vector :math:`u\\in T_x\\mathcal{M}_\\kappa^n` we obtain\n\n    .. math::\n\n        P^\\kappa_{x\\to y}(v)\n        =\n        (U^\\kappa_y)^{-1}\\left(\\operatorname{gyr}[y, -x] U^\\kappa_x(v)\\right)\\\\\n        =\n        \\operatorname{gyr}[y, -x] v \\lambda^\\kappa_x / \\lambda^\\kappa_y\n\n    .. plot:: plots/extended/universal/parallel_transport.py\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point\n    y : tensor\n        end point\n    v : tensor\n        tangent vector at x to be transported to y\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        transported vector\n    \"\"\"\n    return _parallel_transport(x, y, v, K, dim=dim)\n\n\ndef _parallel_transport(x, y, u, K, dim: int = -1):\n    return (\n        _gyration(y, -x, u, K, dim=dim)\n        * _lambda_x(x, K, keepdim=True, dim=dim)\n        / _lambda_x(y, K, keepdim=True, dim=dim)\n    )\n\n\ndef parallel_transport0(y, v, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the parallel transport of :math:`v` from the origin :math:`0` to\n    :math:`y`.\n\n    This is just a special case of the parallel transport with the starting\n    point at the origin that can be computed more efficiently and more\n    numerically stable.\n\n    Parameters\n    ----------\n    y : tensor\n        target point\n    v : tensor\n        vector to be transported from the origin to y\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"\n    return _parallel_transport0(y, v, K, dim=dim)\n\n\ndef _parallel_transport0(y, v, K, dim: int = -1):\n    return v * (1 + K * y.pow(2).sum(dim=dim, keepdim=True)).clamp_min(MIN_NORM)\n\n\ndef parallel_transport0back(x, v, *, K=1.0, dim: int = -1):\n    r\"\"\"\n    Perform parallel transport to the zero point.\n\n    Special case parallel transport with last point at zero that\n    can be computed more efficiently and numerically stable\n\n    Parameters\n    ----------\n    x : tensor\n        target point\n    v : tensor\n        vector to be transported\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"\n    return _parallel_transport0back(x, v, K=K, dim=dim)\n\n\ndef _parallel_transport0back(x, v, K, dim: int = -1):\n    return v / (1 + K * x.pow(2).sum(dim=dim, keepdim=True)).clamp_min(MIN_NORM)\n\n\ndef egrad2rgrad(x, grad, *, K=1.0, dim=-1):\n    r\"\"\"\n    Converts the Euclidean gradient to the Riemannian gradient in the tangent\n    space of :math:`x`.\n\n    .. math::\n\n        \\nabla_x = \\nabla^E_x / (\\lambda_x^\\kappa)^2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    grad : tensor\n        Euclidean gradient for :math:`x`\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Riemannian gradient :math:`u\\in T_x\\mathcal{M}_\\kappa^n`\n    \"\"\"\n    return _egrad2rgrad(x, grad, K, dim=dim)\n\n\ndef _egrad2rgrad(x, grad, K, dim: int = -1):\n    return grad / _lambda_x(x, K, keepdim=True, dim=dim) ** 2\n",
  "children": [
    {
      "type": "import_statement",
      "text": "import functools",
      "children": [
        {
          "type": "import",
          "text": "import",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "functools",
          "children": [
            {
              "type": "identifier",
              "text": "functools",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "import_statement",
      "text": "import torch.jit",
      "children": [
        {
          "type": "import",
          "text": "import",
          "children": []
        },
        {
          "type": "dotted_name",
          "text": "torch.jit",
          "children": [
            {
              "type": "identifier",
              "text": "torch",
              "children": []
            },
            {
              "type": ".",
              "text": ".",
              "children": []
            },
            {
              "type": "identifier",
              "text": "jit",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "comment",
      "text": "# NUMERICAL PRECISION ##########################################################",
      "children": []
    },
    {
      "type": "comment",
      "text": "# Clamping safety",
      "children": []
    },
    {
      "type": "comment",
      "text": "# TODO: make this datatype dependent",
      "children": []
    },
    {
      "type": "expression_statement",
      "text": "MIN_NORM = 1e-15",
      "children": [
        {
          "type": "assignment",
          "text": "MIN_NORM = 1e-15",
          "children": [
            {
              "type": "identifier",
              "text": "MIN_NORM",
              "children": []
            },
            {
              "type": "=",
              "text": "=",
              "children": []
            },
            {
              "type": "float",
              "text": "1e-15",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "comment",
      "text": "# Ball epsilon safety border",
      "children": []
    },
    {
      "type": "expression_statement",
      "text": "BALL_EPS = {torch.float32: 4e-3, torch.float64: 1e-5}",
      "children": [
        {
          "type": "assignment",
          "text": "BALL_EPS = {torch.float32: 4e-3, torch.float64: 1e-5}",
          "children": [
            {
              "type": "identifier",
              "text": "BALL_EPS",
              "children": []
            },
            {
              "type": "=",
              "text": "=",
              "children": []
            },
            {
              "type": "dictionary",
              "text": "{torch.float32: 4e-3, torch.float64: 1e-5}",
              "children": [
                {
                  "type": "{",
                  "text": "{",
                  "children": []
                },
                {
                  "type": "pair",
                  "text": "torch.float32: 4e-3",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.float32",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "float32",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "float",
                      "text": "4e-3",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "text": ",",
                  "children": []
                },
                {
                  "type": "pair",
                  "text": "torch.float64: 1e-5",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "torch.float64",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "torch",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "float64",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "float",
                      "text": "1e-5",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "}",
                  "text": "}",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "comment",
      "text": "# TRIGONOMETRIC FUNCTIONS ######################################################",
      "children": []
    },
    {
      "type": "function_definition",
      "text": "def tanh(x):\n    return x.clamp(-15, 15).tanh()",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "tanh",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "return x.clamp(-15, 15).tanh()",
          "children": [
            {
              "type": "return_statement",
              "text": "return x.clamp(-15, 15).tanh()",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "x.clamp(-15, 15).tanh()",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "x.clamp(-15, 15).tanh",
                      "children": [
                        {
                          "type": "call",
                          "text": "x.clamp(-15, 15)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "x.clamp",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(-15, 15)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "unary_operator",
                                  "text": "-15",
                                  "children": [
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "15",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "integer",
                                  "text": "15",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "tanh",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "text": "()",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "class_definition",
      "text": "class Artanh(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, x):\n        x = x.clamp(-1 + 1e-15, 1 - 1e-15)\n        ctx.save_for_backward(x)\n        dtype = x.dtype\n        x = x.double()\n        res = (torch.log_(1 + x).sub_(torch.log_(1 - x))).mul_(0.5)\n        return res.to(dtype)\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        (input,) = ctx.saved_tensors\n        return grad_output / (1 - input ** 2)",
      "children": [
        {
          "type": "class",
          "text": "class",
          "children": []
        },
        {
          "type": "identifier",
          "text": "Artanh",
          "children": []
        },
        {
          "type": "argument_list",
          "text": "(torch.autograd.Function)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.autograd.Function",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.autograd",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "autograd",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "Function",
                  "children": []
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "@staticmethod\n    def forward(ctx, x):\n        x = x.clamp(-1 + 1e-15, 1 - 1e-15)\n        ctx.save_for_backward(x)\n        dtype = x.dtype\n        x = x.double()\n        res = (torch.log_(1 + x).sub_(torch.log_(1 - x))).mul_(0.5)\n        return res.to(dtype)\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        (input,) = ctx.saved_tensors\n        return grad_output / (1 - input ** 2)",
          "children": [
            {
              "type": "decorated_definition",
              "text": "@staticmethod\n    def forward(ctx, x):\n        x = x.clamp(-1 + 1e-15, 1 - 1e-15)\n        ctx.save_for_backward(x)\n        dtype = x.dtype\n        x = x.double()\n        res = (torch.log_(1 + x).sub_(torch.log_(1 - x))).mul_(0.5)\n        return res.to(dtype)",
              "children": [
                {
                  "type": "decorator",
                  "text": "@staticmethod",
                  "children": [
                    {
                      "type": "@",
                      "text": "@",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "function_definition",
                  "text": "def forward(ctx, x):\n        x = x.clamp(-1 + 1e-15, 1 - 1e-15)\n        ctx.save_for_backward(x)\n        dtype = x.dtype\n        x = x.double()\n        res = (torch.log_(1 + x).sub_(torch.log_(1 - x))).mul_(0.5)\n        return res.to(dtype)",
                  "children": [
                    {
                      "type": "def",
                      "text": "def",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "forward",
                      "children": []
                    },
                    {
                      "type": "parameters",
                      "text": "(ctx, x)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "ctx",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "x = x.clamp(-1 + 1e-15, 1 - 1e-15)\n        ctx.save_for_backward(x)\n        dtype = x.dtype\n        x = x.double()\n        res = (torch.log_(1 + x).sub_(torch.log_(1 - x))).mul_(0.5)\n        return res.to(dtype)",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "x = x.clamp(-1 + 1e-15, 1 - 1e-15)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "x = x.clamp(-1 + 1e-15, 1 - 1e-15)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "x.clamp(-1 + 1e-15, 1 - 1e-15)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "x.clamp",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "clamp",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(-1 + 1e-15, 1 - 1e-15)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "-1 + 1e-15",
                                          "children": [
                                            {
                                              "type": "unary_operator",
                                              "text": "-1",
                                              "children": [
                                                {
                                                  "type": "-",
                                                  "text": "-",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "1",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "+",
                                              "text": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "float",
                                              "text": "1e-15",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "1 - 1e-15",
                                          "children": [
                                            {
                                              "type": "integer",
                                              "text": "1",
                                              "children": []
                                            },
                                            {
                                              "type": "-",
                                              "text": "-",
                                              "children": []
                                            },
                                            {
                                              "type": "float",
                                              "text": "1e-15",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "ctx.save_for_backward(x)",
                          "children": [
                            {
                              "type": "call",
                              "text": "ctx.save_for_backward(x)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "ctx.save_for_backward",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "ctx",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "save_for_backward",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(x)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "dtype = x.dtype",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "dtype = x.dtype",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dtype",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "attribute",
                                  "text": "x.dtype",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dtype",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "x = x.double()",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "x = x.double()",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "x.double()",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "x.double",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "double",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "res = (torch.log_(1 + x).sub_(torch.log_(1 - x))).mul_(0.5)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "res = (torch.log_(1 + x).sub_(torch.log_(1 - x))).mul_(0.5)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "res",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "(torch.log_(1 + x).sub_(torch.log_(1 - x))).mul_(0.5)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "(torch.log_(1 + x).sub_(torch.log_(1 - x))).mul_",
                                      "children": [
                                        {
                                          "type": "parenthesized_expression",
                                          "text": "(torch.log_(1 + x).sub_(torch.log_(1 - x)))",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "call",
                                              "text": "torch.log_(1 + x).sub_(torch.log_(1 - x))",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "torch.log_(1 + x).sub_",
                                                  "children": [
                                                    {
                                                      "type": "call",
                                                      "text": "torch.log_(1 + x)",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "text": "torch.log_",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "torch",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "log_",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(1 + x)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "binary_operator",
                                                              "text": "1 + x",
                                                              "children": [
                                                                {
                                                                  "type": "integer",
                                                                  "text": "1",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "+",
                                                                  "text": "+",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "text": "x",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "sub_",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(torch.log_(1 - x))",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "call",
                                                      "text": "torch.log_(1 - x)",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "text": "torch.log_",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "torch",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "log_",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(1 - x)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "binary_operator",
                                                              "text": "1 - x",
                                                              "children": [
                                                                {
                                                                  "type": "integer",
                                                                  "text": "1",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "-",
                                                                  "text": "-",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "text": "x",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "mul_",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(0.5)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "float",
                                          "text": "0.5",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "return_statement",
                          "text": "return res.to(dtype)",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "res.to(dtype)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "res.to",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "res",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "to",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dtype)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dtype",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "decorated_definition",
              "text": "@staticmethod\n    def backward(ctx, grad_output):\n        (input,) = ctx.saved_tensors\n        return grad_output / (1 - input ** 2)",
              "children": [
                {
                  "type": "decorator",
                  "text": "@staticmethod",
                  "children": [
                    {
                      "type": "@",
                      "text": "@",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "function_definition",
                  "text": "def backward(ctx, grad_output):\n        (input,) = ctx.saved_tensors\n        return grad_output / (1 - input ** 2)",
                  "children": [
                    {
                      "type": "def",
                      "text": "def",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "backward",
                      "children": []
                    },
                    {
                      "type": "parameters",
                      "text": "(ctx, grad_output)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "ctx",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "grad_output",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "(input,) = ctx.saved_tensors\n        return grad_output / (1 - input ** 2)",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "(input,) = ctx.saved_tensors",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "(input,) = ctx.saved_tensors",
                              "children": [
                                {
                                  "type": "tuple_pattern",
                                  "text": "(input,)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "input",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "attribute",
                                  "text": "ctx.saved_tensors",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "ctx",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "saved_tensors",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "return_statement",
                          "text": "return grad_output / (1 - input ** 2)",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "grad_output / (1 - input ** 2)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "grad_output",
                                  "children": []
                                },
                                {
                                  "type": "/",
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(1 - input ** 2)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "1 - input ** 2",
                                      "children": [
                                        {
                                          "type": "integer",
                                          "text": "1",
                                          "children": []
                                        },
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "input ** 2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "input",
                                              "children": []
                                            },
                                            {
                                              "type": "**",
                                              "text": "**",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "2",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "class_definition",
      "text": "class Arsinh(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, x):\n        ctx.save_for_backward(x)\n        z = x.double()\n        res = z + torch.sqrt_(1 + z.pow(2))\n        return (res).clamp_min_(MIN_NORM).log_().to(x.dtype)\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        (input,) = ctx.saved_tensors\n        return grad_output / (1 + input ** 2) ** 0.5",
      "children": [
        {
          "type": "class",
          "text": "class",
          "children": []
        },
        {
          "type": "identifier",
          "text": "Arsinh",
          "children": []
        },
        {
          "type": "argument_list",
          "text": "(torch.autograd.Function)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "attribute",
              "text": "torch.autograd.Function",
              "children": [
                {
                  "type": "attribute",
                  "text": "torch.autograd",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "torch",
                      "children": []
                    },
                    {
                      "type": ".",
                      "text": ".",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "autograd",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ".",
                  "text": ".",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "Function",
                  "children": []
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "@staticmethod\n    def forward(ctx, x):\n        ctx.save_for_backward(x)\n        z = x.double()\n        res = z + torch.sqrt_(1 + z.pow(2))\n        return (res).clamp_min_(MIN_NORM).log_().to(x.dtype)\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        (input,) = ctx.saved_tensors\n        return grad_output / (1 + input ** 2) ** 0.5",
          "children": [
            {
              "type": "decorated_definition",
              "text": "@staticmethod\n    def forward(ctx, x):\n        ctx.save_for_backward(x)\n        z = x.double()\n        res = z + torch.sqrt_(1 + z.pow(2))\n        return (res).clamp_min_(MIN_NORM).log_().to(x.dtype)",
              "children": [
                {
                  "type": "decorator",
                  "text": "@staticmethod",
                  "children": [
                    {
                      "type": "@",
                      "text": "@",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "function_definition",
                  "text": "def forward(ctx, x):\n        ctx.save_for_backward(x)\n        z = x.double()\n        res = z + torch.sqrt_(1 + z.pow(2))\n        return (res).clamp_min_(MIN_NORM).log_().to(x.dtype)",
                  "children": [
                    {
                      "type": "def",
                      "text": "def",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "forward",
                      "children": []
                    },
                    {
                      "type": "parameters",
                      "text": "(ctx, x)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "ctx",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "ctx.save_for_backward(x)\n        z = x.double()\n        res = z + torch.sqrt_(1 + z.pow(2))\n        return (res).clamp_min_(MIN_NORM).log_().to(x.dtype)",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "ctx.save_for_backward(x)",
                          "children": [
                            {
                              "type": "call",
                              "text": "ctx.save_for_backward(x)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "ctx.save_for_backward",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "ctx",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "save_for_backward",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(x)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "z = x.double()",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "z = x.double()",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "z",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "x.double()",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "x.double",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "double",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "res = z + torch.sqrt_(1 + z.pow(2))",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "res = z + torch.sqrt_(1 + z.pow(2))",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "res",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "z + torch.sqrt_(1 + z.pow(2))",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "z",
                                      "children": []
                                    },
                                    {
                                      "type": "+",
                                      "text": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "call",
                                      "text": "torch.sqrt_(1 + z.pow(2))",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "torch.sqrt_",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "torch",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "sqrt_",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(1 + z.pow(2))",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "1 + z.pow(2)",
                                              "children": [
                                                {
                                                  "type": "integer",
                                                  "text": "1",
                                                  "children": []
                                                },
                                                {
                                                  "type": "+",
                                                  "text": "+",
                                                  "children": []
                                                },
                                                {
                                                  "type": "call",
                                                  "text": "z.pow(2)",
                                                  "children": [
                                                    {
                                                      "type": "attribute",
                                                      "text": "z.pow",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "z",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": ".",
                                                          "text": ".",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "pow",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "argument_list",
                                                      "text": "(2)",
                                                      "children": [
                                                        {
                                                          "type": "(",
                                                          "text": "(",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "2",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": ")",
                                                          "text": ")",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "return_statement",
                          "text": "return (res).clamp_min_(MIN_NORM).log_().to(x.dtype)",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "(res).clamp_min_(MIN_NORM).log_().to(x.dtype)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "(res).clamp_min_(MIN_NORM).log_().to",
                                  "children": [
                                    {
                                      "type": "call",
                                      "text": "(res).clamp_min_(MIN_NORM).log_()",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "(res).clamp_min_(MIN_NORM).log_",
                                          "children": [
                                            {
                                              "type": "call",
                                              "text": "(res).clamp_min_(MIN_NORM)",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "(res).clamp_min_",
                                                  "children": [
                                                    {
                                                      "type": "parenthesized_expression",
                                                      "text": "(res)",
                                                      "children": [
                                                        {
                                                          "type": "(",
                                                          "text": "(",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "res",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": ")",
                                                          "text": ")",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "clamp_min_",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(MIN_NORM)",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "MIN_NORM",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "log_",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "()",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "to",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(x.dtype)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "attribute",
                                      "text": "x.dtype",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dtype",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "decorated_definition",
              "text": "@staticmethod\n    def backward(ctx, grad_output):\n        (input,) = ctx.saved_tensors\n        return grad_output / (1 + input ** 2) ** 0.5",
              "children": [
                {
                  "type": "decorator",
                  "text": "@staticmethod",
                  "children": [
                    {
                      "type": "@",
                      "text": "@",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "function_definition",
                  "text": "def backward(ctx, grad_output):\n        (input,) = ctx.saved_tensors\n        return grad_output / (1 + input ** 2) ** 0.5",
                  "children": [
                    {
                      "type": "def",
                      "text": "def",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "backward",
                      "children": []
                    },
                    {
                      "type": "parameters",
                      "text": "(ctx, grad_output)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "ctx",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "grad_output",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "(input,) = ctx.saved_tensors\n        return grad_output / (1 + input ** 2) ** 0.5",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "(input,) = ctx.saved_tensors",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "(input,) = ctx.saved_tensors",
                              "children": [
                                {
                                  "type": "tuple_pattern",
                                  "text": "(input,)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "input",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "attribute",
                                  "text": "ctx.saved_tensors",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "ctx",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "saved_tensors",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "return_statement",
                          "text": "return grad_output / (1 + input ** 2) ** 0.5",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "grad_output / (1 + input ** 2) ** 0.5",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "grad_output",
                                  "children": []
                                },
                                {
                                  "type": "/",
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "(1 + input ** 2) ** 0.5",
                                  "children": [
                                    {
                                      "type": "parenthesized_expression",
                                      "text": "(1 + input ** 2)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "1 + input ** 2",
                                          "children": [
                                            {
                                              "type": "integer",
                                              "text": "1",
                                              "children": []
                                            },
                                            {
                                              "type": "+",
                                              "text": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "input ** 2",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "input",
                                                  "children": []
                                                },
                                                {
                                                  "type": "**",
                                                  "text": "**",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "2",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "**",
                                      "text": "**",
                                      "children": []
                                    },
                                    {
                                      "type": "float",
                                      "text": "0.5",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def artanh(x):\n    return Artanh.apply(x)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "artanh",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "return Artanh.apply(x)",
          "children": [
            {
              "type": "return_statement",
              "text": "return Artanh.apply(x)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "Artanh.apply(x)",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "Artanh.apply",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "Artanh",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "apply",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "text": "(x)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def arsinh(x):\n    return Arsinh.apply(x)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "arsinh",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "return Arsinh.apply(x)",
          "children": [
            {
              "type": "return_statement",
              "text": "return Arsinh.apply(x)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "Arsinh.apply(x)",
                  "children": [
                    {
                      "type": "attribute",
                      "text": "Arsinh.apply",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "Arsinh",
                          "children": []
                        },
                        {
                          "type": ".",
                          "text": ".",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "apply",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "text": "(x)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "comment",
      "text": "# CURVATURE-PARAMETRIZED TRIGONOMETRIC FUNCTIONS ###############################",
      "children": []
    },
    {
      "type": "expression_statement",
      "text": "\"\"\"\nThe following functions select the appropriate trigonometric function (normal or\nhyperbolic) depending on the value of the curvature :math:`\\kappa`.\n\"\"\"",
      "children": [
        {
          "type": "string",
          "text": "\"\"\"\nThe following functions select the appropriate trigonometric function (normal or\nhyperbolic) depending on the value of the curvature :math:`\\kappa`.\n\"\"\"",
          "children": [
            {
              "type": "\"",
              "text": "\"\"\"",
              "children": []
            },
            {
              "type": "\"",
              "text": "\"\"\"",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def tan_K(x, K):\n    if K <= 0:\n        sqrt_minus_K = torch.sqrt(-K)\n        return (1.0/sqrt_minus_K) * tanh(sqrt_minus_K * x)\n    else:\n        sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.tan(sqrt_K * x)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "tan_K",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, K)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "if K <= 0:\n        sqrt_minus_K = torch.sqrt(-K)\n        return (1.0/sqrt_minus_K) * tanh(sqrt_minus_K * x)\n    else:\n        sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.tan(sqrt_K * x)",
          "children": [
            {
              "type": "if_statement",
              "text": "if K <= 0:\n        sqrt_minus_K = torch.sqrt(-K)\n        return (1.0/sqrt_minus_K) * tanh(sqrt_minus_K * x)\n    else:\n        sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.tan(sqrt_K * x)",
              "children": [
                {
                  "type": "if",
                  "text": "if",
                  "children": []
                },
                {
                  "type": "comparison_operator",
                  "text": "K <= 0",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "K",
                      "children": []
                    },
                    {
                      "type": "<=",
                      "text": "<=",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "sqrt_minus_K = torch.sqrt(-K)\n        return (1.0/sqrt_minus_K) * tanh(sqrt_minus_K * x)",
                  "children": [
                    {
                      "type": "expression_statement",
                      "text": "sqrt_minus_K = torch.sqrt(-K)",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "sqrt_minus_K = torch.sqrt(-K)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "sqrt_minus_K",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "torch.sqrt(-K)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "torch.sqrt",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "torch",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "sqrt",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(-K)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "unary_operator",
                                      "text": "-K",
                                      "children": [
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "K",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "return_statement",
                      "text": "return (1.0/sqrt_minus_K) * tanh(sqrt_minus_K * x)",
                      "children": [
                        {
                          "type": "return",
                          "text": "return",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "(1.0/sqrt_minus_K) * tanh(sqrt_minus_K * x)",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(1.0/sqrt_minus_K)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "1.0/sqrt_minus_K",
                                  "children": [
                                    {
                                      "type": "float",
                                      "text": "1.0",
                                      "children": []
                                    },
                                    {
                                      "type": "/",
                                      "text": "/",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "sqrt_minus_K",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "tanh(sqrt_minus_K * x)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "tanh",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(sqrt_minus_K * x)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "sqrt_minus_K * x",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "sqrt_minus_K",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "text": "else:\n        sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.tan(sqrt_K * x)",
                  "children": [
                    {
                      "type": "else",
                      "text": "else",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.tan(sqrt_K * x)",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "sqrt_K = torch.sqrt(K)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "sqrt_K = torch.sqrt(K)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "sqrt_K",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.sqrt(K)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.sqrt",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "sqrt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(K)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "K",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "return_statement",
                          "text": "return (1.0/sqrt_K) * torch.tan(sqrt_K * x)",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "(1.0/sqrt_K) * torch.tan(sqrt_K * x)",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(1.0/sqrt_K)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "1.0/sqrt_K",
                                      "children": [
                                        {
                                          "type": "float",
                                          "text": "1.0",
                                          "children": []
                                        },
                                        {
                                          "type": "/",
                                          "text": "/",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "sqrt_K",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.tan(sqrt_K * x)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.tan",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "tan",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(sqrt_K * x)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "sqrt_K * x",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "sqrt_K",
                                              "children": []
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def arctan_K(x, K):\n    if K <= 0:\n        sqrt_minus_K = torch.sqrt(-K)\n        return (1.0/sqrt_minus_K) * artanh(sqrt_minus_K * x)\n    else:\n        sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.atan(sqrt_K * x)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "arctan_K",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, K)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "if K <= 0:\n        sqrt_minus_K = torch.sqrt(-K)\n        return (1.0/sqrt_minus_K) * artanh(sqrt_minus_K * x)\n    else:\n        sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.atan(sqrt_K * x)",
          "children": [
            {
              "type": "if_statement",
              "text": "if K <= 0:\n        sqrt_minus_K = torch.sqrt(-K)\n        return (1.0/sqrt_minus_K) * artanh(sqrt_minus_K * x)\n    else:\n        sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.atan(sqrt_K * x)",
              "children": [
                {
                  "type": "if",
                  "text": "if",
                  "children": []
                },
                {
                  "type": "comparison_operator",
                  "text": "K <= 0",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "K",
                      "children": []
                    },
                    {
                      "type": "<=",
                      "text": "<=",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "sqrt_minus_K = torch.sqrt(-K)\n        return (1.0/sqrt_minus_K) * artanh(sqrt_minus_K * x)",
                  "children": [
                    {
                      "type": "expression_statement",
                      "text": "sqrt_minus_K = torch.sqrt(-K)",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "sqrt_minus_K = torch.sqrt(-K)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "sqrt_minus_K",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "torch.sqrt(-K)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "torch.sqrt",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "torch",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "sqrt",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(-K)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "unary_operator",
                                      "text": "-K",
                                      "children": [
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "K",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "return_statement",
                      "text": "return (1.0/sqrt_minus_K) * artanh(sqrt_minus_K * x)",
                      "children": [
                        {
                          "type": "return",
                          "text": "return",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "(1.0/sqrt_minus_K) * artanh(sqrt_minus_K * x)",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(1.0/sqrt_minus_K)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "1.0/sqrt_minus_K",
                                  "children": [
                                    {
                                      "type": "float",
                                      "text": "1.0",
                                      "children": []
                                    },
                                    {
                                      "type": "/",
                                      "text": "/",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "sqrt_minus_K",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "artanh(sqrt_minus_K * x)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "artanh",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(sqrt_minus_K * x)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "sqrt_minus_K * x",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "sqrt_minus_K",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "text": "else:\n        sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.atan(sqrt_K * x)",
                  "children": [
                    {
                      "type": "else",
                      "text": "else",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.atan(sqrt_K * x)",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "sqrt_K = torch.sqrt(K)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "sqrt_K = torch.sqrt(K)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "sqrt_K",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.sqrt(K)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.sqrt",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "sqrt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(K)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "K",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "return_statement",
                          "text": "return (1.0/sqrt_K) * torch.atan(sqrt_K * x)",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "(1.0/sqrt_K) * torch.atan(sqrt_K * x)",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(1.0/sqrt_K)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "1.0/sqrt_K",
                                      "children": [
                                        {
                                          "type": "float",
                                          "text": "1.0",
                                          "children": []
                                        },
                                        {
                                          "type": "/",
                                          "text": "/",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "sqrt_K",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.atan(sqrt_K * x)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.atan",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "atan",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(sqrt_K * x)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "sqrt_K * x",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "sqrt_K",
                                              "children": []
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def arcsin_K(x, K):\n    if K <= 0:\n        sqrt_minus_K = torch.sqrt(-K)\n        return (1.0/sqrt_minus_K) * arsinh(sqrt_minus_K * x)\n    else:\n        sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.asin(sqrt_K * x)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "arcsin_K",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, K)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "if K <= 0:\n        sqrt_minus_K = torch.sqrt(-K)\n        return (1.0/sqrt_minus_K) * arsinh(sqrt_minus_K * x)\n    else:\n        sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.asin(sqrt_K * x)",
          "children": [
            {
              "type": "if_statement",
              "text": "if K <= 0:\n        sqrt_minus_K = torch.sqrt(-K)\n        return (1.0/sqrt_minus_K) * arsinh(sqrt_minus_K * x)\n    else:\n        sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.asin(sqrt_K * x)",
              "children": [
                {
                  "type": "if",
                  "text": "if",
                  "children": []
                },
                {
                  "type": "comparison_operator",
                  "text": "K <= 0",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "K",
                      "children": []
                    },
                    {
                      "type": "<=",
                      "text": "<=",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "sqrt_minus_K = torch.sqrt(-K)\n        return (1.0/sqrt_minus_K) * arsinh(sqrt_minus_K * x)",
                  "children": [
                    {
                      "type": "expression_statement",
                      "text": "sqrt_minus_K = torch.sqrt(-K)",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "sqrt_minus_K = torch.sqrt(-K)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "sqrt_minus_K",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "torch.sqrt(-K)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "torch.sqrt",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "torch",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "sqrt",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(-K)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "unary_operator",
                                      "text": "-K",
                                      "children": [
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "K",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "return_statement",
                      "text": "return (1.0/sqrt_minus_K) * arsinh(sqrt_minus_K * x)",
                      "children": [
                        {
                          "type": "return",
                          "text": "return",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "(1.0/sqrt_minus_K) * arsinh(sqrt_minus_K * x)",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(1.0/sqrt_minus_K)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "1.0/sqrt_minus_K",
                                  "children": [
                                    {
                                      "type": "float",
                                      "text": "1.0",
                                      "children": []
                                    },
                                    {
                                      "type": "/",
                                      "text": "/",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "sqrt_minus_K",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "arsinh(sqrt_minus_K * x)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "arsinh",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(sqrt_minus_K * x)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "sqrt_minus_K * x",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "sqrt_minus_K",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "text": "else:\n        sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.asin(sqrt_K * x)",
                  "children": [
                    {
                      "type": "else",
                      "text": "else",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "sqrt_K = torch.sqrt(K)\n        return (1.0/sqrt_K) * torch.asin(sqrt_K * x)",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "sqrt_K = torch.sqrt(K)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "sqrt_K = torch.sqrt(K)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "sqrt_K",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.sqrt(K)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.sqrt",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "sqrt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(K)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "K",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "return_statement",
                          "text": "return (1.0/sqrt_K) * torch.asin(sqrt_K * x)",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "(1.0/sqrt_K) * torch.asin(sqrt_K * x)",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(1.0/sqrt_K)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "1.0/sqrt_K",
                                      "children": [
                                        {
                                          "type": "float",
                                          "text": "1.0",
                                          "children": []
                                        },
                                        {
                                          "type": "/",
                                          "text": "/",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "sqrt_K",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.asin(sqrt_K * x)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.asin",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "asin",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(sqrt_K * x)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "sqrt_K * x",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "sqrt_K",
                                              "children": []
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "comment",
      "text": "# GYROVECTOR SPACE MATH ########################################################",
      "children": []
    },
    {
      "type": "function_definition",
      "text": "def project(x, *, K=1.0, dim=-1, eps=None):\n    r\"\"\"\n    Safe projects :math:`x` into the manifold for numerical stability. Only has\n    an effect for the Poincaré ball, not for the stereographic projection of the\n    sphere.\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension to compute norm\n    eps : float\n        stability parameter, uses default for dtype if not provided\n        (see BALL_EPS above)\n\n    Returns\n    -------\n    tensor\n        projected vector on the manifold\n    \"\"\"\n    return _project(x, K, dim, eps)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "project",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, *, K=1.0, dim=-1, eps=None)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "eps=None",
              "children": [
                {
                  "type": "identifier",
                  "text": "eps",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "none",
                  "text": "None",
                  "children": []
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Safe projects :math:`x` into the manifold for numerical stability. Only has\n    an effect for the Poincaré ball, not for the stereographic projection of the\n    sphere.\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension to compute norm\n    eps : float\n        stability parameter, uses default for dtype if not provided\n        (see BALL_EPS above)\n\n    Returns\n    -------\n    tensor\n        projected vector on the manifold\n    \"\"\"\n    return _project(x, K, dim, eps)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Safe projects :math:`x` into the manifold for numerical stability. Only has\n    an effect for the Poincaré ball, not for the stereographic projection of the\n    sphere.\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension to compute norm\n    eps : float\n        stability parameter, uses default for dtype if not provided\n        (see BALL_EPS above)\n\n    Returns\n    -------\n    tensor\n        projected vector on the manifold\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Safe projects :math:`x` into the manifold for numerical stability. Only has\n    an effect for the Poincaré ball, not for the stereographic projection of the\n    sphere.\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension to compute norm\n    eps : float\n        stability parameter, uses default for dtype if not provided\n        (see BALL_EPS above)\n\n    Returns\n    -------\n    tensor\n        projected vector on the manifold\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _project(x, K, dim, eps)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_project(x, K, dim, eps)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_project",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, K, dim, eps)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "dim",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "eps",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _project(x, K, dim: int = -1, eps: float = None):\n    K_smaller_zero = K < 0\n    num_smaller_zero = K_smaller_zero.sum()\n    # this check is done to improve performance\n    # (no projections or norm-checks if K >= 0)\n    if num_smaller_zero > 0:\n        norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n        if eps is None:\n            eps = BALL_EPS[x.dtype]\n        maxnorm = (1 - eps) / (K.abs().sqrt())\n        cond = (norm > maxnorm) * K_smaller_zero\n        projected = (x / norm) * maxnorm\n        return torch.where(cond, projected, x)\n    else:\n        return x",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_project",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, K, dim: int = -1, eps: float = None)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "eps: float = None",
              "children": [
                {
                  "type": "identifier",
                  "text": "eps",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "float",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "float",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "none",
                  "text": "None",
                  "children": []
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "K_smaller_zero = K < 0\n    num_smaller_zero = K_smaller_zero.sum()\n    # this check is done to improve performance\n    # (no projections or norm-checks if K >= 0)\n    if num_smaller_zero > 0:\n        norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n        if eps is None:\n            eps = BALL_EPS[x.dtype]\n        maxnorm = (1 - eps) / (K.abs().sqrt())\n        cond = (norm > maxnorm) * K_smaller_zero\n        projected = (x / norm) * maxnorm\n        return torch.where(cond, projected, x)\n    else:\n        return x",
          "children": [
            {
              "type": "expression_statement",
              "text": "K_smaller_zero = K < 0",
              "children": [
                {
                  "type": "assignment",
                  "text": "K_smaller_zero = K < 0",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "K_smaller_zero",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "comparison_operator",
                      "text": "K < 0",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": "<",
                          "text": "<",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "0",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "num_smaller_zero = K_smaller_zero.sum()",
              "children": [
                {
                  "type": "assignment",
                  "text": "num_smaller_zero = K_smaller_zero.sum()",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "num_smaller_zero",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "K_smaller_zero.sum()",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "K_smaller_zero.sum",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "K_smaller_zero",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "sum",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "()",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "text": "# this check is done to improve performance",
              "children": []
            },
            {
              "type": "comment",
              "text": "# (no projections or norm-checks if K >= 0)",
              "children": []
            },
            {
              "type": "if_statement",
              "text": "if num_smaller_zero > 0:\n        norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n        if eps is None:\n            eps = BALL_EPS[x.dtype]\n        maxnorm = (1 - eps) / (K.abs().sqrt())\n        cond = (norm > maxnorm) * K_smaller_zero\n        projected = (x / norm) * maxnorm\n        return torch.where(cond, projected, x)\n    else:\n        return x",
              "children": [
                {
                  "type": "if",
                  "text": "if",
                  "children": []
                },
                {
                  "type": "comparison_operator",
                  "text": "num_smaller_zero > 0",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "num_smaller_zero",
                      "children": []
                    },
                    {
                      "type": ">",
                      "text": ">",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n        if eps is None:\n            eps = BALL_EPS[x.dtype]\n        maxnorm = (1 - eps) / (K.abs().sqrt())\n        cond = (norm > maxnorm) * K_smaller_zero\n        projected = (x / norm) * maxnorm\n        return torch.where(cond, projected, x)",
                  "children": [
                    {
                      "type": "expression_statement",
                      "text": "norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "norm",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "x.norm(dim=dim, keepdim=True, p=2).clamp_min",
                                  "children": [
                                    {
                                      "type": "call",
                                      "text": "x.norm(dim=dim, keepdim=True, p=2)",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "x.norm",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "norm",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(dim=dim, keepdim=True, p=2)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "keyword_argument",
                                              "text": "dim=dim",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "dim",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "dim",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "keyword_argument",
                                              "text": "keepdim=True",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "keepdim",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "true",
                                                  "text": "True",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "keyword_argument",
                                              "text": "p=2",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "p",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "2",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "clamp_min",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(MIN_NORM)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "MIN_NORM",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "if_statement",
                      "text": "if eps is None:\n            eps = BALL_EPS[x.dtype]",
                      "children": [
                        {
                          "type": "if",
                          "text": "if",
                          "children": []
                        },
                        {
                          "type": "comparison_operator",
                          "text": "eps is None",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "eps",
                              "children": []
                            },
                            {
                              "type": "is",
                              "text": "is",
                              "children": []
                            },
                            {
                              "type": "none",
                              "text": "None",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "block",
                          "text": "eps = BALL_EPS[x.dtype]",
                          "children": [
                            {
                              "type": "expression_statement",
                              "text": "eps = BALL_EPS[x.dtype]",
                              "children": [
                                {
                                  "type": "assignment",
                                  "text": "eps = BALL_EPS[x.dtype]",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "eps",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "subscript",
                                      "text": "BALL_EPS[x.dtype]",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "BALL_EPS",
                                          "children": []
                                        },
                                        {
                                          "type": "[",
                                          "text": "[",
                                          "children": []
                                        },
                                        {
                                          "type": "attribute",
                                          "text": "x.dtype",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dtype",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "]",
                                          "text": "]",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "text": "maxnorm = (1 - eps) / (K.abs().sqrt())",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "maxnorm = (1 - eps) / (K.abs().sqrt())",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "maxnorm",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "(1 - eps) / (K.abs().sqrt())",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(1 - eps)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "1 - eps",
                                      "children": [
                                        {
                                          "type": "integer",
                                          "text": "1",
                                          "children": []
                                        },
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "eps",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "/",
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(K.abs().sqrt())",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "call",
                                      "text": "K.abs().sqrt()",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "K.abs().sqrt",
                                          "children": [
                                            {
                                              "type": "call",
                                              "text": "K.abs()",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "K.abs",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "K",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "abs",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "()",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "sqrt",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "()",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "text": "cond = (norm > maxnorm) * K_smaller_zero",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "cond = (norm > maxnorm) * K_smaller_zero",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "cond",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "(norm > maxnorm) * K_smaller_zero",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(norm > maxnorm)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "comparison_operator",
                                      "text": "norm > maxnorm",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "norm",
                                          "children": []
                                        },
                                        {
                                          "type": ">",
                                          "text": ">",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "maxnorm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "K_smaller_zero",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "text": "projected = (x / norm) * maxnorm",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "projected = (x / norm) * maxnorm",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "projected",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "(x / norm) * maxnorm",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(x / norm)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "x / norm",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "/",
                                          "text": "/",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "maxnorm",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "return_statement",
                      "text": "return torch.where(cond, projected, x)",
                      "children": [
                        {
                          "type": "return",
                          "text": "return",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.where(cond, projected, x)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.where",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "where",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(cond, projected, x)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "cond",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "projected",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "text": "else:\n        return x",
                  "children": [
                    {
                      "type": "else",
                      "text": "else",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "return x",
                      "children": [
                        {
                          "type": "return_statement",
                          "text": "return x",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def gamma_x(x, *, K=1.0, keepdim=False, dim=-1):\n    r\"\"\"\n    Computes the Lorentz factor :math:`\\gamma^\\kappa_x` at the point\n    :math:`x` on the manifold.\n\n    .. math::\n\n        \\lambda^\\kappa_x = \\frac{1}{1 + \\kappa \\|x\\|_2^2}\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        Lorentz factor\n    \"\"\"\n    return _gamma_x(x, K, keepdim=keepdim, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "gamma_x",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, *, K=1.0, keepdim=False, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "keepdim=False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the Lorentz factor :math:`\\gamma^\\kappa_x` at the point\n    :math:`x` on the manifold.\n\n    .. math::\n\n        \\lambda^\\kappa_x = \\frac{1}{1 + \\kappa \\|x\\|_2^2}\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        Lorentz factor\n    \"\"\"\n    return _gamma_x(x, K, keepdim=keepdim, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the Lorentz factor :math:`\\gamma^\\kappa_x` at the point\n    :math:`x` on the manifold.\n\n    .. math::\n\n        \\lambda^\\kappa_x = \\frac{1}{1 + \\kappa \\|x\\|_2^2}\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        Lorentz factor\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the Lorentz factor :math:`\\gamma^\\kappa_x` at the point\n    :math:`x` on the manifold.\n\n    .. math::\n\n        \\lambda^\\kappa_x = \\frac{1}{1 + \\kappa \\|x\\|_2^2}\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        Lorentz factor\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _gamma_x(x, K, keepdim=keepdim, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_gamma_x(x, K, keepdim=keepdim, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_gamma_x",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, K, keepdim=keepdim, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "keepdim=keepdim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _gamma_x(x, K, keepdim: bool = False, dim: int = -1):\n    x_norm = x.pow(2).sum(dim=dim, keepdim=keepdim)\n    gam = 1.0/(torch.sqrt(1.0+K*x_norm).clamp_min(MIN_NORM))\n    return gam",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_gamma_x",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, K, keepdim: bool = False, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "keepdim: bool = False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "bool",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "x_norm = x.pow(2).sum(dim=dim, keepdim=keepdim)\n    gam = 1.0/(torch.sqrt(1.0+K*x_norm).clamp_min(MIN_NORM))\n    return gam",
          "children": [
            {
              "type": "expression_statement",
              "text": "x_norm = x.pow(2).sum(dim=dim, keepdim=keepdim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "x_norm = x.pow(2).sum(dim=dim, keepdim=keepdim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x_norm",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "x.pow(2).sum(dim=dim, keepdim=keepdim)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "x.pow(2).sum",
                          "children": [
                            {
                              "type": "call",
                              "text": "x.pow(2)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "x.pow",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "pow",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(2)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "2",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "sum",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(dim=dim, keepdim=keepdim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=keepdim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "gam = 1.0/(torch.sqrt(1.0+K*x_norm).clamp_min(MIN_NORM))",
              "children": [
                {
                  "type": "assignment",
                  "text": "gam = 1.0/(torch.sqrt(1.0+K*x_norm).clamp_min(MIN_NORM))",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "gam",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "1.0/(torch.sqrt(1.0+K*x_norm).clamp_min(MIN_NORM))",
                      "children": [
                        {
                          "type": "float",
                          "text": "1.0",
                          "children": []
                        },
                        {
                          "type": "/",
                          "text": "/",
                          "children": []
                        },
                        {
                          "type": "parenthesized_expression",
                          "text": "(torch.sqrt(1.0+K*x_norm).clamp_min(MIN_NORM))",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "torch.sqrt(1.0+K*x_norm).clamp_min(MIN_NORM)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "torch.sqrt(1.0+K*x_norm).clamp_min",
                                  "children": [
                                    {
                                      "type": "call",
                                      "text": "torch.sqrt(1.0+K*x_norm)",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "torch.sqrt",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "torch",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "sqrt",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(1.0+K*x_norm)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "1.0+K*x_norm",
                                              "children": [
                                                {
                                                  "type": "float",
                                                  "text": "1.0",
                                                  "children": []
                                                },
                                                {
                                                  "type": "+",
                                                  "text": "+",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_operator",
                                                  "text": "K*x_norm",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "K",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "*",
                                                      "text": "*",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "x_norm",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "clamp_min",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(MIN_NORM)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "MIN_NORM",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return gam",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "gam",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def lambda_x(x, *, K=1.0, keepdim=False, dim=-1):\n    r\"\"\"\n    Computes the conformal factor :math:`\\lambda^\\kappa_x` at the point\n    :math:`x` on the manifold.\n\n    .. math::\n\n        \\lambda^\\kappa_x = \\frac{1}{1 + \\kappa \\|x\\|_2^2}\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        conformal factor\n    \"\"\"\n    return _lambda_x(x, K, keepdim=keepdim, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "lambda_x",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, *, K=1.0, keepdim=False, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "keepdim=False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the conformal factor :math:`\\lambda^\\kappa_x` at the point\n    :math:`x` on the manifold.\n\n    .. math::\n\n        \\lambda^\\kappa_x = \\frac{1}{1 + \\kappa \\|x\\|_2^2}\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        conformal factor\n    \"\"\"\n    return _lambda_x(x, K, keepdim=keepdim, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the conformal factor :math:`\\lambda^\\kappa_x` at the point\n    :math:`x` on the manifold.\n\n    .. math::\n\n        \\lambda^\\kappa_x = \\frac{1}{1 + \\kappa \\|x\\|_2^2}\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        conformal factor\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the conformal factor :math:`\\lambda^\\kappa_x` at the point\n    :math:`x` on the manifold.\n\n    .. math::\n\n        \\lambda^\\kappa_x = \\frac{1}{1 + \\kappa \\|x\\|_2^2}\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        conformal factor\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _lambda_x(x, K, keepdim=keepdim, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_lambda_x(x, K, keepdim=keepdim, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_lambda_x",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, K, keepdim=keepdim, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "keepdim=keepdim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _lambda_x(x, K, keepdim: bool = False, dim: int = -1):\n    lam = 2.0/(1.0+K*x.pow(2).sum(dim=dim, keepdim=keepdim)).clamp_min(MIN_NORM)\n    return lam",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_lambda_x",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, K, keepdim: bool = False, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "keepdim: bool = False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "bool",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "lam = 2.0/(1.0+K*x.pow(2).sum(dim=dim, keepdim=keepdim)).clamp_min(MIN_NORM)\n    return lam",
          "children": [
            {
              "type": "expression_statement",
              "text": "lam = 2.0/(1.0+K*x.pow(2).sum(dim=dim, keepdim=keepdim)).clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "assignment",
                  "text": "lam = 2.0/(1.0+K*x.pow(2).sum(dim=dim, keepdim=keepdim)).clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "lam",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "2.0/(1.0+K*x.pow(2).sum(dim=dim, keepdim=keepdim)).clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "float",
                          "text": "2.0",
                          "children": []
                        },
                        {
                          "type": "/",
                          "text": "/",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "(1.0+K*x.pow(2).sum(dim=dim, keepdim=keepdim)).clamp_min(MIN_NORM)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "(1.0+K*x.pow(2).sum(dim=dim, keepdim=keepdim)).clamp_min",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(1.0+K*x.pow(2).sum(dim=dim, keepdim=keepdim))",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "1.0+K*x.pow(2).sum(dim=dim, keepdim=keepdim)",
                                      "children": [
                                        {
                                          "type": "float",
                                          "text": "1.0",
                                          "children": []
                                        },
                                        {
                                          "type": "+",
                                          "text": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "K*x.pow(2).sum(dim=dim, keepdim=keepdim)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "K",
                                              "children": []
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "call",
                                              "text": "x.pow(2).sum(dim=dim, keepdim=keepdim)",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "x.pow(2).sum",
                                                  "children": [
                                                    {
                                                      "type": "call",
                                                      "text": "x.pow(2)",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "text": "x.pow",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "text": "x",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ".",
                                                              "text": ".",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "text": "pow",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "text": "(2)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "text": "(",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "2",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": ")",
                                                              "text": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "sum",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "(dim=dim, keepdim=keepdim)",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "keyword_argument",
                                                      "text": "dim=dim",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "dim",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "=",
                                                          "text": "=",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "dim",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ",",
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "keyword_argument",
                                                      "text": "keepdim=keepdim",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "keepdim",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "=",
                                                          "text": "=",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "keepdim",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(MIN_NORM)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "MIN_NORM",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return lam",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "lam",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def inner(x, u, v, *, K=1.0, keepdim=False, dim=-1):\n    r\"\"\"\n    Computes the inner product for two vectors :math:`u,v` in the tangent space\n    of :math:`x` w.r.t the Riemannian metric of the manifold.\n\n    .. math::\n\n        \\langle u, v\\rangle_x = (\\lambda^\\kappa_x)^2 \\langle u, v \\rangle\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    u : tensor\n        tangent vector to :math:`x` on manifold\n    v : tensor\n        tangent vector to :math:`x` on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        inner product\n    \"\"\"\n    inner_prod = _inner(x, u, v, K, keepdim=keepdim, dim=dim)\n    return inner_prod",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "inner",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, u, v, *, K=1.0, keepdim=False, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "u",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "v",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "keepdim=False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the inner product for two vectors :math:`u,v` in the tangent space\n    of :math:`x` w.r.t the Riemannian metric of the manifold.\n\n    .. math::\n\n        \\langle u, v\\rangle_x = (\\lambda^\\kappa_x)^2 \\langle u, v \\rangle\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    u : tensor\n        tangent vector to :math:`x` on manifold\n    v : tensor\n        tangent vector to :math:`x` on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        inner product\n    \"\"\"\n    inner_prod = _inner(x, u, v, K, keepdim=keepdim, dim=dim)\n    return inner_prod",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the inner product for two vectors :math:`u,v` in the tangent space\n    of :math:`x` w.r.t the Riemannian metric of the manifold.\n\n    .. math::\n\n        \\langle u, v\\rangle_x = (\\lambda^\\kappa_x)^2 \\langle u, v \\rangle\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    u : tensor\n        tangent vector to :math:`x` on manifold\n    v : tensor\n        tangent vector to :math:`x` on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        inner product\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the inner product for two vectors :math:`u,v` in the tangent space\n    of :math:`x` w.r.t the Riemannian metric of the manifold.\n\n    .. math::\n\n        \\langle u, v\\rangle_x = (\\lambda^\\kappa_x)^2 \\langle u, v \\rangle\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    u : tensor\n        tangent vector to :math:`x` on manifold\n    v : tensor\n        tangent vector to :math:`x` on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        inner product\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "inner_prod = _inner(x, u, v, K, keepdim=keepdim, dim=dim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "inner_prod = _inner(x, u, v, K, keepdim=keepdim, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "inner_prod",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_inner(x, u, v, K, keepdim=keepdim, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_inner",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(x, u, v, K, keepdim=keepdim, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "u",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "v",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=keepdim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return inner_prod",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "inner_prod",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _inner(x, u, v, K, keepdim: bool = False, dim: int = -1):\n    return _lambda_x(x, K, keepdim=True, dim=dim) ** 2 * \\\n           (u * v).sum(dim=dim, keepdim=keepdim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_inner",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, u, v, K, keepdim: bool = False, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "u",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "v",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "keepdim: bool = False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "bool",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "return _lambda_x(x, K, keepdim=True, dim=dim) ** 2 * \\\n           (u * v).sum(dim=dim, keepdim=keepdim)",
          "children": [
            {
              "type": "return_statement",
              "text": "return _lambda_x(x, K, keepdim=True, dim=dim) ** 2 * \\\n           (u * v).sum(dim=dim, keepdim=keepdim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "binary_operator",
                  "text": "_lambda_x(x, K, keepdim=True, dim=dim) ** 2 * \\\n           (u * v).sum(dim=dim, keepdim=keepdim)",
                  "children": [
                    {
                      "type": "binary_operator",
                      "text": "_lambda_x(x, K, keepdim=True, dim=dim) ** 2",
                      "children": [
                        {
                          "type": "call",
                          "text": "_lambda_x(x, K, keepdim=True, dim=dim)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_lambda_x",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(x, K, keepdim=True, dim=dim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "K",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "**",
                          "text": "**",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "2",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "*",
                      "text": "*",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "(u * v).sum(dim=dim, keepdim=keepdim)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "(u * v).sum",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(u * v)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "u * v",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "u",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "v",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "sum",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(dim=dim, keepdim=keepdim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=keepdim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def norm(x, u, *, K=1.0, keepdim=False, dim=-1):\n    r\"\"\"\n    Computes the norm of a vectors :math:`u` in the tangent space of :math:`x`\n    w.r.t the Riemannian metric of the manifold.\n\n    .. math::\n\n        \\|u\\|_x = \\lambda^\\kappa_x \\|u\\|_2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    u : tensor\n        tangent vector to :math:`x` on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        norm of vector\n    \"\"\"\n    return _norm(x, u, K, keepdim=keepdim, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "norm",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, u, *, K=1.0, keepdim=False, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "u",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "keepdim=False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the norm of a vectors :math:`u` in the tangent space of :math:`x`\n    w.r.t the Riemannian metric of the manifold.\n\n    .. math::\n\n        \\|u\\|_x = \\lambda^\\kappa_x \\|u\\|_2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    u : tensor\n        tangent vector to :math:`x` on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        norm of vector\n    \"\"\"\n    return _norm(x, u, K, keepdim=keepdim, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the norm of a vectors :math:`u` in the tangent space of :math:`x`\n    w.r.t the Riemannian metric of the manifold.\n\n    .. math::\n\n        \\|u\\|_x = \\lambda^\\kappa_x \\|u\\|_2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    u : tensor\n        tangent vector to :math:`x` on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        norm of vector\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the norm of a vectors :math:`u` in the tangent space of :math:`x`\n    w.r.t the Riemannian metric of the manifold.\n\n    .. math::\n\n        \\|u\\|_x = \\lambda^\\kappa_x \\|u\\|_2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    u : tensor\n        tangent vector to :math:`x` on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        norm of vector\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _norm(x, u, K, keepdim=keepdim, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_norm(x, u, K, keepdim=keepdim, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_norm",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, u, K, keepdim=keepdim, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "u",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "keepdim=keepdim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _norm(x, u, K, keepdim: bool = False, dim: int = -1):\n    lam = _lambda_x(x, K, keepdim=keepdim, dim=dim)\n    u_norm = u.norm(dim=dim, keepdim=keepdim, p=2)\n    return lam * u_norm",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_norm",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, u, K, keepdim: bool = False, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "u",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "keepdim: bool = False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "bool",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "lam = _lambda_x(x, K, keepdim=keepdim, dim=dim)\n    u_norm = u.norm(dim=dim, keepdim=keepdim, p=2)\n    return lam * u_norm",
          "children": [
            {
              "type": "expression_statement",
              "text": "lam = _lambda_x(x, K, keepdim=keepdim, dim=dim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "lam = _lambda_x(x, K, keepdim=keepdim, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "lam",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_lambda_x(x, K, keepdim=keepdim, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_lambda_x",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(x, K, keepdim=keepdim, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=keepdim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "u_norm = u.norm(dim=dim, keepdim=keepdim, p=2)",
              "children": [
                {
                  "type": "assignment",
                  "text": "u_norm = u.norm(dim=dim, keepdim=keepdim, p=2)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "u_norm",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "u.norm(dim=dim, keepdim=keepdim, p=2)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "u.norm",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "u",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "norm",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(dim=dim, keepdim=keepdim, p=2)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=keepdim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "p=2",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "p",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "integer",
                                  "text": "2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return lam * u_norm",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "binary_operator",
                  "text": "lam * u_norm",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "lam",
                      "children": []
                    },
                    {
                      "type": "*",
                      "text": "*",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "u_norm",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def mobius_add(x, y, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the Möbius gyrovector addition.\n\n    .. math::\n\n        x \\oplus_\\kappa y =\n        \\frac{\n            (1 - 2 \\kappa \\langle x, y\\rangle - \\kappa \\|y\\|^2_2) x +\n            (1 + \\kappa \\|x\\|_2^2) y\n        }{\n            1 - 2 \\kappa \\langle x, y\\rangle + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        }\n\n    .. plot:: plots/extended/universal/mobius_add.py\n\n    In general this operation is not commutative:\n\n    .. math::\n\n        x \\oplus_\\kappa y \\ne y \\oplus_\\kappa x\n\n    But in some cases this property holds:\n\n    * zero vector case\n\n    .. math::\n\n        \\mathbf{0} \\oplus_\\kappa x = x \\oplus_\\kappa \\mathbf{0}\n\n    * zero curvature case that is same as Euclidean addition\n\n    .. math::\n\n        x \\oplus_0 y = y \\oplus_0 x\n\n    Another useful property is so called left-cancellation law:\n\n    .. math::\n\n        (-x) \\oplus_\\kappa (x \\oplus_\\kappa y) = y\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    y : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius addition\n    \"\"\"\n    return _mobius_add(x, y, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_add",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, y, *, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the Möbius gyrovector addition.\n\n    .. math::\n\n        x \\oplus_\\kappa y =\n        \\frac{\n            (1 - 2 \\kappa \\langle x, y\\rangle - \\kappa \\|y\\|^2_2) x +\n            (1 + \\kappa \\|x\\|_2^2) y\n        }{\n            1 - 2 \\kappa \\langle x, y\\rangle + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        }\n\n    .. plot:: plots/extended/universal/mobius_add.py\n\n    In general this operation is not commutative:\n\n    .. math::\n\n        x \\oplus_\\kappa y \\ne y \\oplus_\\kappa x\n\n    But in some cases this property holds:\n\n    * zero vector case\n\n    .. math::\n\n        \\mathbf{0} \\oplus_\\kappa x = x \\oplus_\\kappa \\mathbf{0}\n\n    * zero curvature case that is same as Euclidean addition\n\n    .. math::\n\n        x \\oplus_0 y = y \\oplus_0 x\n\n    Another useful property is so called left-cancellation law:\n\n    .. math::\n\n        (-x) \\oplus_\\kappa (x \\oplus_\\kappa y) = y\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    y : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius addition\n    \"\"\"\n    return _mobius_add(x, y, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the Möbius gyrovector addition.\n\n    .. math::\n\n        x \\oplus_\\kappa y =\n        \\frac{\n            (1 - 2 \\kappa \\langle x, y\\rangle - \\kappa \\|y\\|^2_2) x +\n            (1 + \\kappa \\|x\\|_2^2) y\n        }{\n            1 - 2 \\kappa \\langle x, y\\rangle + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        }\n\n    .. plot:: plots/extended/universal/mobius_add.py\n\n    In general this operation is not commutative:\n\n    .. math::\n\n        x \\oplus_\\kappa y \\ne y \\oplus_\\kappa x\n\n    But in some cases this property holds:\n\n    * zero vector case\n\n    .. math::\n\n        \\mathbf{0} \\oplus_\\kappa x = x \\oplus_\\kappa \\mathbf{0}\n\n    * zero curvature case that is same as Euclidean addition\n\n    .. math::\n\n        x \\oplus_0 y = y \\oplus_0 x\n\n    Another useful property is so called left-cancellation law:\n\n    .. math::\n\n        (-x) \\oplus_\\kappa (x \\oplus_\\kappa y) = y\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    y : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius addition\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the Möbius gyrovector addition.\n\n    .. math::\n\n        x \\oplus_\\kappa y =\n        \\frac{\n            (1 - 2 \\kappa \\langle x, y\\rangle - \\kappa \\|y\\|^2_2) x +\n            (1 + \\kappa \\|x\\|_2^2) y\n        }{\n            1 - 2 \\kappa \\langle x, y\\rangle + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        }\n\n    .. plot:: plots/extended/universal/mobius_add.py\n\n    In general this operation is not commutative:\n\n    .. math::\n\n        x \\oplus_\\kappa y \\ne y \\oplus_\\kappa x\n\n    But in some cases this property holds:\n\n    * zero vector case\n\n    .. math::\n\n        \\mathbf{0} \\oplus_\\kappa x = x \\oplus_\\kappa \\mathbf{0}\n\n    * zero curvature case that is same as Euclidean addition\n\n    .. math::\n\n        x \\oplus_0 y = y \\oplus_0 x\n\n    Another useful property is so called left-cancellation law:\n\n    .. math::\n\n        (-x) \\oplus_\\kappa (x \\oplus_\\kappa y) = y\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    y : tensor\n        point on the manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius addition\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _mobius_add(x, y, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_add(x, y, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_add",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, y, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _mobius_add(x, y, K, dim=-1):\n    x2 = x.pow(2).sum(dim=dim, keepdim=True)\n    y2 = y.pow(2).sum(dim=dim, keepdim=True)\n    xy = (x * y).sum(dim=dim, keepdim=True)\n    num = (1 - 2 * K * xy - K * y2) * x + (1 + K * x2) * y\n    denom = 1 - 2 * K * xy + K ** 2 * x2 * y2\n    # minimize denom (omit K to simplify th notation)\n    # 1)\n    # {d(denom)/d(x) = 2 y + 2x * <y, y> = 0\n    # {d(denom)/d(y) = 2 x + 2y * <x, x> = 0\n    # 2)\n    # {y + x * <y, y> = 0\n    # {x + y * <x, x> = 0\n    # 3)\n    # {- y/<y, y> = x\n    # {- x/<x, x> = y\n    # 4)\n    # minimum = 1 - 2 <y, y>/<y, y> + <y, y>/<y, y> = 0\n    return num / denom.clamp_min(MIN_NORM)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_mobius_add",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, y, K, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "x2 = x.pow(2).sum(dim=dim, keepdim=True)\n    y2 = y.pow(2).sum(dim=dim, keepdim=True)\n    xy = (x * y).sum(dim=dim, keepdim=True)\n    num = (1 - 2 * K * xy - K * y2) * x + (1 + K * x2) * y\n    denom = 1 - 2 * K * xy + K ** 2 * x2 * y2\n    # minimize denom (omit K to simplify th notation)\n    # 1)\n    # {d(denom)/d(x) = 2 y + 2x * <y, y> = 0\n    # {d(denom)/d(y) = 2 x + 2y * <x, x> = 0\n    # 2)\n    # {y + x * <y, y> = 0\n    # {x + y * <x, x> = 0\n    # 3)\n    # {- y/<y, y> = x\n    # {- x/<x, x> = y\n    # 4)\n    # minimum = 1 - 2 <y, y>/<y, y> + <y, y>/<y, y> = 0\n    return num / denom.clamp_min(MIN_NORM)",
          "children": [
            {
              "type": "expression_statement",
              "text": "x2 = x.pow(2).sum(dim=dim, keepdim=True)",
              "children": [
                {
                  "type": "assignment",
                  "text": "x2 = x.pow(2).sum(dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x2",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "x.pow(2).sum(dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "x.pow(2).sum",
                          "children": [
                            {
                              "type": "call",
                              "text": "x.pow(2)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "x.pow",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "pow",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(2)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "2",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "sum",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=True",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "true",
                                  "text": "True",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "y2 = y.pow(2).sum(dim=dim, keepdim=True)",
              "children": [
                {
                  "type": "assignment",
                  "text": "y2 = y.pow(2).sum(dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "y2",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "y.pow(2).sum(dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "y.pow(2).sum",
                          "children": [
                            {
                              "type": "call",
                              "text": "y.pow(2)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "y.pow",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "y",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "pow",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(2)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "2",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "sum",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=True",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "true",
                                  "text": "True",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "xy = (x * y).sum(dim=dim, keepdim=True)",
              "children": [
                {
                  "type": "assignment",
                  "text": "xy = (x * y).sum(dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "xy",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "(x * y).sum(dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "(x * y).sum",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(x * y)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "x * y",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "y",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "sum",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=True",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "true",
                                  "text": "True",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "num = (1 - 2 * K * xy - K * y2) * x + (1 + K * x2) * y",
              "children": [
                {
                  "type": "assignment",
                  "text": "num = (1 - 2 * K * xy - K * y2) * x + (1 + K * x2) * y",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "num",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "(1 - 2 * K * xy - K * y2) * x + (1 + K * x2) * y",
                      "children": [
                        {
                          "type": "binary_operator",
                          "text": "(1 - 2 * K * xy - K * y2) * x",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(1 - 2 * K * xy - K * y2)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "1 - 2 * K * xy - K * y2",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "1 - 2 * K * xy",
                                      "children": [
                                        {
                                          "type": "integer",
                                          "text": "1",
                                          "children": []
                                        },
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "2 * K * xy",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "text": "2 * K",
                                              "children": [
                                                {
                                                  "type": "integer",
                                                  "text": "2",
                                                  "children": []
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "K",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "xy",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "K * y2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "K",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "y2",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "+",
                          "text": "+",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "(1 + K * x2) * y",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(1 + K * x2)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "1 + K * x2",
                                  "children": [
                                    {
                                      "type": "integer",
                                      "text": "1",
                                      "children": []
                                    },
                                    {
                                      "type": "+",
                                      "text": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "K * x2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "K",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "x2",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "y",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "denom = 1 - 2 * K * xy + K ** 2 * x2 * y2",
              "children": [
                {
                  "type": "assignment",
                  "text": "denom = 1 - 2 * K * xy + K ** 2 * x2 * y2",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "denom",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "1 - 2 * K * xy + K ** 2 * x2 * y2",
                      "children": [
                        {
                          "type": "binary_operator",
                          "text": "1 - 2 * K * xy",
                          "children": [
                            {
                              "type": "integer",
                              "text": "1",
                              "children": []
                            },
                            {
                              "type": "-",
                              "text": "-",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "2 * K * xy",
                              "children": [
                                {
                                  "type": "binary_operator",
                                  "text": "2 * K",
                                  "children": [
                                    {
                                      "type": "integer",
                                      "text": "2",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "K",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "xy",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "+",
                          "text": "+",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "K ** 2 * x2 * y2",
                          "children": [
                            {
                              "type": "binary_operator",
                              "text": "K ** 2 * x2",
                              "children": [
                                {
                                  "type": "binary_operator",
                                  "text": "K ** 2",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "K",
                                      "children": []
                                    },
                                    {
                                      "type": "**",
                                      "text": "**",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "y2",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "text": "# minimize denom (omit K to simplify th notation)",
              "children": []
            },
            {
              "type": "comment",
              "text": "# 1)",
              "children": []
            },
            {
              "type": "comment",
              "text": "# {d(denom)/d(x) = 2 y + 2x * <y, y> = 0",
              "children": []
            },
            {
              "type": "comment",
              "text": "# {d(denom)/d(y) = 2 x + 2y * <x, x> = 0",
              "children": []
            },
            {
              "type": "comment",
              "text": "# 2)",
              "children": []
            },
            {
              "type": "comment",
              "text": "# {y + x * <y, y> = 0",
              "children": []
            },
            {
              "type": "comment",
              "text": "# {x + y * <x, x> = 0",
              "children": []
            },
            {
              "type": "comment",
              "text": "# 3)",
              "children": []
            },
            {
              "type": "comment",
              "text": "# {- y/<y, y> = x",
              "children": []
            },
            {
              "type": "comment",
              "text": "# {- x/<x, x> = y",
              "children": []
            },
            {
              "type": "comment",
              "text": "# 4)",
              "children": []
            },
            {
              "type": "comment",
              "text": "# minimum = 1 - 2 <y, y>/<y, y> + <y, y>/<y, y> = 0",
              "children": []
            },
            {
              "type": "return_statement",
              "text": "return num / denom.clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "binary_operator",
                  "text": "num / denom.clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "num",
                      "children": []
                    },
                    {
                      "type": "/",
                      "text": "/",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "denom.clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "denom.clamp_min",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "denom",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "clamp_min",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(MIN_NORM)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MIN_NORM",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def mobius_sub(x, y, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the Möbius gyrovector subtraction.\n\n    The Möbius subtraction can be represented via the Möbius addition as\n    follows:\n\n    .. math::\n\n        x \\ominus_\\kappa y = x \\oplus_\\kappa (-y)\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius subtraction\n    \"\"\"\n    return _mobius_sub(x, y, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_sub",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, y, *, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the Möbius gyrovector subtraction.\n\n    The Möbius subtraction can be represented via the Möbius addition as\n    follows:\n\n    .. math::\n\n        x \\ominus_\\kappa y = x \\oplus_\\kappa (-y)\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius subtraction\n    \"\"\"\n    return _mobius_sub(x, y, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the Möbius gyrovector subtraction.\n\n    The Möbius subtraction can be represented via the Möbius addition as\n    follows:\n\n    .. math::\n\n        x \\ominus_\\kappa y = x \\oplus_\\kappa (-y)\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius subtraction\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the Möbius gyrovector subtraction.\n\n    The Möbius subtraction can be represented via the Möbius addition as\n    follows:\n\n    .. math::\n\n        x \\ominus_\\kappa y = x \\oplus_\\kappa (-y)\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius subtraction\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _mobius_sub(x, y, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_sub(x, y, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_sub",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, y, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _mobius_sub(x, y, K, dim: int = -1):\n    return _mobius_add(x, -y, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_mobius_sub",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, y, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "return _mobius_add(x, -y, K, dim=dim)",
          "children": [
            {
              "type": "return_statement",
              "text": "return _mobius_add(x, -y, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_add(x, -y, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_add",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, -y, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "unary_operator",
                          "text": "-y",
                          "children": [
                            {
                              "type": "-",
                              "text": "-",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "y",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def mobius_coadd(x, y, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the Möbius gyrovector coaddition.\n\n    The addition operation :math:`\\oplus_\\kappa` is neither associative, nor\n    commutative. In contrast, the coaddition :math:`\\boxplus_\\kappa` (or\n    cooperation) is an associative operation that is defined as follows.\n\n    .. math::\n\n        a \\boxplus_\\kappa b\n        =\n        b \\boxplus_\\kappa a\n        =\n        a\\operatorname{gyr}[a, -b]b\\\\\n        = \\frac{\n            (1 + \\kappa \\|y\\|^2_2) x + (1 + \\kappa \\|x\\|_2^2) y\n            }{\n            1 + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        },\n\n    where :math:`\\operatorname{gyr}[a, b]v = \\ominus_\\kappa (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa v))`\n\n    The following right cancellation property holds\n\n    .. math::\n\n        (a \\boxplus_\\kappa b) \\ominus_\\kappa b = a\\\\\n        (a \\oplus_\\kappa b) \\boxminus_\\kappa b = a\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius coaddition\n\n    \"\"\"\n    return _mobius_coadd(x, y, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_coadd",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, y, *, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the Möbius gyrovector coaddition.\n\n    The addition operation :math:`\\oplus_\\kappa` is neither associative, nor\n    commutative. In contrast, the coaddition :math:`\\boxplus_\\kappa` (or\n    cooperation) is an associative operation that is defined as follows.\n\n    .. math::\n\n        a \\boxplus_\\kappa b\n        =\n        b \\boxplus_\\kappa a\n        =\n        a\\operatorname{gyr}[a, -b]b\\\\\n        = \\frac{\n            (1 + \\kappa \\|y\\|^2_2) x + (1 + \\kappa \\|x\\|_2^2) y\n            }{\n            1 + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        },\n\n    where :math:`\\operatorname{gyr}[a, b]v = \\ominus_\\kappa (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa v))`\n\n    The following right cancellation property holds\n\n    .. math::\n\n        (a \\boxplus_\\kappa b) \\ominus_\\kappa b = a\\\\\n        (a \\oplus_\\kappa b) \\boxminus_\\kappa b = a\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius coaddition\n\n    \"\"\"\n    return _mobius_coadd(x, y, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the Möbius gyrovector coaddition.\n\n    The addition operation :math:`\\oplus_\\kappa` is neither associative, nor\n    commutative. In contrast, the coaddition :math:`\\boxplus_\\kappa` (or\n    cooperation) is an associative operation that is defined as follows.\n\n    .. math::\n\n        a \\boxplus_\\kappa b\n        =\n        b \\boxplus_\\kappa a\n        =\n        a\\operatorname{gyr}[a, -b]b\\\\\n        = \\frac{\n            (1 + \\kappa \\|y\\|^2_2) x + (1 + \\kappa \\|x\\|_2^2) y\n            }{\n            1 + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        },\n\n    where :math:`\\operatorname{gyr}[a, b]v = \\ominus_\\kappa (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa v))`\n\n    The following right cancellation property holds\n\n    .. math::\n\n        (a \\boxplus_\\kappa b) \\ominus_\\kappa b = a\\\\\n        (a \\oplus_\\kappa b) \\boxminus_\\kappa b = a\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius coaddition\n\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the Möbius gyrovector coaddition.\n\n    The addition operation :math:`\\oplus_\\kappa` is neither associative, nor\n    commutative. In contrast, the coaddition :math:`\\boxplus_\\kappa` (or\n    cooperation) is an associative operation that is defined as follows.\n\n    .. math::\n\n        a \\boxplus_\\kappa b\n        =\n        b \\boxplus_\\kappa a\n        =\n        a\\operatorname{gyr}[a, -b]b\\\\\n        = \\frac{\n            (1 + \\kappa \\|y\\|^2_2) x + (1 + \\kappa \\|x\\|_2^2) y\n            }{\n            1 + \\kappa^2 \\|x\\|^2_2 \\|y\\|^2_2\n        },\n\n    where :math:`\\operatorname{gyr}[a, b]v = \\ominus_\\kappa (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa v))`\n\n    The following right cancellation property holds\n\n    .. math::\n\n        (a \\boxplus_\\kappa b) \\ominus_\\kappa b = a\\\\\n        (a \\oplus_\\kappa b) \\boxminus_\\kappa b = a\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius coaddition\n\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _mobius_coadd(x, y, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_coadd(x, y, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_coadd",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, y, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "comment",
      "text": "# TODO: check numerical stability with Gregor's paper!!!",
      "children": []
    },
    {
      "type": "function_definition",
      "text": "def _mobius_coadd(x, y, K, dim: int = -1):\n    #x2 = x.pow(2).sum(dim=dim, keepdim=True)\n    #y2 = y.pow(2).sum(dim=dim, keepdim=True)\n    #num = (1 + K * y2) * x + (1 + K * x2) * y\n    #denom = 1 - K ** 2 * x2 * y2\n    ## avoid division by zero in this way\n    #return num / denom.clamp_min(MIN_NORM)\n    return _mobius_add(x, _gyration(x, -y, y, K=K, dim=dim), K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_mobius_coadd",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, y, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "comment",
          "text": "#x2 = x.pow(2).sum(dim=dim, keepdim=True)",
          "children": []
        },
        {
          "type": "comment",
          "text": "#y2 = y.pow(2).sum(dim=dim, keepdim=True)",
          "children": []
        },
        {
          "type": "comment",
          "text": "#num = (1 + K * y2) * x + (1 + K * x2) * y",
          "children": []
        },
        {
          "type": "comment",
          "text": "#denom = 1 - K ** 2 * x2 * y2",
          "children": []
        },
        {
          "type": "comment",
          "text": "## avoid division by zero in this way",
          "children": []
        },
        {
          "type": "comment",
          "text": "#return num / denom.clamp_min(MIN_NORM)",
          "children": []
        },
        {
          "type": "block",
          "text": "return _mobius_add(x, _gyration(x, -y, y, K=K, dim=dim), K, dim=dim)",
          "children": [
            {
              "type": "return_statement",
              "text": "return _mobius_add(x, _gyration(x, -y, y, K=K, dim=dim), K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_add(x, _gyration(x, -y, y, K=K, dim=dim), K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_add",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, _gyration(x, -y, y, K=K, dim=dim), K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "_gyration(x, -y, y, K=K, dim=dim)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_gyration",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(x, -y, y, K=K, dim=dim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "unary_operator",
                                  "text": "-y",
                                  "children": [
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "y",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "y",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "K=K",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "K",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "K",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def mobius_cosub(x, y, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the Möbius gyrovector cosubtraction.\n\n    The Möbius cosubtraction is defined as follows:\n\n    .. math::\n\n        a \\boxminus_\\kappa b = a \\boxplus_\\kappa -b\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius cosubtraction\n\n    \"\"\"\n    return _mobius_cosub(x, y, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_cosub",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, y, *, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the Möbius gyrovector cosubtraction.\n\n    The Möbius cosubtraction is defined as follows:\n\n    .. math::\n\n        a \\boxminus_\\kappa b = a \\boxplus_\\kappa -b\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius cosubtraction\n\n    \"\"\"\n    return _mobius_cosub(x, y, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the Möbius gyrovector cosubtraction.\n\n    The Möbius cosubtraction is defined as follows:\n\n    .. math::\n\n        a \\boxminus_\\kappa b = a \\boxplus_\\kappa -b\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius cosubtraction\n\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the Möbius gyrovector cosubtraction.\n\n    The Möbius cosubtraction is defined as follows:\n\n    .. math::\n\n        a \\boxminus_\\kappa b = a \\boxplus_\\kappa -b\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius cosubtraction\n\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _mobius_cosub(x, y, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_cosub(x, y, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_cosub",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, y, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _mobius_cosub(x, y, K, dim: int = -1):\n    return _mobius_coadd(x, -y, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_mobius_cosub",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, y, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "return _mobius_coadd(x, -y, K, dim=dim)",
          "children": [
            {
              "type": "return_statement",
              "text": "return _mobius_coadd(x, -y, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_coadd(x, -y, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_coadd",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, -y, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "unary_operator",
                          "text": "-y",
                          "children": [
                            {
                              "type": "-",
                              "text": "-",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "y",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "comment",
      "text": "# TODO: can we make this operation somehow safer by breaking up the",
      "children": []
    },
    {
      "type": "comment",
      "text": "# TODO: scalar multiplication for K>0 when the argument to the",
      "children": []
    },
    {
      "type": "comment",
      "text": "# TODO: tan function gets close to pi/2+k*pi for k in Z?",
      "children": []
    },
    {
      "type": "comment",
      "text": "# TODO: one could use the scalar associative law",
      "children": []
    },
    {
      "type": "comment",
      "text": "# TODO: s_1 (X) s_2 (X) x = (s_1*s_2) (X) x",
      "children": []
    },
    {
      "type": "comment",
      "text": "# TODO: to implement a more stable Möbius scalar mult",
      "children": []
    },
    {
      "type": "function_definition",
      "text": "def mobius_scalar_mul(r, x, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the Möbius scalar multiplication.\n\n    .. math::\n\n        r \\otimes_\\kappa x\n        =\n        \\tan_\\kappa(r\\tan_\\kappa^{-1}(\\|x\\|_2))\\frac{x}{\\|x\\|_2}\n\n    This operation has properties similar to the Euclidean scalar multiplication\n\n    * `n-addition` property\n\n    .. math::\n\n         r \\otimes_\\kappa x = x \\oplus_\\kappa \\dots \\oplus_\\kappa x\n\n    * Distributive property\n\n    .. math::\n\n         (r_1 + r_2) \\otimes_\\kappa x\n         =\n         r_1 \\otimes_\\kappa x \\oplus r_2 \\otimes_\\kappa x\n\n    * Scalar associativity\n\n    .. math::\n\n         (r_1 r_2) \\otimes_\\kappa x = r_1 \\otimes_\\kappa (r_2 \\otimes_\\kappa x)\n\n    * Monodistributivity\n\n    .. math::\n\n         r \\otimes_\\kappa (r_1 \\otimes x \\oplus r_2 \\otimes x) =\n         r \\otimes_\\kappa (r_1 \\otimes x) \\oplus r \\otimes (r_2 \\otimes x)\n\n    * Scaling property\n\n    .. math::\n\n        |r| \\otimes_\\kappa x / \\|r \\otimes_\\kappa x\\|_2 = x/\\|x\\|_2\n\n    Parameters\n    ----------\n    r : float|tensor\n        scalar for multiplication\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius scalar multiplication\n    \"\"\"\n    return _mobius_scalar_mul(r, x, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_scalar_mul",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(r, x, *, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "r",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the Möbius scalar multiplication.\n\n    .. math::\n\n        r \\otimes_\\kappa x\n        =\n        \\tan_\\kappa(r\\tan_\\kappa^{-1}(\\|x\\|_2))\\frac{x}{\\|x\\|_2}\n\n    This operation has properties similar to the Euclidean scalar multiplication\n\n    * `n-addition` property\n\n    .. math::\n\n         r \\otimes_\\kappa x = x \\oplus_\\kappa \\dots \\oplus_\\kappa x\n\n    * Distributive property\n\n    .. math::\n\n         (r_1 + r_2) \\otimes_\\kappa x\n         =\n         r_1 \\otimes_\\kappa x \\oplus r_2 \\otimes_\\kappa x\n\n    * Scalar associativity\n\n    .. math::\n\n         (r_1 r_2) \\otimes_\\kappa x = r_1 \\otimes_\\kappa (r_2 \\otimes_\\kappa x)\n\n    * Monodistributivity\n\n    .. math::\n\n         r \\otimes_\\kappa (r_1 \\otimes x \\oplus r_2 \\otimes x) =\n         r \\otimes_\\kappa (r_1 \\otimes x) \\oplus r \\otimes (r_2 \\otimes x)\n\n    * Scaling property\n\n    .. math::\n\n        |r| \\otimes_\\kappa x / \\|r \\otimes_\\kappa x\\|_2 = x/\\|x\\|_2\n\n    Parameters\n    ----------\n    r : float|tensor\n        scalar for multiplication\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius scalar multiplication\n    \"\"\"\n    return _mobius_scalar_mul(r, x, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the Möbius scalar multiplication.\n\n    .. math::\n\n        r \\otimes_\\kappa x\n        =\n        \\tan_\\kappa(r\\tan_\\kappa^{-1}(\\|x\\|_2))\\frac{x}{\\|x\\|_2}\n\n    This operation has properties similar to the Euclidean scalar multiplication\n\n    * `n-addition` property\n\n    .. math::\n\n         r \\otimes_\\kappa x = x \\oplus_\\kappa \\dots \\oplus_\\kappa x\n\n    * Distributive property\n\n    .. math::\n\n         (r_1 + r_2) \\otimes_\\kappa x\n         =\n         r_1 \\otimes_\\kappa x \\oplus r_2 \\otimes_\\kappa x\n\n    * Scalar associativity\n\n    .. math::\n\n         (r_1 r_2) \\otimes_\\kappa x = r_1 \\otimes_\\kappa (r_2 \\otimes_\\kappa x)\n\n    * Monodistributivity\n\n    .. math::\n\n         r \\otimes_\\kappa (r_1 \\otimes x \\oplus r_2 \\otimes x) =\n         r \\otimes_\\kappa (r_1 \\otimes x) \\oplus r \\otimes (r_2 \\otimes x)\n\n    * Scaling property\n\n    .. math::\n\n        |r| \\otimes_\\kappa x / \\|r \\otimes_\\kappa x\\|_2 = x/\\|x\\|_2\n\n    Parameters\n    ----------\n    r : float|tensor\n        scalar for multiplication\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius scalar multiplication\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the Möbius scalar multiplication.\n\n    .. math::\n\n        r \\otimes_\\kappa x\n        =\n        \\tan_\\kappa(r\\tan_\\kappa^{-1}(\\|x\\|_2))\\frac{x}{\\|x\\|_2}\n\n    This operation has properties similar to the Euclidean scalar multiplication\n\n    * `n-addition` property\n\n    .. math::\n\n         r \\otimes_\\kappa x = x \\oplus_\\kappa \\dots \\oplus_\\kappa x\n\n    * Distributive property\n\n    .. math::\n\n         (r_1 + r_2) \\otimes_\\kappa x\n         =\n         r_1 \\otimes_\\kappa x \\oplus r_2 \\otimes_\\kappa x\n\n    * Scalar associativity\n\n    .. math::\n\n         (r_1 r_2) \\otimes_\\kappa x = r_1 \\otimes_\\kappa (r_2 \\otimes_\\kappa x)\n\n    * Monodistributivity\n\n    .. math::\n\n         r \\otimes_\\kappa (r_1 \\otimes x \\oplus r_2 \\otimes x) =\n         r \\otimes_\\kappa (r_1 \\otimes x) \\oplus r \\otimes (r_2 \\otimes x)\n\n    * Scaling property\n\n    .. math::\n\n        |r| \\otimes_\\kappa x / \\|r \\otimes_\\kappa x\\|_2 = x/\\|x\\|_2\n\n    Parameters\n    ----------\n    r : float|tensor\n        scalar for multiplication\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of the Möbius scalar multiplication\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _mobius_scalar_mul(r, x, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_scalar_mul(r, x, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_scalar_mul",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(r, x, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "r",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _mobius_scalar_mul(r, x, K, dim: int = -1):\n    x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n    res_c = tan_K(r * arctan_K(x_norm, K), K) * (x / x_norm)\n    return res_c",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_mobius_scalar_mul",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(r, x, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "r",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n    res_c = tan_K(r * arctan_K(x_norm, K), K) * (x / x_norm)\n    return res_c",
          "children": [
            {
              "type": "expression_statement",
              "text": "x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "assignment",
                  "text": "x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x_norm",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "x.norm(dim=dim, keepdim=True, p=2).clamp_min",
                          "children": [
                            {
                              "type": "call",
                              "text": "x.norm(dim=dim, keepdim=True, p=2)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "x.norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim=dim, keepdim=True, p=2)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=True",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "true",
                                          "text": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "p=2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "p",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "clamp_min",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(MIN_NORM)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MIN_NORM",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "res_c = tan_K(r * arctan_K(x_norm, K), K) * (x / x_norm)",
              "children": [
                {
                  "type": "assignment",
                  "text": "res_c = tan_K(r * arctan_K(x_norm, K), K) * (x / x_norm)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "res_c",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "tan_K(r * arctan_K(x_norm, K), K) * (x / x_norm)",
                      "children": [
                        {
                          "type": "call",
                          "text": "tan_K(r * arctan_K(x_norm, K), K)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "tan_K",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(r * arctan_K(x_norm, K), K)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "r * arctan_K(x_norm, K)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "r",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "call",
                                      "text": "arctan_K(x_norm, K)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "arctan_K",
                                          "children": []
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(x_norm, K)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "x_norm",
                                              "children": []
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "K",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "K",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "parenthesized_expression",
                          "text": "(x / x_norm)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "x / x_norm",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": "/",
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x_norm",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return res_c",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "res_c",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def dist(x, y, *, K=1.0, keepdim=False, dim=-1):\n    r\"\"\"\n    Computes the geodesic distance between :math:`x` and :math:`y` on the\n    manifold.\n\n    .. math::\n\n        d_\\kappa(x, y) = 2\\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n\n    .. plot:: plots/extended/universal/distance.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`y`\n    \"\"\"\n    return _dist(x, y, K, keepdim=keepdim, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "dist",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, y, *, K=1.0, keepdim=False, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "keepdim=False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the geodesic distance between :math:`x` and :math:`y` on the\n    manifold.\n\n    .. math::\n\n        d_\\kappa(x, y) = 2\\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n\n    .. plot:: plots/extended/universal/distance.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`y`\n    \"\"\"\n    return _dist(x, y, K, keepdim=keepdim, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the geodesic distance between :math:`x` and :math:`y` on the\n    manifold.\n\n    .. math::\n\n        d_\\kappa(x, y) = 2\\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n\n    .. plot:: plots/extended/universal/distance.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`y`\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the geodesic distance between :math:`x` and :math:`y` on the\n    manifold.\n\n    .. math::\n\n        d_\\kappa(x, y) = 2\\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n\n    .. plot:: plots/extended/universal/distance.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    y : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`y`\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _dist(x, y, K, keepdim=keepdim, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_dist(x, y, K, keepdim=keepdim, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_dist",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, y, K, keepdim=keepdim, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "keepdim=keepdim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _dist(x, y, K, keepdim: bool = False, dim: int = -1):\n    return 2.0 * arctan_K(\n        _mobius_add(-x, y, K, dim=dim).norm(dim=dim, p=2, keepdim=keepdim), K\n    )",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_dist",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, y, K, keepdim: bool = False, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "keepdim: bool = False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "bool",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "return 2.0 * arctan_K(\n        _mobius_add(-x, y, K, dim=dim).norm(dim=dim, p=2, keepdim=keepdim), K\n    )",
          "children": [
            {
              "type": "return_statement",
              "text": "return 2.0 * arctan_K(\n        _mobius_add(-x, y, K, dim=dim).norm(dim=dim, p=2, keepdim=keepdim), K\n    )",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "binary_operator",
                  "text": "2.0 * arctan_K(\n        _mobius_add(-x, y, K, dim=dim).norm(dim=dim, p=2, keepdim=keepdim), K\n    )",
                  "children": [
                    {
                      "type": "float",
                      "text": "2.0",
                      "children": []
                    },
                    {
                      "type": "*",
                      "text": "*",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "arctan_K(\n        _mobius_add(-x, y, K, dim=dim).norm(dim=dim, p=2, keepdim=keepdim), K\n    )",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "arctan_K",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(\n        _mobius_add(-x, y, K, dim=dim).norm(dim=dim, p=2, keepdim=keepdim), K\n    )",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "_mobius_add(-x, y, K, dim=dim).norm(dim=dim, p=2, keepdim=keepdim)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "_mobius_add(-x, y, K, dim=dim).norm",
                                  "children": [
                                    {
                                      "type": "call",
                                      "text": "_mobius_add(-x, y, K, dim=dim)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "_mobius_add",
                                          "children": []
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(-x, y, K, dim=dim)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "unary_operator",
                                              "text": "-x",
                                              "children": [
                                                {
                                                  "type": "-",
                                                  "text": "-",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "x",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "y",
                                              "children": []
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "K",
                                              "children": []
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "keyword_argument",
                                              "text": "dim=dim",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "dim",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "dim",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim=dim, p=2, keepdim=keepdim)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "p=2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "p",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=keepdim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def dist0(x, *, K=1.0, keepdim=False, dim=-1):\n    r\"\"\"\n    Computes geodesic distance to the manifold's origin.\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`0`\n    \"\"\"\n    return _dist0(x, K, keepdim=keepdim, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "dist0",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, *, K=1.0, keepdim=False, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "keepdim=False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes geodesic distance to the manifold's origin.\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`0`\n    \"\"\"\n    return _dist0(x, K, keepdim=keepdim, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes geodesic distance to the manifold's origin.\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`0`\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes geodesic distance to the manifold's origin.\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        geodesic distance between :math:`x` and :math:`0`\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _dist0(x, K, keepdim=keepdim, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_dist0(x, K, keepdim=keepdim, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_dist0",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, K, keepdim=keepdim, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "keepdim=keepdim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _dist0(x, K, keepdim: bool = False, dim: int = -1):\n    return 2.0 * arctan_K(x.norm(dim=dim, p=2, keepdim=keepdim), K)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_dist0",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, K, keepdim: bool = False, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "keepdim: bool = False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "bool",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "return 2.0 * arctan_K(x.norm(dim=dim, p=2, keepdim=keepdim), K)",
          "children": [
            {
              "type": "return_statement",
              "text": "return 2.0 * arctan_K(x.norm(dim=dim, p=2, keepdim=keepdim), K)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "binary_operator",
                  "text": "2.0 * arctan_K(x.norm(dim=dim, p=2, keepdim=keepdim), K)",
                  "children": [
                    {
                      "type": "float",
                      "text": "2.0",
                      "children": []
                    },
                    {
                      "type": "*",
                      "text": "*",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "arctan_K(x.norm(dim=dim, p=2, keepdim=keepdim), K)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "arctan_K",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(x.norm(dim=dim, p=2, keepdim=keepdim), K)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "x.norm(dim=dim, p=2, keepdim=keepdim)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "x.norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim=dim, p=2, keepdim=keepdim)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "p=2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "p",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=keepdim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def geodesic(t, x, y, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the point on the geodesic (shortest) path connecting :math:`x` and\n    :math:`y` at time :math:`x`.\n\n    The path can also be treated as an extension of the line segment to an\n    unbounded geodesic that goes through :math:`x` and :math:`y`. The equation\n    of the geodesic is given as:\n\n    .. math::\n\n        \\gamma_{x\\to y}(t)\n        =\n        x \\oplus_\\kappa t \\otimes_\\kappa ((-x) \\oplus_\\kappa y)\n\n    The properties of the geodesic are the following:\n\n    .. math::\n\n        \\gamma_{x\\to y}(0) = x\\\\\n        \\gamma_{x\\to y}(1) = y\\\\\n        \\dot\\gamma_{x\\to y}(t) = v\n\n    Furthermore, the geodesic also satisfies the property of local distance\n    minimization:\n\n    .. math::\n\n         d_\\kappa(\\gamma_{x\\to y}(t_1), \\gamma_{x\\to y}(t_2)) = v|t_1-t_2|\n\n    \"Natural parametrization\" of the curve ensures unit speed geodesics which\n    yields the above formula with :math:`v=1`.\n\n    However, we can always compute the constant speed :math:`v` from the points\n    that the particular path connects:\n\n    .. math::\n\n        v = d_\\kappa(\\gamma_{x\\to y}(0), \\gamma_{x\\to y}(1)) = d_\\kappa(x, y)\n\n\n    Parameters\n    ----------\n    t : float|tensor\n        travelling time\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        point on the geodesic going through x and y\n    \"\"\"\n    return _geodesic(t, x, y, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "geodesic",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(t, x, y, *, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "t",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the point on the geodesic (shortest) path connecting :math:`x` and\n    :math:`y` at time :math:`x`.\n\n    The path can also be treated as an extension of the line segment to an\n    unbounded geodesic that goes through :math:`x` and :math:`y`. The equation\n    of the geodesic is given as:\n\n    .. math::\n\n        \\gamma_{x\\to y}(t)\n        =\n        x \\oplus_\\kappa t \\otimes_\\kappa ((-x) \\oplus_\\kappa y)\n\n    The properties of the geodesic are the following:\n\n    .. math::\n\n        \\gamma_{x\\to y}(0) = x\\\\\n        \\gamma_{x\\to y}(1) = y\\\\\n        \\dot\\gamma_{x\\to y}(t) = v\n\n    Furthermore, the geodesic also satisfies the property of local distance\n    minimization:\n\n    .. math::\n\n         d_\\kappa(\\gamma_{x\\to y}(t_1), \\gamma_{x\\to y}(t_2)) = v|t_1-t_2|\n\n    \"Natural parametrization\" of the curve ensures unit speed geodesics which\n    yields the above formula with :math:`v=1`.\n\n    However, we can always compute the constant speed :math:`v` from the points\n    that the particular path connects:\n\n    .. math::\n\n        v = d_\\kappa(\\gamma_{x\\to y}(0), \\gamma_{x\\to y}(1)) = d_\\kappa(x, y)\n\n\n    Parameters\n    ----------\n    t : float|tensor\n        travelling time\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        point on the geodesic going through x and y\n    \"\"\"\n    return _geodesic(t, x, y, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the point on the geodesic (shortest) path connecting :math:`x` and\n    :math:`y` at time :math:`x`.\n\n    The path can also be treated as an extension of the line segment to an\n    unbounded geodesic that goes through :math:`x` and :math:`y`. The equation\n    of the geodesic is given as:\n\n    .. math::\n\n        \\gamma_{x\\to y}(t)\n        =\n        x \\oplus_\\kappa t \\otimes_\\kappa ((-x) \\oplus_\\kappa y)\n\n    The properties of the geodesic are the following:\n\n    .. math::\n\n        \\gamma_{x\\to y}(0) = x\\\\\n        \\gamma_{x\\to y}(1) = y\\\\\n        \\dot\\gamma_{x\\to y}(t) = v\n\n    Furthermore, the geodesic also satisfies the property of local distance\n    minimization:\n\n    .. math::\n\n         d_\\kappa(\\gamma_{x\\to y}(t_1), \\gamma_{x\\to y}(t_2)) = v|t_1-t_2|\n\n    \"Natural parametrization\" of the curve ensures unit speed geodesics which\n    yields the above formula with :math:`v=1`.\n\n    However, we can always compute the constant speed :math:`v` from the points\n    that the particular path connects:\n\n    .. math::\n\n        v = d_\\kappa(\\gamma_{x\\to y}(0), \\gamma_{x\\to y}(1)) = d_\\kappa(x, y)\n\n\n    Parameters\n    ----------\n    t : float|tensor\n        travelling time\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        point on the geodesic going through x and y\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the point on the geodesic (shortest) path connecting :math:`x` and\n    :math:`y` at time :math:`x`.\n\n    The path can also be treated as an extension of the line segment to an\n    unbounded geodesic that goes through :math:`x` and :math:`y`. The equation\n    of the geodesic is given as:\n\n    .. math::\n\n        \\gamma_{x\\to y}(t)\n        =\n        x \\oplus_\\kappa t \\otimes_\\kappa ((-x) \\oplus_\\kappa y)\n\n    The properties of the geodesic are the following:\n\n    .. math::\n\n        \\gamma_{x\\to y}(0) = x\\\\\n        \\gamma_{x\\to y}(1) = y\\\\\n        \\dot\\gamma_{x\\to y}(t) = v\n\n    Furthermore, the geodesic also satisfies the property of local distance\n    minimization:\n\n    .. math::\n\n         d_\\kappa(\\gamma_{x\\to y}(t_1), \\gamma_{x\\to y}(t_2)) = v|t_1-t_2|\n\n    \"Natural parametrization\" of the curve ensures unit speed geodesics which\n    yields the above formula with :math:`v=1`.\n\n    However, we can always compute the constant speed :math:`v` from the points\n    that the particular path connects:\n\n    .. math::\n\n        v = d_\\kappa(\\gamma_{x\\to y}(0), \\gamma_{x\\to y}(1)) = d_\\kappa(x, y)\n\n\n    Parameters\n    ----------\n    t : float|tensor\n        travelling time\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        point on the geodesic going through x and y\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _geodesic(t, x, y, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_geodesic(t, x, y, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_geodesic",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(t, x, y, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "t",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _geodesic(t, x, y, K, dim: int = -1):\n    # this is not very numerically stable\n    v = _mobius_add(-x, y, K, dim=dim)\n    tv = _mobius_scalar_mul(t, v, K, dim=dim)\n    gamma_t = _mobius_add(x, tv, K, dim=dim)\n    return gamma_t",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_geodesic",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(t, x, y, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "t",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "comment",
          "text": "# this is not very numerically stable",
          "children": []
        },
        {
          "type": "block",
          "text": "v = _mobius_add(-x, y, K, dim=dim)\n    tv = _mobius_scalar_mul(t, v, K, dim=dim)\n    gamma_t = _mobius_add(x, tv, K, dim=dim)\n    return gamma_t",
          "children": [
            {
              "type": "expression_statement",
              "text": "v = _mobius_add(-x, y, K, dim=dim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "v = _mobius_add(-x, y, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "v",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_mobius_add(-x, y, K, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_mobius_add",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(-x, y, K, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "unary_operator",
                              "text": "-x",
                              "children": [
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "y",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "tv = _mobius_scalar_mul(t, v, K, dim=dim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "tv = _mobius_scalar_mul(t, v, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "tv",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_mobius_scalar_mul(t, v, K, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_mobius_scalar_mul",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(t, v, K, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "t",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "v",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "gamma_t = _mobius_add(x, tv, K, dim=dim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "gamma_t = _mobius_add(x, tv, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "gamma_t",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_mobius_add(x, tv, K, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_mobius_add",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(x, tv, K, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "tv",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return gamma_t",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "gamma_t",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def expmap(x, u, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the exponential map of :math:`u` at :math:`x`.\n\n    The expmap is tightly related with :func:`geodesic`. Intuitively, the\n    expmap represents a smooth travel along a geodesic from the starting point\n    :math:`x`, into the initial direction :math:`u` at speed :math:`\\|u\\|_x` for\n    the duration of one time unit. In formulas one can express this as the\n    travel along the curve :math:`\\gamma_{x, u}(t)` such that\n\n    .. math::\n\n        \\gamma_{x, u}(0) = x\\\\\n        \\dot\\gamma_{x, u}(0) = u\\\\\n        \\|\\dot\\gamma_{x, u}(t)\\|_{\\gamma_{x, u}(t)} = \\|u\\|_x\n\n    The existence of this curve relies on uniqueness of the differential\n    equation solution, that is local. For the universal manifold the solution\n    is well defined globally and we have.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_x(u) = \\gamma_{x, u}(1) = \\\\\n        x\\oplus_\\kappa \\tan_\\kappa(\\|u\\|_x/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    u : tensor\n        speed vector in tangent space at x\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{x, u}(1)` end point\n    \"\"\"\n    return _expmap(x, u, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "expmap",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, u, *, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "u",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the exponential map of :math:`u` at :math:`x`.\n\n    The expmap is tightly related with :func:`geodesic`. Intuitively, the\n    expmap represents a smooth travel along a geodesic from the starting point\n    :math:`x`, into the initial direction :math:`u` at speed :math:`\\|u\\|_x` for\n    the duration of one time unit. In formulas one can express this as the\n    travel along the curve :math:`\\gamma_{x, u}(t)` such that\n\n    .. math::\n\n        \\gamma_{x, u}(0) = x\\\\\n        \\dot\\gamma_{x, u}(0) = u\\\\\n        \\|\\dot\\gamma_{x, u}(t)\\|_{\\gamma_{x, u}(t)} = \\|u\\|_x\n\n    The existence of this curve relies on uniqueness of the differential\n    equation solution, that is local. For the universal manifold the solution\n    is well defined globally and we have.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_x(u) = \\gamma_{x, u}(1) = \\\\\n        x\\oplus_\\kappa \\tan_\\kappa(\\|u\\|_x/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    u : tensor\n        speed vector in tangent space at x\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{x, u}(1)` end point\n    \"\"\"\n    return _expmap(x, u, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the exponential map of :math:`u` at :math:`x`.\n\n    The expmap is tightly related with :func:`geodesic`. Intuitively, the\n    expmap represents a smooth travel along a geodesic from the starting point\n    :math:`x`, into the initial direction :math:`u` at speed :math:`\\|u\\|_x` for\n    the duration of one time unit. In formulas one can express this as the\n    travel along the curve :math:`\\gamma_{x, u}(t)` such that\n\n    .. math::\n\n        \\gamma_{x, u}(0) = x\\\\\n        \\dot\\gamma_{x, u}(0) = u\\\\\n        \\|\\dot\\gamma_{x, u}(t)\\|_{\\gamma_{x, u}(t)} = \\|u\\|_x\n\n    The existence of this curve relies on uniqueness of the differential\n    equation solution, that is local. For the universal manifold the solution\n    is well defined globally and we have.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_x(u) = \\gamma_{x, u}(1) = \\\\\n        x\\oplus_\\kappa \\tan_\\kappa(\\|u\\|_x/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    u : tensor\n        speed vector in tangent space at x\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{x, u}(1)` end point\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the exponential map of :math:`u` at :math:`x`.\n\n    The expmap is tightly related with :func:`geodesic`. Intuitively, the\n    expmap represents a smooth travel along a geodesic from the starting point\n    :math:`x`, into the initial direction :math:`u` at speed :math:`\\|u\\|_x` for\n    the duration of one time unit. In formulas one can express this as the\n    travel along the curve :math:`\\gamma_{x, u}(t)` such that\n\n    .. math::\n\n        \\gamma_{x, u}(0) = x\\\\\n        \\dot\\gamma_{x, u}(0) = u\\\\\n        \\|\\dot\\gamma_{x, u}(t)\\|_{\\gamma_{x, u}(t)} = \\|u\\|_x\n\n    The existence of this curve relies on uniqueness of the differential\n    equation solution, that is local. For the universal manifold the solution\n    is well defined globally and we have.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_x(u) = \\gamma_{x, u}(1) = \\\\\n        x\\oplus_\\kappa \\tan_\\kappa(\\|u\\|_x/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    u : tensor\n        speed vector in tangent space at x\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{x, u}(1)` end point\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _expmap(x, u, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_expmap(x, u, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_expmap",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, u, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "u",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _expmap(x, u, K, dim: int = -1):\n    u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)\n    lam = _lambda_x(x, K, dim=dim, keepdim=True)\n    second_term = tan_K((lam/2.0) * u_norm, K) * (u/u_norm)\n    y = _mobius_add(x, second_term, K, dim=dim)\n    return y",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_expmap",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, u, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "u",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)\n    lam = _lambda_x(x, K, dim=dim, keepdim=True)\n    second_term = tan_K((lam/2.0) * u_norm, K) * (u/u_norm)\n    y = _mobius_add(x, second_term, K, dim=dim)\n    return y",
          "children": [
            {
              "type": "expression_statement",
              "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "assignment",
                  "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "u_norm",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "u.norm(dim=dim, p=2, keepdim=True).clamp_min",
                          "children": [
                            {
                              "type": "call",
                              "text": "u.norm(dim=dim, p=2, keepdim=True)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "u.norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "u",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim=dim, p=2, keepdim=True)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "p=2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "p",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=True",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "true",
                                          "text": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "clamp_min",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(MIN_NORM)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MIN_NORM",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "lam = _lambda_x(x, K, dim=dim, keepdim=True)",
              "children": [
                {
                  "type": "assignment",
                  "text": "lam = _lambda_x(x, K, dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "lam",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_lambda_x(x, K, dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_lambda_x",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(x, K, dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=True",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "true",
                                  "text": "True",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "second_term = tan_K((lam/2.0) * u_norm, K) * (u/u_norm)",
              "children": [
                {
                  "type": "assignment",
                  "text": "second_term = tan_K((lam/2.0) * u_norm, K) * (u/u_norm)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "second_term",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "tan_K((lam/2.0) * u_norm, K) * (u/u_norm)",
                      "children": [
                        {
                          "type": "call",
                          "text": "tan_K((lam/2.0) * u_norm, K)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "tan_K",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "((lam/2.0) * u_norm, K)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "(lam/2.0) * u_norm",
                                  "children": [
                                    {
                                      "type": "parenthesized_expression",
                                      "text": "(lam/2.0)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "lam/2.0",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "lam",
                                              "children": []
                                            },
                                            {
                                              "type": "/",
                                              "text": "/",
                                              "children": []
                                            },
                                            {
                                              "type": "float",
                                              "text": "2.0",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "u_norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "K",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "parenthesized_expression",
                          "text": "(u/u_norm)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "u/u_norm",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "u",
                                  "children": []
                                },
                                {
                                  "type": "/",
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "u_norm",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "y = _mobius_add(x, second_term, K, dim=dim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "y = _mobius_add(x, second_term, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "y",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_mobius_add(x, second_term, K, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_mobius_add",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(x, second_term, K, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "second_term",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return y",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "y",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def expmap0(u, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the exponential map of :math:`u` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_0(u)\n        =\n        \\tan_\\kappa(\\|u\\|_2/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    u : tensor\n        speed vector on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{0, u}(1)` end point\n    \"\"\"\n    return _expmap0(u, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "expmap0",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(u, *, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "u",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the exponential map of :math:`u` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_0(u)\n        =\n        \\tan_\\kappa(\\|u\\|_2/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    u : tensor\n        speed vector on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{0, u}(1)` end point\n    \"\"\"\n    return _expmap0(u, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the exponential map of :math:`u` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_0(u)\n        =\n        \\tan_\\kappa(\\|u\\|_2/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    u : tensor\n        speed vector on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{0, u}(1)` end point\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the exponential map of :math:`u` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{exp}^\\kappa_0(u)\n        =\n        \\tan_\\kappa(\\|u\\|_2/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    u : tensor\n        speed vector on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        :math:`\\gamma_{0, u}(1)` end point\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _expmap0(u, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_expmap0(u, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_expmap0",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(u, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "u",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _expmap0(u, K, dim: int = -1):\n    u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)\n    gamma_1 = tan_K(u_norm, K) * (u/u_norm)\n    return gamma_1",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_expmap0",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(u, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "u",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)\n    gamma_1 = tan_K(u_norm, K) * (u/u_norm)\n    return gamma_1",
          "children": [
            {
              "type": "expression_statement",
              "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "assignment",
                  "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "u_norm",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "u.norm(dim=dim, p=2, keepdim=True).clamp_min",
                          "children": [
                            {
                              "type": "call",
                              "text": "u.norm(dim=dim, p=2, keepdim=True)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "u.norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "u",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim=dim, p=2, keepdim=True)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "p=2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "p",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=True",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "true",
                                          "text": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "clamp_min",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(MIN_NORM)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MIN_NORM",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "gamma_1 = tan_K(u_norm, K) * (u/u_norm)",
              "children": [
                {
                  "type": "assignment",
                  "text": "gamma_1 = tan_K(u_norm, K) * (u/u_norm)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "gamma_1",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "tan_K(u_norm, K) * (u/u_norm)",
                      "children": [
                        {
                          "type": "call",
                          "text": "tan_K(u_norm, K)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "tan_K",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(u_norm, K)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "u_norm",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "K",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "parenthesized_expression",
                          "text": "(u/u_norm)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "u/u_norm",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "u",
                                  "children": []
                                },
                                {
                                  "type": "/",
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "u_norm",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return gamma_1",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "gamma_1",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def geodesic_unit(t, x, u, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the point on the unit speed geodesic at time :math:`t`, starting\n    from :math:`x` with initial direction :math:`u/\\|u\\|_x`.\n\n    .. math::\n\n        \\gamma_{x,u}(t) = x\\oplus_\\kappa \\tan_\\kappa(t/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    t : tensor\n        travelling time\n    x : tensor\n        initial point on manifold\n    u : tensor\n        initial direction in tangent space at x\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the point on the unit speed geodesic\n    \"\"\"\n    return _geodesic_unit(t, x, u, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "geodesic_unit",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(t, x, u, *, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "t",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "u",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the point on the unit speed geodesic at time :math:`t`, starting\n    from :math:`x` with initial direction :math:`u/\\|u\\|_x`.\n\n    .. math::\n\n        \\gamma_{x,u}(t) = x\\oplus_\\kappa \\tan_\\kappa(t/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    t : tensor\n        travelling time\n    x : tensor\n        initial point on manifold\n    u : tensor\n        initial direction in tangent space at x\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the point on the unit speed geodesic\n    \"\"\"\n    return _geodesic_unit(t, x, u, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the point on the unit speed geodesic at time :math:`t`, starting\n    from :math:`x` with initial direction :math:`u/\\|u\\|_x`.\n\n    .. math::\n\n        \\gamma_{x,u}(t) = x\\oplus_\\kappa \\tan_\\kappa(t/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    t : tensor\n        travelling time\n    x : tensor\n        initial point on manifold\n    u : tensor\n        initial direction in tangent space at x\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the point on the unit speed geodesic\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the point on the unit speed geodesic at time :math:`t`, starting\n    from :math:`x` with initial direction :math:`u/\\|u\\|_x`.\n\n    .. math::\n\n        \\gamma_{x,u}(t) = x\\oplus_\\kappa \\tan_\\kappa(t/2) \\frac{u}{\\|u\\|_2}\n\n    Parameters\n    ----------\n    t : tensor\n        travelling time\n    x : tensor\n        initial point on manifold\n    u : tensor\n        initial direction in tangent space at x\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the point on the unit speed geodesic\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _geodesic_unit(t, x, u, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_geodesic_unit(t, x, u, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_geodesic_unit",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(t, x, u, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "t",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "u",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _geodesic_unit(t, x, u, K, dim: int = -1):\n    u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)\n    second_term = tan_K(t/2.0, K) * (u / u_norm)\n    gamma_1 = _mobius_add(x, second_term, K, dim=dim)\n    return gamma_1",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_geodesic_unit",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(t, x, u, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "t",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "u",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)\n    second_term = tan_K(t/2.0, K) * (u / u_norm)\n    gamma_1 = _mobius_add(x, second_term, K, dim=dim)\n    return gamma_1",
          "children": [
            {
              "type": "expression_statement",
              "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "assignment",
                  "text": "u_norm = u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "u_norm",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "u.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "u.norm(dim=dim, p=2, keepdim=True).clamp_min",
                          "children": [
                            {
                              "type": "call",
                              "text": "u.norm(dim=dim, p=2, keepdim=True)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "u.norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "u",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim=dim, p=2, keepdim=True)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "p=2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "p",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=True",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "true",
                                          "text": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "clamp_min",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(MIN_NORM)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MIN_NORM",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "second_term = tan_K(t/2.0, K) * (u / u_norm)",
              "children": [
                {
                  "type": "assignment",
                  "text": "second_term = tan_K(t/2.0, K) * (u / u_norm)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "second_term",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "tan_K(t/2.0, K) * (u / u_norm)",
                      "children": [
                        {
                          "type": "call",
                          "text": "tan_K(t/2.0, K)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "tan_K",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(t/2.0, K)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "t/2.0",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "t",
                                      "children": []
                                    },
                                    {
                                      "type": "/",
                                      "text": "/",
                                      "children": []
                                    },
                                    {
                                      "type": "float",
                                      "text": "2.0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "K",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "parenthesized_expression",
                          "text": "(u / u_norm)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "u / u_norm",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "u",
                                  "children": []
                                },
                                {
                                  "type": "/",
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "u_norm",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "gamma_1 = _mobius_add(x, second_term, K, dim=dim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "gamma_1 = _mobius_add(x, second_term, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "gamma_1",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_mobius_add(x, second_term, K, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_mobius_add",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(x, second_term, K, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "second_term",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return gamma_1",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "gamma_1",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def logmap(x, y, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the logarithmic map of :math:`y` at :math:`x`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_x(y) = \\frac{2}{\\lambda_x^\\kappa}\n        \\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n        * \\frac{(-x)\\oplus_\\kappa y}{\\|(-x)\\oplus_\\kappa y\\|_2}\n\n    The result of the logmap is a vector :math:`u` in the tangent space of\n    :math:`x` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_x(\\operatorname{log}^\\kappa_x(y))\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_x M` that transports :math:`x` to :math:`y`\n    \"\"\"\n    return _logmap(x, y, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "logmap",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, y, *, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the logarithmic map of :math:`y` at :math:`x`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_x(y) = \\frac{2}{\\lambda_x^\\kappa}\n        \\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n        * \\frac{(-x)\\oplus_\\kappa y}{\\|(-x)\\oplus_\\kappa y\\|_2}\n\n    The result of the logmap is a vector :math:`u` in the tangent space of\n    :math:`x` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_x(\\operatorname{log}^\\kappa_x(y))\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_x M` that transports :math:`x` to :math:`y`\n    \"\"\"\n    return _logmap(x, y, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the logarithmic map of :math:`y` at :math:`x`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_x(y) = \\frac{2}{\\lambda_x^\\kappa}\n        \\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n        * \\frac{(-x)\\oplus_\\kappa y}{\\|(-x)\\oplus_\\kappa y\\|_2}\n\n    The result of the logmap is a vector :math:`u` in the tangent space of\n    :math:`x` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_x(\\operatorname{log}^\\kappa_x(y))\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_x M` that transports :math:`x` to :math:`y`\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the logarithmic map of :math:`y` at :math:`x`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_x(y) = \\frac{2}{\\lambda_x^\\kappa}\n        \\tan_\\kappa^{-1}(\\|(-x)\\oplus_\\kappa y\\|_2)\n        * \\frac{(-x)\\oplus_\\kappa y}{\\|(-x)\\oplus_\\kappa y\\|_2}\n\n    The result of the logmap is a vector :math:`u` in the tangent space of\n    :math:`x` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_x(\\operatorname{log}^\\kappa_x(y))\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point on manifold\n    y : tensor\n        target point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_x M` that transports :math:`x` to :math:`y`\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _logmap(x, y, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_logmap(x, y, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_logmap",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, y, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _logmap(x, y, K, dim: int = -1):\n    sub = _mobius_add(-x, y, K, dim=dim)\n    sub_norm = sub.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)\n    lam = _lambda_x(x, K, keepdim=True, dim=dim)\n    return 2.0*arctan_K(sub_norm, K) * (sub / (lam*sub_norm))",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_logmap",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, y, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "sub = _mobius_add(-x, y, K, dim=dim)\n    sub_norm = sub.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)\n    lam = _lambda_x(x, K, keepdim=True, dim=dim)\n    return 2.0*arctan_K(sub_norm, K) * (sub / (lam*sub_norm))",
          "children": [
            {
              "type": "expression_statement",
              "text": "sub = _mobius_add(-x, y, K, dim=dim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "sub = _mobius_add(-x, y, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "sub",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_mobius_add(-x, y, K, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_mobius_add",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(-x, y, K, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "unary_operator",
                              "text": "-x",
                              "children": [
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "y",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "sub_norm = sub.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "assignment",
                  "text": "sub_norm = sub.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "sub_norm",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "sub.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "sub.norm(dim=dim, p=2, keepdim=True).clamp_min",
                          "children": [
                            {
                              "type": "call",
                              "text": "sub.norm(dim=dim, p=2, keepdim=True)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "sub.norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "sub",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim=dim, p=2, keepdim=True)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "p=2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "p",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=True",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "true",
                                          "text": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "clamp_min",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(MIN_NORM)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MIN_NORM",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "lam = _lambda_x(x, K, keepdim=True, dim=dim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "lam = _lambda_x(x, K, keepdim=True, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "lam",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_lambda_x(x, K, keepdim=True, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_lambda_x",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(x, K, keepdim=True, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=True",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "true",
                                  "text": "True",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return 2.0*arctan_K(sub_norm, K) * (sub / (lam*sub_norm))",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "binary_operator",
                  "text": "2.0*arctan_K(sub_norm, K) * (sub / (lam*sub_norm))",
                  "children": [
                    {
                      "type": "binary_operator",
                      "text": "2.0*arctan_K(sub_norm, K)",
                      "children": [
                        {
                          "type": "float",
                          "text": "2.0",
                          "children": []
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "arctan_K(sub_norm, K)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "arctan_K",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(sub_norm, K)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sub_norm",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "K",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "*",
                      "text": "*",
                      "children": []
                    },
                    {
                      "type": "parenthesized_expression",
                      "text": "(sub / (lam*sub_norm))",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "sub / (lam*sub_norm)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "sub",
                              "children": []
                            },
                            {
                              "type": "/",
                              "text": "/",
                              "children": []
                            },
                            {
                              "type": "parenthesized_expression",
                              "text": "(lam*sub_norm)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "lam*sub_norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "lam",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "sub_norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def logmap0(y, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the logarithmic map of :math:`y` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_0(y)\n        =\n        \\tan_\\kappa^{-1}(\\|y\\|_2) \\frac{y}{\\|y\\|_2}\n\n    The result of the logmap at the origin is a vector :math:`u` in the tangent\n    space of the origin :math:`0` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Parameters\n    ----------\n    y : tensor\n        target point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_0 M` that transports :math:`0` to :math:`y`\n    \"\"\"\n    return _logmap0(y, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "logmap0",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(y, *, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the logarithmic map of :math:`y` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_0(y)\n        =\n        \\tan_\\kappa^{-1}(\\|y\\|_2) \\frac{y}{\\|y\\|_2}\n\n    The result of the logmap at the origin is a vector :math:`u` in the tangent\n    space of the origin :math:`0` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Parameters\n    ----------\n    y : tensor\n        target point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_0 M` that transports :math:`0` to :math:`y`\n    \"\"\"\n    return _logmap0(y, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the logarithmic map of :math:`y` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_0(y)\n        =\n        \\tan_\\kappa^{-1}(\\|y\\|_2) \\frac{y}{\\|y\\|_2}\n\n    The result of the logmap at the origin is a vector :math:`u` in the tangent\n    space of the origin :math:`0` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Parameters\n    ----------\n    y : tensor\n        target point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_0 M` that transports :math:`0` to :math:`y`\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the logarithmic map of :math:`y` at the origin :math:`0`.\n\n    .. math::\n\n        \\operatorname{log}^\\kappa_0(y)\n        =\n        \\tan_\\kappa^{-1}(\\|y\\|_2) \\frac{y}{\\|y\\|_2}\n\n    The result of the logmap at the origin is a vector :math:`u` in the tangent\n    space of the origin :math:`0` such that\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Parameters\n    ----------\n    y : tensor\n        target point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        tangent vector :math:`u\\in T_0 M` that transports :math:`0` to :math:`y`\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _logmap0(y, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_logmap0(y, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_logmap0",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(y, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _logmap0(y, K, dim: int = -1):\n    y_norm = y.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)\n    return (y/y_norm) * arctan_K(y_norm, K)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_logmap0",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(y, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "y_norm = y.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)\n    return (y/y_norm) * arctan_K(y_norm, K)",
          "children": [
            {
              "type": "expression_statement",
              "text": "y_norm = y.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "assignment",
                  "text": "y_norm = y.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "y_norm",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "y.norm(dim=dim, p=2, keepdim=True).clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "y.norm(dim=dim, p=2, keepdim=True).clamp_min",
                          "children": [
                            {
                              "type": "call",
                              "text": "y.norm(dim=dim, p=2, keepdim=True)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "y.norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "y",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim=dim, p=2, keepdim=True)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "p=2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "p",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=True",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "true",
                                          "text": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "clamp_min",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(MIN_NORM)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MIN_NORM",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return (y/y_norm) * arctan_K(y_norm, K)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "binary_operator",
                  "text": "(y/y_norm) * arctan_K(y_norm, K)",
                  "children": [
                    {
                      "type": "parenthesized_expression",
                      "text": "(y/y_norm)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "y/y_norm",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "y",
                              "children": []
                            },
                            {
                              "type": "/",
                              "text": "/",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "y_norm",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "*",
                      "text": "*",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "arctan_K(y_norm, K)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "arctan_K",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(y_norm, K)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "y_norm",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def mobius_matvec(m, x, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the generalization of matrix-vector multiplication in gyrovector\n    spaces.\n\n    The Möbius matrix vector operation is defined as follows:\n\n    .. math::\n\n        M \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|Mx\\|_2}{\\|x\\|_2}\\tan_\\kappa^{-1}(\\|x\\|_2)\n        \\right)\\frac{Mx}{\\|Mx\\|_2}\n\n    .. plot:: plots/extended/universal/mobius_matvec.py\n\n    Parameters\n    ----------\n    m : tensor\n        matrix for multiplication. Batched matmul is performed if\n        ``m.dim() > 2``, but only last dim reduction is supported\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius matvec result\n    \"\"\"\n    return _mobius_matvec(m, x, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_matvec",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(m, x, *, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "m",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the generalization of matrix-vector multiplication in gyrovector\n    spaces.\n\n    The Möbius matrix vector operation is defined as follows:\n\n    .. math::\n\n        M \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|Mx\\|_2}{\\|x\\|_2}\\tan_\\kappa^{-1}(\\|x\\|_2)\n        \\right)\\frac{Mx}{\\|Mx\\|_2}\n\n    .. plot:: plots/extended/universal/mobius_matvec.py\n\n    Parameters\n    ----------\n    m : tensor\n        matrix for multiplication. Batched matmul is performed if\n        ``m.dim() > 2``, but only last dim reduction is supported\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius matvec result\n    \"\"\"\n    return _mobius_matvec(m, x, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the generalization of matrix-vector multiplication in gyrovector\n    spaces.\n\n    The Möbius matrix vector operation is defined as follows:\n\n    .. math::\n\n        M \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|Mx\\|_2}{\\|x\\|_2}\\tan_\\kappa^{-1}(\\|x\\|_2)\n        \\right)\\frac{Mx}{\\|Mx\\|_2}\n\n    .. plot:: plots/extended/universal/mobius_matvec.py\n\n    Parameters\n    ----------\n    m : tensor\n        matrix for multiplication. Batched matmul is performed if\n        ``m.dim() > 2``, but only last dim reduction is supported\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius matvec result\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the generalization of matrix-vector multiplication in gyrovector\n    spaces.\n\n    The Möbius matrix vector operation is defined as follows:\n\n    .. math::\n\n        M \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|Mx\\|_2}{\\|x\\|_2}\\tan_\\kappa^{-1}(\\|x\\|_2)\n        \\right)\\frac{Mx}{\\|Mx\\|_2}\n\n    .. plot:: plots/extended/universal/mobius_matvec.py\n\n    Parameters\n    ----------\n    m : tensor\n        matrix for multiplication. Batched matmul is performed if\n        ``m.dim() > 2``, but only last dim reduction is supported\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius matvec result\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _mobius_matvec(m, x, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_matvec(m, x, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_matvec",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(m, x, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "m",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _mobius_matvec(m, x, K, dim: int = -1):\n    if m.dim() > 2 and dim != -1:\n        raise RuntimeError(\n            \"broadcasted Möbius matvec is supported for the last dim only\"\n        )\n    x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n    if dim != -1 or m.dim() == 2:\n        mx = torch.tensordot(x, m, dims=([dim], [1]))\n    else:\n        mx = torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)\n    mx_norm = mx.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n    res_c = tan_K(mx_norm / x_norm * arctan_K(x_norm, K), K) * (mx / mx_norm)\n    cond = (mx == 0).prod(dim=dim, keepdim=True, dtype=torch.uint8)\n    res_0 = torch.zeros(1, dtype=res_c.dtype, device=res_c.device)\n    res = torch.where(cond, res_0, res_c)\n    return res",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_mobius_matvec",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(m, x, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "m",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "if m.dim() > 2 and dim != -1:\n        raise RuntimeError(\n            \"broadcasted Möbius matvec is supported for the last dim only\"\n        )\n    x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n    if dim != -1 or m.dim() == 2:\n        mx = torch.tensordot(x, m, dims=([dim], [1]))\n    else:\n        mx = torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)\n    mx_norm = mx.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n    res_c = tan_K(mx_norm / x_norm * arctan_K(x_norm, K), K) * (mx / mx_norm)\n    cond = (mx == 0).prod(dim=dim, keepdim=True, dtype=torch.uint8)\n    res_0 = torch.zeros(1, dtype=res_c.dtype, device=res_c.device)\n    res = torch.where(cond, res_0, res_c)\n    return res",
          "children": [
            {
              "type": "if_statement",
              "text": "if m.dim() > 2 and dim != -1:\n        raise RuntimeError(\n            \"broadcasted Möbius matvec is supported for the last dim only\"\n        )",
              "children": [
                {
                  "type": "if",
                  "text": "if",
                  "children": []
                },
                {
                  "type": "boolean_operator",
                  "text": "m.dim() > 2 and dim != -1",
                  "children": [
                    {
                      "type": "comparison_operator",
                      "text": "m.dim() > 2",
                      "children": [
                        {
                          "type": "call",
                          "text": "m.dim()",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "m.dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "m",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "()",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "text": ">",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "2",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "and",
                      "text": "and",
                      "children": []
                    },
                    {
                      "type": "comparison_operator",
                      "text": "dim != -1",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "dim",
                          "children": []
                        },
                        {
                          "type": "!=",
                          "text": "!=",
                          "children": []
                        },
                        {
                          "type": "unary_operator",
                          "text": "-1",
                          "children": [
                            {
                              "type": "-",
                              "text": "-",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "raise RuntimeError(\n            \"broadcasted Möbius matvec is supported for the last dim only\"\n        )",
                  "children": [
                    {
                      "type": "raise_statement",
                      "text": "raise RuntimeError(\n            \"broadcasted Möbius matvec is supported for the last dim only\"\n        )",
                      "children": [
                        {
                          "type": "raise",
                          "text": "raise",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "RuntimeError(\n            \"broadcasted Möbius matvec is supported for the last dim only\"\n        )",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "RuntimeError",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(\n            \"broadcasted Möbius matvec is supported for the last dim only\"\n        )",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string",
                                  "text": "\"broadcasted Möbius matvec is supported for the last dim only\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "assignment",
                  "text": "x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x_norm",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "x.norm(dim=dim, keepdim=True, p=2).clamp_min",
                          "children": [
                            {
                              "type": "call",
                              "text": "x.norm(dim=dim, keepdim=True, p=2)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "x.norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim=dim, keepdim=True, p=2)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=True",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "true",
                                          "text": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "p=2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "p",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "clamp_min",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(MIN_NORM)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MIN_NORM",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "text": "if dim != -1 or m.dim() == 2:\n        mx = torch.tensordot(x, m, dims=([dim], [1]))\n    else:\n        mx = torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)",
              "children": [
                {
                  "type": "if",
                  "text": "if",
                  "children": []
                },
                {
                  "type": "boolean_operator",
                  "text": "dim != -1 or m.dim() == 2",
                  "children": [
                    {
                      "type": "comparison_operator",
                      "text": "dim != -1",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "dim",
                          "children": []
                        },
                        {
                          "type": "!=",
                          "text": "!=",
                          "children": []
                        },
                        {
                          "type": "unary_operator",
                          "text": "-1",
                          "children": [
                            {
                              "type": "-",
                              "text": "-",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "or",
                      "text": "or",
                      "children": []
                    },
                    {
                      "type": "comparison_operator",
                      "text": "m.dim() == 2",
                      "children": [
                        {
                          "type": "call",
                          "text": "m.dim()",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "m.dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "m",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "()",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "==",
                          "text": "==",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "2",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "mx = torch.tensordot(x, m, dims=([dim], [1]))",
                  "children": [
                    {
                      "type": "expression_statement",
                      "text": "mx = torch.tensordot(x, m, dims=([dim], [1]))",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "mx = torch.tensordot(x, m, dims=([dim], [1]))",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "mx",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "torch.tensordot(x, m, dims=([dim], [1]))",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "torch.tensordot",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "torch",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "tensordot",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(x, m, dims=([dim], [1]))",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "m",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dims=([dim], [1])",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dims",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "tuple",
                                          "text": "([dim], [1])",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "list",
                                              "text": "[dim]",
                                              "children": [
                                                {
                                                  "type": "[",
                                                  "text": "[",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "dim",
                                                  "children": []
                                                },
                                                {
                                                  "type": "]",
                                                  "text": "]",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "list",
                                              "text": "[1]",
                                              "children": [
                                                {
                                                  "type": "[",
                                                  "text": "[",
                                                  "children": []
                                                },
                                                {
                                                  "type": "integer",
                                                  "text": "1",
                                                  "children": []
                                                },
                                                {
                                                  "type": "]",
                                                  "text": "]",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "text": "else:\n        mx = torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)",
                  "children": [
                    {
                      "type": "else",
                      "text": "else",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "mx = torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "mx = torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "mx = torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "mx",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "torch.matmul(m, x.unsqueeze(-1)).squeeze(-1)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.matmul(m, x.unsqueeze(-1)).squeeze",
                                      "children": [
                                        {
                                          "type": "call",
                                          "text": "torch.matmul(m, x.unsqueeze(-1))",
                                          "children": [
                                            {
                                              "type": "attribute",
                                              "text": "torch.matmul",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "torch",
                                                  "children": []
                                                },
                                                {
                                                  "type": ".",
                                                  "text": ".",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "matmul",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(m, x.unsqueeze(-1))",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "m",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "call",
                                                  "text": "x.unsqueeze(-1)",
                                                  "children": [
                                                    {
                                                      "type": "attribute",
                                                      "text": "x.unsqueeze",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "x",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": ".",
                                                          "text": ".",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "unsqueeze",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "argument_list",
                                                      "text": "(-1)",
                                                      "children": [
                                                        {
                                                          "type": "(",
                                                          "text": "(",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "unary_operator",
                                                          "text": "-1",
                                                          "children": [
                                                            {
                                                              "type": "-",
                                                              "text": "-",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "text": "1",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": ")",
                                                          "text": ")",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "squeeze",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(-1)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "unary_operator",
                                          "text": "-1",
                                          "children": [
                                            {
                                              "type": "-",
                                              "text": "-",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "1",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "mx_norm = mx.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "assignment",
                  "text": "mx_norm = mx.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "mx_norm",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "mx.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "mx.norm(dim=dim, keepdim=True, p=2).clamp_min",
                          "children": [
                            {
                              "type": "call",
                              "text": "mx.norm(dim=dim, keepdim=True, p=2)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "mx.norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "mx",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim=dim, keepdim=True, p=2)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=True",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "true",
                                          "text": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "p=2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "p",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "clamp_min",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(MIN_NORM)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MIN_NORM",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "res_c = tan_K(mx_norm / x_norm * arctan_K(x_norm, K), K) * (mx / mx_norm)",
              "children": [
                {
                  "type": "assignment",
                  "text": "res_c = tan_K(mx_norm / x_norm * arctan_K(x_norm, K), K) * (mx / mx_norm)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "res_c",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "tan_K(mx_norm / x_norm * arctan_K(x_norm, K), K) * (mx / mx_norm)",
                      "children": [
                        {
                          "type": "call",
                          "text": "tan_K(mx_norm / x_norm * arctan_K(x_norm, K), K)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "tan_K",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(mx_norm / x_norm * arctan_K(x_norm, K), K)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "mx_norm / x_norm * arctan_K(x_norm, K)",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "mx_norm / x_norm",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "mx_norm",
                                          "children": []
                                        },
                                        {
                                          "type": "/",
                                          "text": "/",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "x_norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "call",
                                      "text": "arctan_K(x_norm, K)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "arctan_K",
                                          "children": []
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(x_norm, K)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "x_norm",
                                              "children": []
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "K",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "K",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "parenthesized_expression",
                          "text": "(mx / mx_norm)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "mx / mx_norm",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "mx",
                                  "children": []
                                },
                                {
                                  "type": "/",
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "mx_norm",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "cond = (mx == 0).prod(dim=dim, keepdim=True, dtype=torch.uint8)",
              "children": [
                {
                  "type": "assignment",
                  "text": "cond = (mx == 0).prod(dim=dim, keepdim=True, dtype=torch.uint8)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "cond",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "(mx == 0).prod(dim=dim, keepdim=True, dtype=torch.uint8)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "(mx == 0).prod",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(mx == 0)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "comparison_operator",
                                  "text": "mx == 0",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "mx",
                                      "children": []
                                    },
                                    {
                                      "type": "==",
                                      "text": "==",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "prod",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(dim=dim, keepdim=True, dtype=torch.uint8)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=True",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "true",
                                  "text": "True",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dtype=torch.uint8",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dtype",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "attribute",
                                  "text": "torch.uint8",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "torch",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "uint8",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "res_0 = torch.zeros(1, dtype=res_c.dtype, device=res_c.device)",
              "children": [
                {
                  "type": "assignment",
                  "text": "res_0 = torch.zeros(1, dtype=res_c.dtype, device=res_c.device)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "res_0",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.zeros(1, dtype=res_c.dtype, device=res_c.device)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.zeros",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "zeros",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(1, dtype=res_c.dtype, device=res_c.device)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "1",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dtype=res_c.dtype",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dtype",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "attribute",
                                  "text": "res_c.dtype",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "res_c",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dtype",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "device=res_c.device",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "device",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "attribute",
                                  "text": "res_c.device",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "res_c",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "device",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "res = torch.where(cond, res_0, res_c)",
              "children": [
                {
                  "type": "assignment",
                  "text": "res = torch.where(cond, res_0, res_c)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "res",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.where(cond, res_0, res_c)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.where",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "where",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(cond, res_0, res_c)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "cond",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "res_0",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "res_c",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return res",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "res",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "comment",
      "text": "# TODO: check if this extends to gyrovector spaces for positive curvature",
      "children": []
    },
    {
      "type": "comment",
      "text": "# TODO: add plot",
      "children": []
    },
    {
      "type": "function_definition",
      "text": "def mobius_pointwise_mul(w, x, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the generalization for point-wise multiplication in gyrovector\n    spaces.\n\n    The Möbius pointwise multiplication is defined as follows\n\n    .. math::\n\n        \\operatorname{diag}(w) \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|\\operatorname{diag}(w)x\\|_2}{x}\\tanh^{-1}(\\|x\\|_2)\n        \\right)\\frac{\\|\\operatorname{diag}(w)x\\|_2}{\\|x\\|_2}\n\n\n    Parameters\n    ----------\n    w : tensor\n        weights for multiplication (should be broadcastable to x)\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius point-wise mul result\n    \"\"\"\n    return _mobius_pointwise_mul(w, x, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_pointwise_mul",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(w, x, *, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "w",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the generalization for point-wise multiplication in gyrovector\n    spaces.\n\n    The Möbius pointwise multiplication is defined as follows\n\n    .. math::\n\n        \\operatorname{diag}(w) \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|\\operatorname{diag}(w)x\\|_2}{x}\\tanh^{-1}(\\|x\\|_2)\n        \\right)\\frac{\\|\\operatorname{diag}(w)x\\|_2}{\\|x\\|_2}\n\n\n    Parameters\n    ----------\n    w : tensor\n        weights for multiplication (should be broadcastable to x)\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius point-wise mul result\n    \"\"\"\n    return _mobius_pointwise_mul(w, x, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the generalization for point-wise multiplication in gyrovector\n    spaces.\n\n    The Möbius pointwise multiplication is defined as follows\n\n    .. math::\n\n        \\operatorname{diag}(w) \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|\\operatorname{diag}(w)x\\|_2}{x}\\tanh^{-1}(\\|x\\|_2)\n        \\right)\\frac{\\|\\operatorname{diag}(w)x\\|_2}{\\|x\\|_2}\n\n\n    Parameters\n    ----------\n    w : tensor\n        weights for multiplication (should be broadcastable to x)\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius point-wise mul result\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the generalization for point-wise multiplication in gyrovector\n    spaces.\n\n    The Möbius pointwise multiplication is defined as follows\n\n    .. math::\n\n        \\operatorname{diag}(w) \\otimes_\\kappa x = \\tan_\\kappa\\left(\n            \\frac{\\|\\operatorname{diag}(w)x\\|_2}{x}\\tanh^{-1}(\\|x\\|_2)\n        \\right)\\frac{\\|\\operatorname{diag}(w)x\\|_2}{\\|x\\|_2}\n\n\n    Parameters\n    ----------\n    w : tensor\n        weights for multiplication (should be broadcastable to x)\n    x : tensor\n        point on manifold\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Möbius point-wise mul result\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _mobius_pointwise_mul(w, x, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_mobius_pointwise_mul(w, x, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_mobius_pointwise_mul",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(w, x, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "w",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _mobius_pointwise_mul(w, x, K, dim: int = -1):\n    x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n    wx = w * x\n    wx_norm = wx.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n    res_c = tan_K(wx_norm / x_norm * arctan_K(x_norm, K), K) * (wx/wx_norm)\n    cond = (wx == 0).prod(dim=dim, keepdim=True, dtype=torch.uint8)\n    res_0 = torch.zeros(1, dtype=res_c.dtype, device=res_c.device)\n    res = torch.where(cond, res_0, res_c)\n    return res",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_mobius_pointwise_mul",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(w, x, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "w",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n    wx = w * x\n    wx_norm = wx.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)\n    res_c = tan_K(wx_norm / x_norm * arctan_K(x_norm, K), K) * (wx/wx_norm)\n    cond = (wx == 0).prod(dim=dim, keepdim=True, dtype=torch.uint8)\n    res_0 = torch.zeros(1, dtype=res_c.dtype, device=res_c.device)\n    res = torch.where(cond, res_0, res_c)\n    return res",
          "children": [
            {
              "type": "expression_statement",
              "text": "x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "assignment",
                  "text": "x_norm = x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x_norm",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "x.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "x.norm(dim=dim, keepdim=True, p=2).clamp_min",
                          "children": [
                            {
                              "type": "call",
                              "text": "x.norm(dim=dim, keepdim=True, p=2)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "x.norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim=dim, keepdim=True, p=2)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=True",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "true",
                                          "text": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "p=2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "p",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "clamp_min",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(MIN_NORM)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MIN_NORM",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "wx = w * x",
              "children": [
                {
                  "type": "assignment",
                  "text": "wx = w * x",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "wx",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "w * x",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "w",
                          "children": []
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "wx_norm = wx.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "assignment",
                  "text": "wx_norm = wx.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "wx_norm",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "wx.norm(dim=dim, keepdim=True, p=2).clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "wx.norm(dim=dim, keepdim=True, p=2).clamp_min",
                          "children": [
                            {
                              "type": "call",
                              "text": "wx.norm(dim=dim, keepdim=True, p=2)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "wx.norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "wx",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim=dim, keepdim=True, p=2)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=True",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "true",
                                          "text": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "p=2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "p",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "clamp_min",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(MIN_NORM)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MIN_NORM",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "res_c = tan_K(wx_norm / x_norm * arctan_K(x_norm, K), K) * (wx/wx_norm)",
              "children": [
                {
                  "type": "assignment",
                  "text": "res_c = tan_K(wx_norm / x_norm * arctan_K(x_norm, K), K) * (wx/wx_norm)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "res_c",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "tan_K(wx_norm / x_norm * arctan_K(x_norm, K), K) * (wx/wx_norm)",
                      "children": [
                        {
                          "type": "call",
                          "text": "tan_K(wx_norm / x_norm * arctan_K(x_norm, K), K)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "tan_K",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(wx_norm / x_norm * arctan_K(x_norm, K), K)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "wx_norm / x_norm * arctan_K(x_norm, K)",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "wx_norm / x_norm",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "wx_norm",
                                          "children": []
                                        },
                                        {
                                          "type": "/",
                                          "text": "/",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "x_norm",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "call",
                                      "text": "arctan_K(x_norm, K)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "arctan_K",
                                          "children": []
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(x_norm, K)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "x_norm",
                                              "children": []
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "K",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "K",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "parenthesized_expression",
                          "text": "(wx/wx_norm)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "wx/wx_norm",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "wx",
                                  "children": []
                                },
                                {
                                  "type": "/",
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "wx_norm",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "cond = (wx == 0).prod(dim=dim, keepdim=True, dtype=torch.uint8)",
              "children": [
                {
                  "type": "assignment",
                  "text": "cond = (wx == 0).prod(dim=dim, keepdim=True, dtype=torch.uint8)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "cond",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "(wx == 0).prod(dim=dim, keepdim=True, dtype=torch.uint8)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "(wx == 0).prod",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(wx == 0)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "comparison_operator",
                                  "text": "wx == 0",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "wx",
                                      "children": []
                                    },
                                    {
                                      "type": "==",
                                      "text": "==",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "prod",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(dim=dim, keepdim=True, dtype=torch.uint8)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=True",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "true",
                                  "text": "True",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dtype=torch.uint8",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dtype",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "attribute",
                                  "text": "torch.uint8",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "torch",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "uint8",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "res_0 = torch.zeros(1, dtype=res_c.dtype, device=res_c.device)",
              "children": [
                {
                  "type": "assignment",
                  "text": "res_0 = torch.zeros(1, dtype=res_c.dtype, device=res_c.device)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "res_0",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.zeros(1, dtype=res_c.dtype, device=res_c.device)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.zeros",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "zeros",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(1, dtype=res_c.dtype, device=res_c.device)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "integer",
                              "text": "1",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dtype=res_c.dtype",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dtype",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "attribute",
                                  "text": "res_c.dtype",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "res_c",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dtype",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "device=res_c.device",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "device",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "attribute",
                                  "text": "res_c.device",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "res_c",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "device",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "res = torch.where(cond, res_0, res_c)",
              "children": [
                {
                  "type": "assignment",
                  "text": "res = torch.where(cond, res_0, res_c)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "res",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.where(cond, res_0, res_c)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.where",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "where",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(cond, res_0, res_c)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "cond",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "res_0",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "res_c",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return res",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "res",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def mobius_fn_apply_chain(x, *fns, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the generalization of sequential function application in gyrovector\n    spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the sequence of functions is\n    applied to the vector in the tangent space. The resulting tangent vector is\n    then mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    The definition of mobius function application allows chaining as\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Resulting in\n\n    .. math::\n\n        (f \\circ g)^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(\n            (f \\circ g) (\\operatorname{log}^\\kappa_0(y))\n        )\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fns : callable[]\n        functions to apply\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Apply chain result\n    \"\"\"\n    if not fns:\n        return x\n    else:\n        ex = _logmap0(x, K, dim=dim)\n        for fn in fns:\n            ex = fn(ex)\n        y = _expmap0(ex, K, dim=dim)\n        return y",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_fn_apply_chain",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, *fns, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "list_splat_pattern",
              "text": "*fns",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "fns",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the generalization of sequential function application in gyrovector\n    spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the sequence of functions is\n    applied to the vector in the tangent space. The resulting tangent vector is\n    then mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    The definition of mobius function application allows chaining as\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Resulting in\n\n    .. math::\n\n        (f \\circ g)^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(\n            (f \\circ g) (\\operatorname{log}^\\kappa_0(y))\n        )\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fns : callable[]\n        functions to apply\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Apply chain result\n    \"\"\"\n    if not fns:\n        return x\n    else:\n        ex = _logmap0(x, K, dim=dim)\n        for fn in fns:\n            ex = fn(ex)\n        y = _expmap0(ex, K, dim=dim)\n        return y",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the generalization of sequential function application in gyrovector\n    spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the sequence of functions is\n    applied to the vector in the tangent space. The resulting tangent vector is\n    then mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    The definition of mobius function application allows chaining as\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Resulting in\n\n    .. math::\n\n        (f \\circ g)^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(\n            (f \\circ g) (\\operatorname{log}^\\kappa_0(y))\n        )\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fns : callable[]\n        functions to apply\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Apply chain result\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the generalization of sequential function application in gyrovector\n    spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the sequence of functions is\n    applied to the vector in the tangent space. The resulting tangent vector is\n    then mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    The definition of mobius function application allows chaining as\n\n    .. math::\n\n        y = \\operatorname{exp}^\\kappa_0(\\operatorname{log}^\\kappa_0(y))\n\n    Resulting in\n\n    .. math::\n\n        (f \\circ g)^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(\n            (f \\circ g) (\\operatorname{log}^\\kappa_0(y))\n        )\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fns : callable[]\n        functions to apply\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Apply chain result\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "text": "if not fns:\n        return x\n    else:\n        ex = _logmap0(x, K, dim=dim)\n        for fn in fns:\n            ex = fn(ex)\n        y = _expmap0(ex, K, dim=dim)\n        return y",
              "children": [
                {
                  "type": "if",
                  "text": "if",
                  "children": []
                },
                {
                  "type": "not_operator",
                  "text": "not fns",
                  "children": [
                    {
                      "type": "not",
                      "text": "not",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "fns",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "return x",
                  "children": [
                    {
                      "type": "return_statement",
                      "text": "return x",
                      "children": [
                        {
                          "type": "return",
                          "text": "return",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "text": "else:\n        ex = _logmap0(x, K, dim=dim)\n        for fn in fns:\n            ex = fn(ex)\n        y = _expmap0(ex, K, dim=dim)\n        return y",
                  "children": [
                    {
                      "type": "else",
                      "text": "else",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "ex = _logmap0(x, K, dim=dim)\n        for fn in fns:\n            ex = fn(ex)\n        y = _expmap0(ex, K, dim=dim)\n        return y",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "ex = _logmap0(x, K, dim=dim)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "ex = _logmap0(x, K, dim=dim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "ex",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "_logmap0(x, K, dim=dim)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "_logmap0",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(x, K, dim=dim)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "K",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "for_statement",
                          "text": "for fn in fns:\n            ex = fn(ex)",
                          "children": [
                            {
                              "type": "for",
                              "text": "for",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "fn",
                              "children": []
                            },
                            {
                              "type": "in",
                              "text": "in",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "fns",
                              "children": []
                            },
                            {
                              "type": ":",
                              "text": ":",
                              "children": []
                            },
                            {
                              "type": "block",
                              "text": "ex = fn(ex)",
                              "children": [
                                {
                                  "type": "expression_statement",
                                  "text": "ex = fn(ex)",
                                  "children": [
                                    {
                                      "type": "assignment",
                                      "text": "ex = fn(ex)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "ex",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "fn(ex)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "fn",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(ex)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "ex",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "y = _expmap0(ex, K, dim=dim)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "y = _expmap0(ex, K, dim=dim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "y",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "_expmap0(ex, K, dim=dim)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "_expmap0",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(ex, K, dim=dim)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "ex",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "K",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "return_statement",
                          "text": "return y",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "y",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def mobius_fn_apply(fn, x, *args, K=1.0, dim=-1, **kwargs):\n    r\"\"\"\n    Computes the generalization of function application in gyrovector spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the function is applied\n    to the vector in the tangent space. The resulting tangent vector is then\n    mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    .. plot:: plots/extended/universal/mobius_sigmoid_apply.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fn : callable\n        function to apply\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Result of function in hyperbolic space\n    \"\"\"\n    ex = _logmap0(x, K, dim=dim)\n    ex = fn(ex, *args, **kwargs)\n    y = _expmap0(ex, K, dim=dim)\n    return y",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobius_fn_apply",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(fn, x, *args, K=1.0, dim=-1, **kwargs)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "fn",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "list_splat_pattern",
              "text": "*args",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "args",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "dictionary_splat_pattern",
              "text": "**kwargs",
              "children": [
                {
                  "type": "**",
                  "text": "**",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "kwargs",
                  "children": []
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the generalization of function application in gyrovector spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the function is applied\n    to the vector in the tangent space. The resulting tangent vector is then\n    mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    .. plot:: plots/extended/universal/mobius_sigmoid_apply.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fn : callable\n        function to apply\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Result of function in hyperbolic space\n    \"\"\"\n    ex = _logmap0(x, K, dim=dim)\n    ex = fn(ex, *args, **kwargs)\n    y = _expmap0(ex, K, dim=dim)\n    return y",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the generalization of function application in gyrovector spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the function is applied\n    to the vector in the tangent space. The resulting tangent vector is then\n    mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    .. plot:: plots/extended/universal/mobius_sigmoid_apply.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fn : callable\n        function to apply\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Result of function in hyperbolic space\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the generalization of function application in gyrovector spaces.\n\n    First, a gyrovector is mapped to the tangent space (first-order approx.) via\n    :math:`\\operatorname{log}^\\kappa_0` and then the function is applied\n    to the vector in the tangent space. The resulting tangent vector is then\n    mapped back with :math:`\\operatorname{exp}^\\kappa_0`.\n\n    .. math::\n\n        f^{\\otimes_\\kappa}(x)\n        =\n        \\operatorname{exp}^\\kappa_0(f(\\operatorname{log}^\\kappa_0(y)))\n\n    .. plot:: plots/extended/universal/mobius_sigmoid_apply.py\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold\n    fn : callable\n        function to apply\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Result of function in hyperbolic space\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "ex = _logmap0(x, K, dim=dim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "ex = _logmap0(x, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "ex",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_logmap0(x, K, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_logmap0",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(x, K, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "ex = fn(ex, *args, **kwargs)",
              "children": [
                {
                  "type": "assignment",
                  "text": "ex = fn(ex, *args, **kwargs)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "ex",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "fn(ex, *args, **kwargs)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "fn",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(ex, *args, **kwargs)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "ex",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "list_splat",
                              "text": "*args",
                              "children": [
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "args",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "dictionary_splat",
                              "text": "**kwargs",
                              "children": [
                                {
                                  "type": "**",
                                  "text": "**",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "kwargs",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "y = _expmap0(ex, K, dim=dim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "y = _expmap0(ex, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "y",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_expmap0(ex, K, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_expmap0",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(ex, K, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "ex",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return y",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "y",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def mobiusify(fn):\n    r\"\"\"\n    Wraps a function such that is works in gyrovector spaces.\n\n    Parameters\n    ----------\n    fn : callable\n        function in Euclidean space\n\n    Returns\n    -------\n    callable\n        function working in gyrovector spaces\n\n    Notes\n    -----\n    New function will accept additional argument ``K``.\n    \"\"\"\n\n    @functools.wraps(fn)\n    def mobius_fn(x, *args, K=1.0, dim=-1, **kwargs):\n        ex = _logmap0(x, K, dim=dim)\n        ex = fn(ex, *args, **kwargs)\n        y = _expmap0(ex, K, dim=dim)\n        return y\n\n    return mobius_fn",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "mobiusify",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(fn)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "fn",
              "children": []
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Wraps a function such that is works in gyrovector spaces.\n\n    Parameters\n    ----------\n    fn : callable\n        function in Euclidean space\n\n    Returns\n    -------\n    callable\n        function working in gyrovector spaces\n\n    Notes\n    -----\n    New function will accept additional argument ``K``.\n    \"\"\"\n\n    @functools.wraps(fn)\n    def mobius_fn(x, *args, K=1.0, dim=-1, **kwargs):\n        ex = _logmap0(x, K, dim=dim)\n        ex = fn(ex, *args, **kwargs)\n        y = _expmap0(ex, K, dim=dim)\n        return y\n\n    return mobius_fn",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Wraps a function such that is works in gyrovector spaces.\n\n    Parameters\n    ----------\n    fn : callable\n        function in Euclidean space\n\n    Returns\n    -------\n    callable\n        function working in gyrovector spaces\n\n    Notes\n    -----\n    New function will accept additional argument ``K``.\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Wraps a function such that is works in gyrovector spaces.\n\n    Parameters\n    ----------\n    fn : callable\n        function in Euclidean space\n\n    Returns\n    -------\n    callable\n        function working in gyrovector spaces\n\n    Notes\n    -----\n    New function will accept additional argument ``K``.\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "decorated_definition",
              "text": "@functools.wraps(fn)\n    def mobius_fn(x, *args, K=1.0, dim=-1, **kwargs):\n        ex = _logmap0(x, K, dim=dim)\n        ex = fn(ex, *args, **kwargs)\n        y = _expmap0(ex, K, dim=dim)\n        return y",
              "children": [
                {
                  "type": "decorator",
                  "text": "@functools.wraps(fn)",
                  "children": [
                    {
                      "type": "@",
                      "text": "@",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "functools.wraps(fn)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "functools.wraps",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "functools",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "wraps",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(fn)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "fn",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "function_definition",
                  "text": "def mobius_fn(x, *args, K=1.0, dim=-1, **kwargs):\n        ex = _logmap0(x, K, dim=dim)\n        ex = fn(ex, *args, **kwargs)\n        y = _expmap0(ex, K, dim=dim)\n        return y",
                  "children": [
                    {
                      "type": "def",
                      "text": "def",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "mobius_fn",
                      "children": []
                    },
                    {
                      "type": "parameters",
                      "text": "(x, *args, K=1.0, dim=-1, **kwargs)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "list_splat_pattern",
                          "text": "*args",
                          "children": [
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "args",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "default_parameter",
                          "text": "K=1.0",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "float",
                              "text": "1.0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "default_parameter",
                          "text": "dim=-1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "unary_operator",
                              "text": "-1",
                              "children": [
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "integer",
                                  "text": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "dictionary_splat_pattern",
                          "text": "**kwargs",
                          "children": [
                            {
                              "type": "**",
                              "text": "**",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "kwargs",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "ex = _logmap0(x, K, dim=dim)\n        ex = fn(ex, *args, **kwargs)\n        y = _expmap0(ex, K, dim=dim)\n        return y",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "ex = _logmap0(x, K, dim=dim)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "ex = _logmap0(x, K, dim=dim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "ex",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "_logmap0(x, K, dim=dim)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "_logmap0",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(x, K, dim=dim)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "K",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "ex = fn(ex, *args, **kwargs)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "ex = fn(ex, *args, **kwargs)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "ex",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "fn(ex, *args, **kwargs)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "fn",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(ex, *args, **kwargs)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "ex",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "list_splat",
                                          "text": "*args",
                                          "children": [
                                            {
                                              "type": "*",
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "args",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "dictionary_splat",
                                          "text": "**kwargs",
                                          "children": [
                                            {
                                              "type": "**",
                                              "text": "**",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "kwargs",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "text": "y = _expmap0(ex, K, dim=dim)",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "y = _expmap0(ex, K, dim=dim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "y",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "_expmap0(ex, K, dim=dim)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "_expmap0",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(ex, K, dim=dim)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "ex",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "K",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "text": "dim=dim",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "dim",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "return_statement",
                          "text": "return y",
                          "children": [
                            {
                              "type": "return",
                              "text": "return",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "y",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return mobius_fn",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "mobius_fn",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def dist2plane(x, p, a, *, K=1.0, keepdim=False, signed=False, dim=-1):\n    r\"\"\"\n    Computes the geodesic distance from :math:`x` to a hyperplane going through\n    :math:`x` with the normal vector :math:`a`.\n\n    The hyperplane is such that its set of points is orthogonal to :math:`a` and\n    contains :math:`p`.\n\n    .. plot:: plots/extended/universal/distance2plane.py\n\n    To form an intuition what is a hyperplane in gyrovector spaces, let's first\n    consider an Euclidean hyperplane\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\},\n\n    where :math:`a\\in \\mathbb{R}^n\\backslash \\{\\mathbf{0}\\}` and\n    :math:`b\\in \\mathbb{R}^n`.\n\n    This formulation of a hyperplane is hard to generalize,\n    therefore we can rewrite :math:`\\langle x, a\\rangle - b`\n    utilizing orthogonal completion.\n    Setting any :math:`p` s.t. :math:`b=\\langle a, p\\rangle` we have\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\}\\\\\n        =H_{a, \\langle a, p\\rangle} = \\tilde{H}_{a, p}\\\\\n        = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - \\langle a, p\\rangle = 0\n        \\right\\}\\\\\n        =\\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle -p + x, a\\rangle = 0\n        \\right\\}\\\\\n        = p + \\{a\\}^\\perp\n\n    Naturally we have a set :math:`\\{a\\}^\\perp` with applied :math:`+` operator\n    to each element. Generalizing a notion of summation to the gyrovector space\n    we replace :math:`+` with :math:`\\oplus_\\kappa`.\n\n    Next, we should figure out what is :math:`\\{a\\}^\\perp` in the gyrovector\n    space.\n\n    First thing that we should acknowledge is that notion of orthogonality is\n    defined for vectors in tangent spaces. Let's consider now\n    :math:`p\\in \\mathcal{M}_\\kappa^n` and\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`.\n\n    Slightly deviating from traditional notation let's write\n    :math:`\\{a\\}_p^\\perp` highlighting the tight relationship of\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`\n    with :math:`p \\in \\mathcal{M}_\\kappa^n`. We then define\n\n    .. math::\n\n        \\{a\\}_p^\\perp := \\left\\{\n            z\\in T_p\\mathcal{M}_\\kappa^n \\;:\\; \\langle z, a\\rangle_p = 0\n        \\right\\}\n\n    Recalling that a tangent vector :math:`z` for point :math:`p` yields\n    :math:`x = \\operatorname{exp}^\\kappa_p(z)` we rewrite the above equation as\n\n    .. math::\n        \\{a\\}_p^\\perp := \\left\\{\n            x\\in \\mathcal{M}_\\kappa^n \\;:\\; \\langle\n            \\operatorname{log}_p^\\kappa(x), a\\rangle_p = 0\n        \\right\\}\n\n    This formulation is something more pleasant to work with.\n    Putting all together\n\n    .. math::\n\n        \\tilde{H}_{a, p}^\\kappa = p + \\{a\\}^\\perp_p\\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle\n            \\operatorname{log}^\\kappa_p(x),\n            a\\rangle_p = 0\n        \\right\\} \\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle -p \\oplus_\\kappa x, a\\rangle\n            = 0\n        \\right\\}\n\n    To compute the distance :math:`d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)` we find\n\n    .. math::\n\n        d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)\n        =\n        \\inf_{w\\in \\tilde{H}_{a, p}^\\kappa} d_\\kappa(x, w)\\\\\n        =\n        \\sin^{-1}_\\kappa\\left\\{\n            \\frac{\n            2 |\\langle(-p)\\oplus_\\kappa x, a\\rangle|\n            }{\n            (1+\\kappa\\|(-p)\\oplus_\\kappa \\|x\\|^2_2)\\|a\\|_2\n            }\n        \\right\\}\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold to compute distance for\n    a : tensor\n        hyperplane normal vector in tangent space of :math:`p`\n    p : tensor\n        point on manifold lying on the hyperplane\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    signed : bool\n        return signed distance\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        distance to the hyperplane\n    \"\"\"\n    return _dist2plane(x, a, p, K, keepdim=keepdim, signed=signed, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "dist2plane",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, p, a, *, K=1.0, keepdim=False, signed=False, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "p",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "a",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "keepdim=False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "signed=False",
              "children": [
                {
                  "type": "identifier",
                  "text": "signed",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the geodesic distance from :math:`x` to a hyperplane going through\n    :math:`x` with the normal vector :math:`a`.\n\n    The hyperplane is such that its set of points is orthogonal to :math:`a` and\n    contains :math:`p`.\n\n    .. plot:: plots/extended/universal/distance2plane.py\n\n    To form an intuition what is a hyperplane in gyrovector spaces, let's first\n    consider an Euclidean hyperplane\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\},\n\n    where :math:`a\\in \\mathbb{R}^n\\backslash \\{\\mathbf{0}\\}` and\n    :math:`b\\in \\mathbb{R}^n`.\n\n    This formulation of a hyperplane is hard to generalize,\n    therefore we can rewrite :math:`\\langle x, a\\rangle - b`\n    utilizing orthogonal completion.\n    Setting any :math:`p` s.t. :math:`b=\\langle a, p\\rangle` we have\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\}\\\\\n        =H_{a, \\langle a, p\\rangle} = \\tilde{H}_{a, p}\\\\\n        = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - \\langle a, p\\rangle = 0\n        \\right\\}\\\\\n        =\\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle -p + x, a\\rangle = 0\n        \\right\\}\\\\\n        = p + \\{a\\}^\\perp\n\n    Naturally we have a set :math:`\\{a\\}^\\perp` with applied :math:`+` operator\n    to each element. Generalizing a notion of summation to the gyrovector space\n    we replace :math:`+` with :math:`\\oplus_\\kappa`.\n\n    Next, we should figure out what is :math:`\\{a\\}^\\perp` in the gyrovector\n    space.\n\n    First thing that we should acknowledge is that notion of orthogonality is\n    defined for vectors in tangent spaces. Let's consider now\n    :math:`p\\in \\mathcal{M}_\\kappa^n` and\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`.\n\n    Slightly deviating from traditional notation let's write\n    :math:`\\{a\\}_p^\\perp` highlighting the tight relationship of\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`\n    with :math:`p \\in \\mathcal{M}_\\kappa^n`. We then define\n\n    .. math::\n\n        \\{a\\}_p^\\perp := \\left\\{\n            z\\in T_p\\mathcal{M}_\\kappa^n \\;:\\; \\langle z, a\\rangle_p = 0\n        \\right\\}\n\n    Recalling that a tangent vector :math:`z` for point :math:`p` yields\n    :math:`x = \\operatorname{exp}^\\kappa_p(z)` we rewrite the above equation as\n\n    .. math::\n        \\{a\\}_p^\\perp := \\left\\{\n            x\\in \\mathcal{M}_\\kappa^n \\;:\\; \\langle\n            \\operatorname{log}_p^\\kappa(x), a\\rangle_p = 0\n        \\right\\}\n\n    This formulation is something more pleasant to work with.\n    Putting all together\n\n    .. math::\n\n        \\tilde{H}_{a, p}^\\kappa = p + \\{a\\}^\\perp_p\\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle\n            \\operatorname{log}^\\kappa_p(x),\n            a\\rangle_p = 0\n        \\right\\} \\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle -p \\oplus_\\kappa x, a\\rangle\n            = 0\n        \\right\\}\n\n    To compute the distance :math:`d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)` we find\n\n    .. math::\n\n        d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)\n        =\n        \\inf_{w\\in \\tilde{H}_{a, p}^\\kappa} d_\\kappa(x, w)\\\\\n        =\n        \\sin^{-1}_\\kappa\\left\\{\n            \\frac{\n            2 |\\langle(-p)\\oplus_\\kappa x, a\\rangle|\n            }{\n            (1+\\kappa\\|(-p)\\oplus_\\kappa \\|x\\|^2_2)\\|a\\|_2\n            }\n        \\right\\}\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold to compute distance for\n    a : tensor\n        hyperplane normal vector in tangent space of :math:`p`\n    p : tensor\n        point on manifold lying on the hyperplane\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    signed : bool\n        return signed distance\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        distance to the hyperplane\n    \"\"\"\n    return _dist2plane(x, a, p, K, keepdim=keepdim, signed=signed, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the geodesic distance from :math:`x` to a hyperplane going through\n    :math:`x` with the normal vector :math:`a`.\n\n    The hyperplane is such that its set of points is orthogonal to :math:`a` and\n    contains :math:`p`.\n\n    .. plot:: plots/extended/universal/distance2plane.py\n\n    To form an intuition what is a hyperplane in gyrovector spaces, let's first\n    consider an Euclidean hyperplane\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\},\n\n    where :math:`a\\in \\mathbb{R}^n\\backslash \\{\\mathbf{0}\\}` and\n    :math:`b\\in \\mathbb{R}^n`.\n\n    This formulation of a hyperplane is hard to generalize,\n    therefore we can rewrite :math:`\\langle x, a\\rangle - b`\n    utilizing orthogonal completion.\n    Setting any :math:`p` s.t. :math:`b=\\langle a, p\\rangle` we have\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\}\\\\\n        =H_{a, \\langle a, p\\rangle} = \\tilde{H}_{a, p}\\\\\n        = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - \\langle a, p\\rangle = 0\n        \\right\\}\\\\\n        =\\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle -p + x, a\\rangle = 0\n        \\right\\}\\\\\n        = p + \\{a\\}^\\perp\n\n    Naturally we have a set :math:`\\{a\\}^\\perp` with applied :math:`+` operator\n    to each element. Generalizing a notion of summation to the gyrovector space\n    we replace :math:`+` with :math:`\\oplus_\\kappa`.\n\n    Next, we should figure out what is :math:`\\{a\\}^\\perp` in the gyrovector\n    space.\n\n    First thing that we should acknowledge is that notion of orthogonality is\n    defined for vectors in tangent spaces. Let's consider now\n    :math:`p\\in \\mathcal{M}_\\kappa^n` and\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`.\n\n    Slightly deviating from traditional notation let's write\n    :math:`\\{a\\}_p^\\perp` highlighting the tight relationship of\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`\n    with :math:`p \\in \\mathcal{M}_\\kappa^n`. We then define\n\n    .. math::\n\n        \\{a\\}_p^\\perp := \\left\\{\n            z\\in T_p\\mathcal{M}_\\kappa^n \\;:\\; \\langle z, a\\rangle_p = 0\n        \\right\\}\n\n    Recalling that a tangent vector :math:`z` for point :math:`p` yields\n    :math:`x = \\operatorname{exp}^\\kappa_p(z)` we rewrite the above equation as\n\n    .. math::\n        \\{a\\}_p^\\perp := \\left\\{\n            x\\in \\mathcal{M}_\\kappa^n \\;:\\; \\langle\n            \\operatorname{log}_p^\\kappa(x), a\\rangle_p = 0\n        \\right\\}\n\n    This formulation is something more pleasant to work with.\n    Putting all together\n\n    .. math::\n\n        \\tilde{H}_{a, p}^\\kappa = p + \\{a\\}^\\perp_p\\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle\n            \\operatorname{log}^\\kappa_p(x),\n            a\\rangle_p = 0\n        \\right\\} \\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle -p \\oplus_\\kappa x, a\\rangle\n            = 0\n        \\right\\}\n\n    To compute the distance :math:`d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)` we find\n\n    .. math::\n\n        d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)\n        =\n        \\inf_{w\\in \\tilde{H}_{a, p}^\\kappa} d_\\kappa(x, w)\\\\\n        =\n        \\sin^{-1}_\\kappa\\left\\{\n            \\frac{\n            2 |\\langle(-p)\\oplus_\\kappa x, a\\rangle|\n            }{\n            (1+\\kappa\\|(-p)\\oplus_\\kappa \\|x\\|^2_2)\\|a\\|_2\n            }\n        \\right\\}\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold to compute distance for\n    a : tensor\n        hyperplane normal vector in tangent space of :math:`p`\n    p : tensor\n        point on manifold lying on the hyperplane\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    signed : bool\n        return signed distance\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        distance to the hyperplane\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the geodesic distance from :math:`x` to a hyperplane going through\n    :math:`x` with the normal vector :math:`a`.\n\n    The hyperplane is such that its set of points is orthogonal to :math:`a` and\n    contains :math:`p`.\n\n    .. plot:: plots/extended/universal/distance2plane.py\n\n    To form an intuition what is a hyperplane in gyrovector spaces, let's first\n    consider an Euclidean hyperplane\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\},\n\n    where :math:`a\\in \\mathbb{R}^n\\backslash \\{\\mathbf{0}\\}` and\n    :math:`b\\in \\mathbb{R}^n`.\n\n    This formulation of a hyperplane is hard to generalize,\n    therefore we can rewrite :math:`\\langle x, a\\rangle - b`\n    utilizing orthogonal completion.\n    Setting any :math:`p` s.t. :math:`b=\\langle a, p\\rangle` we have\n\n    .. math::\n\n        H_{a, b} = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - b = 0\n        \\right\\}\\\\\n        =H_{a, \\langle a, p\\rangle} = \\tilde{H}_{a, p}\\\\\n        = \\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle x, a\\rangle - \\langle a, p\\rangle = 0\n        \\right\\}\\\\\n        =\\left\\{\n            x \\in \\mathbb{R}^n\\;:\\;\\langle -p + x, a\\rangle = 0\n        \\right\\}\\\\\n        = p + \\{a\\}^\\perp\n\n    Naturally we have a set :math:`\\{a\\}^\\perp` with applied :math:`+` operator\n    to each element. Generalizing a notion of summation to the gyrovector space\n    we replace :math:`+` with :math:`\\oplus_\\kappa`.\n\n    Next, we should figure out what is :math:`\\{a\\}^\\perp` in the gyrovector\n    space.\n\n    First thing that we should acknowledge is that notion of orthogonality is\n    defined for vectors in tangent spaces. Let's consider now\n    :math:`p\\in \\mathcal{M}_\\kappa^n` and\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`.\n\n    Slightly deviating from traditional notation let's write\n    :math:`\\{a\\}_p^\\perp` highlighting the tight relationship of\n    :math:`a\\in T_p\\mathcal{M}_\\kappa^n\\backslash \\{\\mathbf{0}\\}`\n    with :math:`p \\in \\mathcal{M}_\\kappa^n`. We then define\n\n    .. math::\n\n        \\{a\\}_p^\\perp := \\left\\{\n            z\\in T_p\\mathcal{M}_\\kappa^n \\;:\\; \\langle z, a\\rangle_p = 0\n        \\right\\}\n\n    Recalling that a tangent vector :math:`z` for point :math:`p` yields\n    :math:`x = \\operatorname{exp}^\\kappa_p(z)` we rewrite the above equation as\n\n    .. math::\n        \\{a\\}_p^\\perp := \\left\\{\n            x\\in \\mathcal{M}_\\kappa^n \\;:\\; \\langle\n            \\operatorname{log}_p^\\kappa(x), a\\rangle_p = 0\n        \\right\\}\n\n    This formulation is something more pleasant to work with.\n    Putting all together\n\n    .. math::\n\n        \\tilde{H}_{a, p}^\\kappa = p + \\{a\\}^\\perp_p\\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle\n            \\operatorname{log}^\\kappa_p(x),\n            a\\rangle_p = 0\n        \\right\\} \\\\\n        = \\left\\{\n            x \\in \\mathcal{M}_\\kappa^n\\;:\\;\\langle -p \\oplus_\\kappa x, a\\rangle\n            = 0\n        \\right\\}\n\n    To compute the distance :math:`d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)` we find\n\n    .. math::\n\n        d_\\kappa(x, \\tilde{H}_{a, p}^\\kappa)\n        =\n        \\inf_{w\\in \\tilde{H}_{a, p}^\\kappa} d_\\kappa(x, w)\\\\\n        =\n        \\sin^{-1}_\\kappa\\left\\{\n            \\frac{\n            2 |\\langle(-p)\\oplus_\\kappa x, a\\rangle|\n            }{\n            (1+\\kappa\\|(-p)\\oplus_\\kappa \\|x\\|^2_2)\\|a\\|_2\n            }\n        \\right\\}\n\n    Parameters\n    ----------\n    x : tensor\n        point on manifold to compute distance for\n    a : tensor\n        hyperplane normal vector in tangent space of :math:`p`\n    p : tensor\n        point on manifold lying on the hyperplane\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    signed : bool\n        return signed distance\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        distance to the hyperplane\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _dist2plane(x, a, p, K, keepdim=keepdim, signed=signed, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_dist2plane(x, a, p, K, keepdim=keepdim, signed=signed, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_dist2plane",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, a, p, K, keepdim=keepdim, signed=signed, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "a",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "p",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "keepdim=keepdim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "signed=signed",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "signed",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "signed",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _dist2plane(x, a, p, K, keepdim: bool = False, signed: bool = False,\n                dim: int = -1):\n    diff = _mobius_add(-p, x, K, dim=dim)\n    diff_norm2 = diff.pow(2).sum(dim=dim, keepdim=keepdim).clamp_min(MIN_NORM)\n    sc_diff_a = (diff * a).sum(dim=dim, keepdim=keepdim)\n    if not signed:\n        sc_diff_a = sc_diff_a.abs()\n    a_norm = a.norm(dim=dim, keepdim=keepdim, p=2).clamp_min(MIN_NORM)\n    num = 2.0 * sc_diff_a\n    denom = ((1 + K * diff_norm2) * a_norm).clamp_min(MIN_NORM)\n    return arcsin_K(num / denom, K)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_dist2plane",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, a, p, K, keepdim: bool = False, signed: bool = False,\n                dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "a",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "p",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "keepdim: bool = False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "bool",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "signed: bool = False",
              "children": [
                {
                  "type": "identifier",
                  "text": "signed",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "bool",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "diff = _mobius_add(-p, x, K, dim=dim)\n    diff_norm2 = diff.pow(2).sum(dim=dim, keepdim=keepdim).clamp_min(MIN_NORM)\n    sc_diff_a = (diff * a).sum(dim=dim, keepdim=keepdim)\n    if not signed:\n        sc_diff_a = sc_diff_a.abs()\n    a_norm = a.norm(dim=dim, keepdim=keepdim, p=2).clamp_min(MIN_NORM)\n    num = 2.0 * sc_diff_a\n    denom = ((1 + K * diff_norm2) * a_norm).clamp_min(MIN_NORM)\n    return arcsin_K(num / denom, K)",
          "children": [
            {
              "type": "expression_statement",
              "text": "diff = _mobius_add(-p, x, K, dim=dim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "diff = _mobius_add(-p, x, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "diff",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_mobius_add(-p, x, K, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_mobius_add",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(-p, x, K, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "unary_operator",
                              "text": "-p",
                              "children": [
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "p",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "diff_norm2 = diff.pow(2).sum(dim=dim, keepdim=keepdim).clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "assignment",
                  "text": "diff_norm2 = diff.pow(2).sum(dim=dim, keepdim=keepdim).clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "diff_norm2",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "diff.pow(2).sum(dim=dim, keepdim=keepdim).clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "diff.pow(2).sum(dim=dim, keepdim=keepdim).clamp_min",
                          "children": [
                            {
                              "type": "call",
                              "text": "diff.pow(2).sum(dim=dim, keepdim=keepdim)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "diff.pow(2).sum",
                                  "children": [
                                    {
                                      "type": "call",
                                      "text": "diff.pow(2)",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "diff.pow",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "diff",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "pow",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(2)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "2",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "sum",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim=dim, keepdim=keepdim)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=keepdim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "clamp_min",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(MIN_NORM)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MIN_NORM",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "sc_diff_a = (diff * a).sum(dim=dim, keepdim=keepdim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "sc_diff_a = (diff * a).sum(dim=dim, keepdim=keepdim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "sc_diff_a",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "(diff * a).sum(dim=dim, keepdim=keepdim)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "(diff * a).sum",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(diff * a)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "diff * a",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "diff",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "a",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "sum",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(dim=dim, keepdim=keepdim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=keepdim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "text": "if not signed:\n        sc_diff_a = sc_diff_a.abs()",
              "children": [
                {
                  "type": "if",
                  "text": "if",
                  "children": []
                },
                {
                  "type": "not_operator",
                  "text": "not signed",
                  "children": [
                    {
                      "type": "not",
                      "text": "not",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "signed",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "sc_diff_a = sc_diff_a.abs()",
                  "children": [
                    {
                      "type": "expression_statement",
                      "text": "sc_diff_a = sc_diff_a.abs()",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "sc_diff_a = sc_diff_a.abs()",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "sc_diff_a",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "sc_diff_a.abs()",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "sc_diff_a.abs",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "sc_diff_a",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "abs",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "a_norm = a.norm(dim=dim, keepdim=keepdim, p=2).clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "assignment",
                  "text": "a_norm = a.norm(dim=dim, keepdim=keepdim, p=2).clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "a_norm",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "a.norm(dim=dim, keepdim=keepdim, p=2).clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "a.norm(dim=dim, keepdim=keepdim, p=2).clamp_min",
                          "children": [
                            {
                              "type": "call",
                              "text": "a.norm(dim=dim, keepdim=keepdim, p=2)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "a.norm",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "a",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim=dim, keepdim=keepdim, p=2)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=keepdim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "p=2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "p",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "clamp_min",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(MIN_NORM)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MIN_NORM",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "num = 2.0 * sc_diff_a",
              "children": [
                {
                  "type": "assignment",
                  "text": "num = 2.0 * sc_diff_a",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "num",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "2.0 * sc_diff_a",
                      "children": [
                        {
                          "type": "float",
                          "text": "2.0",
                          "children": []
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "sc_diff_a",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "denom = ((1 + K * diff_norm2) * a_norm).clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "assignment",
                  "text": "denom = ((1 + K * diff_norm2) * a_norm).clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "denom",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "((1 + K * diff_norm2) * a_norm).clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "((1 + K * diff_norm2) * a_norm).clamp_min",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "((1 + K * diff_norm2) * a_norm)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "(1 + K * diff_norm2) * a_norm",
                                  "children": [
                                    {
                                      "type": "parenthesized_expression",
                                      "text": "(1 + K * diff_norm2)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_operator",
                                          "text": "1 + K * diff_norm2",
                                          "children": [
                                            {
                                              "type": "integer",
                                              "text": "1",
                                              "children": []
                                            },
                                            {
                                              "type": "+",
                                              "text": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_operator",
                                              "text": "K * diff_norm2",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "K",
                                                  "children": []
                                                },
                                                {
                                                  "type": "*",
                                                  "text": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "diff_norm2",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "a_norm",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "clamp_min",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(MIN_NORM)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MIN_NORM",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return arcsin_K(num / denom, K)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "arcsin_K(num / denom, K)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "arcsin_K",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(num / denom, K)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "num / denom",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "num",
                              "children": []
                            },
                            {
                              "type": "/",
                              "text": "/",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "denom",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def sproj(x, K):\n    factor = 1.0 / (1.0 + torch.sqrt(K.abs())*x[:,-1])\n    proj = factor[:, None] * x[:,:-1]\n    return proj",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "sproj",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, K)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "factor = 1.0 / (1.0 + torch.sqrt(K.abs())*x[:,-1])\n    proj = factor[:, None] * x[:,:-1]\n    return proj",
          "children": [
            {
              "type": "expression_statement",
              "text": "factor = 1.0 / (1.0 + torch.sqrt(K.abs())*x[:,-1])",
              "children": [
                {
                  "type": "assignment",
                  "text": "factor = 1.0 / (1.0 + torch.sqrt(K.abs())*x[:,-1])",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "factor",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "1.0 / (1.0 + torch.sqrt(K.abs())*x[:,-1])",
                      "children": [
                        {
                          "type": "float",
                          "text": "1.0",
                          "children": []
                        },
                        {
                          "type": "/",
                          "text": "/",
                          "children": []
                        },
                        {
                          "type": "parenthesized_expression",
                          "text": "(1.0 + torch.sqrt(K.abs())*x[:,-1])",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "1.0 + torch.sqrt(K.abs())*x[:,-1]",
                              "children": [
                                {
                                  "type": "float",
                                  "text": "1.0",
                                  "children": []
                                },
                                {
                                  "type": "+",
                                  "text": "+",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "torch.sqrt(K.abs())*x[:,-1]",
                                  "children": [
                                    {
                                      "type": "call",
                                      "text": "torch.sqrt(K.abs())",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "torch.sqrt",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "torch",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "sqrt",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(K.abs())",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "call",
                                              "text": "K.abs()",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "text": "K.abs",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "K",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ".",
                                                      "text": ".",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "abs",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "text": "()",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ")",
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "subscript",
                                      "text": "x[:,-1]",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "[",
                                          "text": "[",
                                          "children": []
                                        },
                                        {
                                          "type": "slice",
                                          "text": ":",
                                          "children": [
                                            {
                                              "type": ":",
                                              "text": ":",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "unary_operator",
                                          "text": "-1",
                                          "children": [
                                            {
                                              "type": "-",
                                              "text": "-",
                                              "children": []
                                            },
                                            {
                                              "type": "integer",
                                              "text": "1",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "]",
                                          "text": "]",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "proj = factor[:, None] * x[:,:-1]",
              "children": [
                {
                  "type": "assignment",
                  "text": "proj = factor[:, None] * x[:,:-1]",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "proj",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "factor[:, None] * x[:,:-1]",
                      "children": [
                        {
                          "type": "subscript",
                          "text": "factor[:, None]",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "factor",
                              "children": []
                            },
                            {
                              "type": "[",
                              "text": "[",
                              "children": []
                            },
                            {
                              "type": "slice",
                              "text": ":",
                              "children": [
                                {
                                  "type": ":",
                                  "text": ":",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "none",
                              "text": "None",
                              "children": []
                            },
                            {
                              "type": "]",
                              "text": "]",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "subscript",
                          "text": "x[:,:-1]",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": "[",
                              "text": "[",
                              "children": []
                            },
                            {
                              "type": "slice",
                              "text": ":",
                              "children": [
                                {
                                  "type": ":",
                                  "text": ":",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "slice",
                              "text": ":-1",
                              "children": [
                                {
                                  "type": ":",
                                  "text": ":",
                                  "children": []
                                },
                                {
                                  "type": "unary_operator",
                                  "text": "-1",
                                  "children": [
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "]",
                              "text": "]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return proj",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "proj",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def inv_sproj(x, K):\n    lam_x = _lambda_x(x, K, keepdim=True, dim=-1)\n    A = lam_x[:, None] * x\n    B = 1.0/torch.sqrt(K.abs())*(lam_x - 1.0).unsqueeze(dim=-1)\n    proj = torch.cat((A,B), dim=-1)\n    return proj",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "inv_sproj",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, K)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "lam_x = _lambda_x(x, K, keepdim=True, dim=-1)\n    A = lam_x[:, None] * x\n    B = 1.0/torch.sqrt(K.abs())*(lam_x - 1.0).unsqueeze(dim=-1)\n    proj = torch.cat((A,B), dim=-1)\n    return proj",
          "children": [
            {
              "type": "expression_statement",
              "text": "lam_x = _lambda_x(x, K, keepdim=True, dim=-1)",
              "children": [
                {
                  "type": "assignment",
                  "text": "lam_x = _lambda_x(x, K, keepdim=True, dim=-1)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "lam_x",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_lambda_x(x, K, keepdim=True, dim=-1)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_lambda_x",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(x, K, keepdim=True, dim=-1)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=True",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "true",
                                  "text": "True",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=-1",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "unary_operator",
                                  "text": "-1",
                                  "children": [
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "A = lam_x[:, None] * x",
              "children": [
                {
                  "type": "assignment",
                  "text": "A = lam_x[:, None] * x",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "A",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "lam_x[:, None] * x",
                      "children": [
                        {
                          "type": "subscript",
                          "text": "lam_x[:, None]",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "lam_x",
                              "children": []
                            },
                            {
                              "type": "[",
                              "text": "[",
                              "children": []
                            },
                            {
                              "type": "slice",
                              "text": ":",
                              "children": [
                                {
                                  "type": ":",
                                  "text": ":",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "none",
                              "text": "None",
                              "children": []
                            },
                            {
                              "type": "]",
                              "text": "]",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "B = 1.0/torch.sqrt(K.abs())*(lam_x - 1.0).unsqueeze(dim=-1)",
              "children": [
                {
                  "type": "assignment",
                  "text": "B = 1.0/torch.sqrt(K.abs())*(lam_x - 1.0).unsqueeze(dim=-1)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "B",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "1.0/torch.sqrt(K.abs())*(lam_x - 1.0).unsqueeze(dim=-1)",
                      "children": [
                        {
                          "type": "binary_operator",
                          "text": "1.0/torch.sqrt(K.abs())",
                          "children": [
                            {
                              "type": "float",
                              "text": "1.0",
                              "children": []
                            },
                            {
                              "type": "/",
                              "text": "/",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "torch.sqrt(K.abs())",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "torch.sqrt",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "torch",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "sqrt",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(K.abs())",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "call",
                                      "text": "K.abs()",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "text": "K.abs",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "text": "K",
                                              "children": []
                                            },
                                            {
                                              "type": ".",
                                              "text": ".",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "abs",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "()",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "(lam_x - 1.0).unsqueeze(dim=-1)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "(lam_x - 1.0).unsqueeze",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "text": "(lam_x - 1.0)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "lam_x - 1.0",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "lam_x",
                                          "children": []
                                        },
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "float",
                                          "text": "1.0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "unsqueeze",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(dim=-1)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=-1",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "unary_operator",
                                      "text": "-1",
                                      "children": [
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "proj = torch.cat((A,B), dim=-1)",
              "children": [
                {
                  "type": "assignment",
                  "text": "proj = torch.cat((A,B), dim=-1)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "proj",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.cat((A,B), dim=-1)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.cat",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "cat",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "((A,B), dim=-1)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "tuple",
                              "text": "(A,B)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "A",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "B",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=-1",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "unary_operator",
                                  "text": "-1",
                                  "children": [
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return proj",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "proj",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def antipode(x, K, dim: int = -1):\n    r\"\"\"\n    Computes the antipode of a point :math:`x_1,...,x_n` for :math:`\\kappa > 0`.\n\n    Let :math:`x` be a point on some sphere. Then :math:`-x` is its antipode.\n    Since we're dealing with stereographic projections, for :math:`sproj(x)` we\n    get the antipode :math:`sproj(-x)`. Which is given as follows:\n\n    .. math::\n\n        \\text{antipode}(x)\n        =\n        \\frac{1+\\kappa\\|x\\|^2_2}{2\\kappa\\|x\\|^2_2}{}(-x)\n\n    Parameters\n    ----------\n    x : tensor\n        points :math:`x_1,...,x_n` on manifold to compute antipode for\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        antipode\n    \"\"\"\n    return _antipode(x, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "antipode",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the antipode of a point :math:`x_1,...,x_n` for :math:`\\kappa > 0`.\n\n    Let :math:`x` be a point on some sphere. Then :math:`-x` is its antipode.\n    Since we're dealing with stereographic projections, for :math:`sproj(x)` we\n    get the antipode :math:`sproj(-x)`. Which is given as follows:\n\n    .. math::\n\n        \\text{antipode}(x)\n        =\n        \\frac{1+\\kappa\\|x\\|^2_2}{2\\kappa\\|x\\|^2_2}{}(-x)\n\n    Parameters\n    ----------\n    x : tensor\n        points :math:`x_1,...,x_n` on manifold to compute antipode for\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        antipode\n    \"\"\"\n    return _antipode(x, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the antipode of a point :math:`x_1,...,x_n` for :math:`\\kappa > 0`.\n\n    Let :math:`x` be a point on some sphere. Then :math:`-x` is its antipode.\n    Since we're dealing with stereographic projections, for :math:`sproj(x)` we\n    get the antipode :math:`sproj(-x)`. Which is given as follows:\n\n    .. math::\n\n        \\text{antipode}(x)\n        =\n        \\frac{1+\\kappa\\|x\\|^2_2}{2\\kappa\\|x\\|^2_2}{}(-x)\n\n    Parameters\n    ----------\n    x : tensor\n        points :math:`x_1,...,x_n` on manifold to compute antipode for\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        antipode\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the antipode of a point :math:`x_1,...,x_n` for :math:`\\kappa > 0`.\n\n    Let :math:`x` be a point on some sphere. Then :math:`-x` is its antipode.\n    Since we're dealing with stereographic projections, for :math:`sproj(x)` we\n    get the antipode :math:`sproj(-x)`. Which is given as follows:\n\n    .. math::\n\n        \\text{antipode}(x)\n        =\n        \\frac{1+\\kappa\\|x\\|^2_2}{2\\kappa\\|x\\|^2_2}{}(-x)\n\n    Parameters\n    ----------\n    x : tensor\n        points :math:`x_1,...,x_n` on manifold to compute antipode for\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        antipode\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _antipode(x, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_antipode(x, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_antipode",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _antipode(x, K, dim=-1):\n    # TODO: add implementation that uses stereographic projections!!!\n    # TODO: this one is correct, but it could be more efficient!!!\n    v = x/x.norm(p=2, dim=-1)\n    R = 1.0/torch.sqrt(K.abs())\n    import math\n    return _geodesic_unit(math.pi*R, x, v, K, dim=-1)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_antipode",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, K, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "comment",
          "text": "# TODO: add implementation that uses stereographic projections!!!",
          "children": []
        },
        {
          "type": "comment",
          "text": "# TODO: this one is correct, but it could be more efficient!!!",
          "children": []
        },
        {
          "type": "block",
          "text": "v = x/x.norm(p=2, dim=-1)\n    R = 1.0/torch.sqrt(K.abs())\n    import math\n    return _geodesic_unit(math.pi*R, x, v, K, dim=-1)",
          "children": [
            {
              "type": "expression_statement",
              "text": "v = x/x.norm(p=2, dim=-1)",
              "children": [
                {
                  "type": "assignment",
                  "text": "v = x/x.norm(p=2, dim=-1)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "v",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "x/x.norm(p=2, dim=-1)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": "/",
                          "text": "/",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "x.norm(p=2, dim=-1)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "x.norm",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "norm",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(p=2, dim=-1)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "p=2",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "p",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=-1",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "unary_operator",
                                      "text": "-1",
                                      "children": [
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "integer",
                                          "text": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "R = 1.0/torch.sqrt(K.abs())",
              "children": [
                {
                  "type": "assignment",
                  "text": "R = 1.0/torch.sqrt(K.abs())",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "R",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "1.0/torch.sqrt(K.abs())",
                      "children": [
                        {
                          "type": "float",
                          "text": "1.0",
                          "children": []
                        },
                        {
                          "type": "/",
                          "text": "/",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "torch.sqrt(K.abs())",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "torch.sqrt",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "torch",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "sqrt",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(K.abs())",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "call",
                                  "text": "K.abs()",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "K.abs",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "K",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "abs",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "import_statement",
              "text": "import math",
              "children": [
                {
                  "type": "import",
                  "text": "import",
                  "children": []
                },
                {
                  "type": "dotted_name",
                  "text": "math",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "math",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _geodesic_unit(math.pi*R, x, v, K, dim=-1)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_geodesic_unit(math.pi*R, x, v, K, dim=-1)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_geodesic_unit",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(math.pi*R, x, v, K, dim=-1)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "math.pi*R",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "math.pi",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "math",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "pi",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "R",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "v",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=-1",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "unary_operator",
                              "text": "-1",
                              "children": [
                                {
                                  "type": "-",
                                  "text": "-",
                                  "children": []
                                },
                                {
                                  "type": "integer",
                                  "text": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def weighted_midpoint(x, a, *, K=1.0, keepdim=False, dim=-1):\n    r\"\"\"\n    Computes the weighted Möbius gyromidpoint of a set of points\n    :math:`x_1,...,x_n` according to weights :math:`\\alpha_1,...,\\alpha_n`.\n\n    The gyromidpoint looks as follows:\n\n    .. plot:: plots/extended/universal/midpoint.py\n\n    The weighted Möbius gyromidpoint is computed as follows\n\n    .. math::\n\n        m_{\\kappa}(x_1,\\ldots,x_n,\\alpha_1,\\ldots,\\alpha_n)\n        =\n        \\frac{1}{2}\n        \\otimes_\\kappa\n        \\left(\n        \\sum_{i=1}^n\n        \\frac{\n        \\alpha_i\\lambda_{x_i}^\\kappa\n        }{\n        \\sum_{j=1}^n\\alpha_j(\\lambda_{x_j}^\\kappa-1)\n        }\n        x_i\n        \\right)\n\n    where the weights :math:`\\alpha_1,...,\\alpha_n` do not necessarily need\n    to sum to 1 (only their relative weight matters). Note that this formula\n    also requires to choose between the midpoint and its antipode for\n    :math:`\\kappa > 0`.\n\n    Parameters\n    ----------\n    x : tensor\n        points :math:`x_1,...,x_n` on manifold to compute weighted Möbius\n        gyromidpoint for\n    a : tensor\n        scalar midpoint weights :math:`\\alpha_1,...,\\alpha_n`\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        weighted Möbius gyromidpoint\n    \"\"\"\n    return _weighted_midpoint(x, a, K, keepdim=keepdim, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "weighted_midpoint",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, a, *, K=1.0, keepdim=False, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "a",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "keepdim=False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the weighted Möbius gyromidpoint of a set of points\n    :math:`x_1,...,x_n` according to weights :math:`\\alpha_1,...,\\alpha_n`.\n\n    The gyromidpoint looks as follows:\n\n    .. plot:: plots/extended/universal/midpoint.py\n\n    The weighted Möbius gyromidpoint is computed as follows\n\n    .. math::\n\n        m_{\\kappa}(x_1,\\ldots,x_n,\\alpha_1,\\ldots,\\alpha_n)\n        =\n        \\frac{1}{2}\n        \\otimes_\\kappa\n        \\left(\n        \\sum_{i=1}^n\n        \\frac{\n        \\alpha_i\\lambda_{x_i}^\\kappa\n        }{\n        \\sum_{j=1}^n\\alpha_j(\\lambda_{x_j}^\\kappa-1)\n        }\n        x_i\n        \\right)\n\n    where the weights :math:`\\alpha_1,...,\\alpha_n` do not necessarily need\n    to sum to 1 (only their relative weight matters). Note that this formula\n    also requires to choose between the midpoint and its antipode for\n    :math:`\\kappa > 0`.\n\n    Parameters\n    ----------\n    x : tensor\n        points :math:`x_1,...,x_n` on manifold to compute weighted Möbius\n        gyromidpoint for\n    a : tensor\n        scalar midpoint weights :math:`\\alpha_1,...,\\alpha_n`\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        weighted Möbius gyromidpoint\n    \"\"\"\n    return _weighted_midpoint(x, a, K, keepdim=keepdim, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the weighted Möbius gyromidpoint of a set of points\n    :math:`x_1,...,x_n` according to weights :math:`\\alpha_1,...,\\alpha_n`.\n\n    The gyromidpoint looks as follows:\n\n    .. plot:: plots/extended/universal/midpoint.py\n\n    The weighted Möbius gyromidpoint is computed as follows\n\n    .. math::\n\n        m_{\\kappa}(x_1,\\ldots,x_n,\\alpha_1,\\ldots,\\alpha_n)\n        =\n        \\frac{1}{2}\n        \\otimes_\\kappa\n        \\left(\n        \\sum_{i=1}^n\n        \\frac{\n        \\alpha_i\\lambda_{x_i}^\\kappa\n        }{\n        \\sum_{j=1}^n\\alpha_j(\\lambda_{x_j}^\\kappa-1)\n        }\n        x_i\n        \\right)\n\n    where the weights :math:`\\alpha_1,...,\\alpha_n` do not necessarily need\n    to sum to 1 (only their relative weight matters). Note that this formula\n    also requires to choose between the midpoint and its antipode for\n    :math:`\\kappa > 0`.\n\n    Parameters\n    ----------\n    x : tensor\n        points :math:`x_1,...,x_n` on manifold to compute weighted Möbius\n        gyromidpoint for\n    a : tensor\n        scalar midpoint weights :math:`\\alpha_1,...,\\alpha_n`\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        weighted Möbius gyromidpoint\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the weighted Möbius gyromidpoint of a set of points\n    :math:`x_1,...,x_n` according to weights :math:`\\alpha_1,...,\\alpha_n`.\n\n    The gyromidpoint looks as follows:\n\n    .. plot:: plots/extended/universal/midpoint.py\n\n    The weighted Möbius gyromidpoint is computed as follows\n\n    .. math::\n\n        m_{\\kappa}(x_1,\\ldots,x_n,\\alpha_1,\\ldots,\\alpha_n)\n        =\n        \\frac{1}{2}\n        \\otimes_\\kappa\n        \\left(\n        \\sum_{i=1}^n\n        \\frac{\n        \\alpha_i\\lambda_{x_i}^\\kappa\n        }{\n        \\sum_{j=1}^n\\alpha_j(\\lambda_{x_j}^\\kappa-1)\n        }\n        x_i\n        \\right)\n\n    where the weights :math:`\\alpha_1,...,\\alpha_n` do not necessarily need\n    to sum to 1 (only their relative weight matters). Note that this formula\n    also requires to choose between the midpoint and its antipode for\n    :math:`\\kappa > 0`.\n\n    Parameters\n    ----------\n    x : tensor\n        points :math:`x_1,...,x_n` on manifold to compute weighted Möbius\n        gyromidpoint for\n    a : tensor\n        scalar midpoint weights :math:`\\alpha_1,...,\\alpha_n`\n    K : float|tensor\n        sectional curvature of manifold\n    keepdim : bool\n        retain the last dim? (default: false)\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        weighted Möbius gyromidpoint\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _weighted_midpoint(x, a, K, keepdim=keepdim, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_weighted_midpoint(x, a, K, keepdim=keepdim, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_weighted_midpoint",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, a, K, keepdim=keepdim, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "a",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "keepdim=keepdim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "keepdim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _weighted_midpoint(x, w, K, keepdim: bool = False, dim: int = -1):\n    lam_x = _lambda_x(x, K, keepdim=False, dim=dim)\n    w_times_lam_x = w * lam_x\n    denominator = (w_times_lam_x - w).sum()\n\n    # min-clamp denominator\n    s = torch.sign(torch.sign(denominator) + 0.1)\n    if denominator.abs() < MIN_NORM:\n        denominator = s * MIN_NORM\n    linear_weights = w_times_lam_x / denominator\n\n    # multiply rows of X by linear weights\n    # TODO: incorporate dimension independence in next two lines\n    x = x.t()\n    rhs = torch.matmul(x, linear_weights).t()\n    x = x.t()   # restore\n    # TODO: remove dimension appropriately (the specified one)\n    if not keepdim:\n        rhs = rhs.squeeze()\n\n    # determine midpoint\n    midpoint = None\n    m = _mobius_scalar_mul(0.5, rhs, K, dim=dim)\n    # also compute and compare to antipode of m for positive curvature\n    if K > 0:\n        m_a = _antipode(m, K, dim=dim)\n        # determine whether m or m_a minimizes the sum of distances\n        d = _dist(x, m, K, keepdim=keepdim, dim=dim).sum(dim=dim, keepdim=False)\n        d_a = _dist(x, m_a, K, keepdim=keepdim, dim=dim).sum(dim=dim, keepdim=False)\n        # use midpoint that has smaller sum of squared distances\n        midpoint = m if d < d_a else m_a\n    else:\n        midpoint = m\n\n    return midpoint",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_weighted_midpoint",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, w, K, keepdim: bool = False, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "w",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "keepdim: bool = False",
              "children": [
                {
                  "type": "identifier",
                  "text": "keepdim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "bool",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "false",
                  "text": "False",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "lam_x = _lambda_x(x, K, keepdim=False, dim=dim)\n    w_times_lam_x = w * lam_x\n    denominator = (w_times_lam_x - w).sum()\n\n    # min-clamp denominator\n    s = torch.sign(torch.sign(denominator) + 0.1)\n    if denominator.abs() < MIN_NORM:\n        denominator = s * MIN_NORM\n    linear_weights = w_times_lam_x / denominator\n\n    # multiply rows of X by linear weights\n    # TODO: incorporate dimension independence in next two lines\n    x = x.t()\n    rhs = torch.matmul(x, linear_weights).t()\n    x = x.t()   # restore\n    # TODO: remove dimension appropriately (the specified one)\n    if not keepdim:\n        rhs = rhs.squeeze()\n\n    # determine midpoint\n    midpoint = None\n    m = _mobius_scalar_mul(0.5, rhs, K, dim=dim)\n    # also compute and compare to antipode of m for positive curvature\n    if K > 0:\n        m_a = _antipode(m, K, dim=dim)\n        # determine whether m or m_a minimizes the sum of distances\n        d = _dist(x, m, K, keepdim=keepdim, dim=dim).sum(dim=dim, keepdim=False)\n        d_a = _dist(x, m_a, K, keepdim=keepdim, dim=dim).sum(dim=dim, keepdim=False)\n        # use midpoint that has smaller sum of squared distances\n        midpoint = m if d < d_a else m_a\n    else:\n        midpoint = m\n\n    return midpoint",
          "children": [
            {
              "type": "expression_statement",
              "text": "lam_x = _lambda_x(x, K, keepdim=False, dim=dim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "lam_x = _lambda_x(x, K, keepdim=False, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "lam_x",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_lambda_x(x, K, keepdim=False, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_lambda_x",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(x, K, keepdim=False, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=False",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "false",
                                  "text": "False",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "w_times_lam_x = w * lam_x",
              "children": [
                {
                  "type": "assignment",
                  "text": "w_times_lam_x = w * lam_x",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "w_times_lam_x",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "w * lam_x",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "w",
                          "children": []
                        },
                        {
                          "type": "*",
                          "text": "*",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "lam_x",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "denominator = (w_times_lam_x - w).sum()",
              "children": [
                {
                  "type": "assignment",
                  "text": "denominator = (w_times_lam_x - w).sum()",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "denominator",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "(w_times_lam_x - w).sum()",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "(w_times_lam_x - w).sum",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(w_times_lam_x - w)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "w_times_lam_x - w",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "w_times_lam_x",
                                      "children": []
                                    },
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "w",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "sum",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "()",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "text": "# min-clamp denominator",
              "children": []
            },
            {
              "type": "expression_statement",
              "text": "s = torch.sign(torch.sign(denominator) + 0.1)",
              "children": [
                {
                  "type": "assignment",
                  "text": "s = torch.sign(torch.sign(denominator) + 0.1)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "s",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.sign(torch.sign(denominator) + 0.1)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.sign",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "torch",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "sign",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(torch.sign(denominator) + 0.1)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "torch.sign(denominator) + 0.1",
                              "children": [
                                {
                                  "type": "call",
                                  "text": "torch.sign(denominator)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "text": "torch.sign",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "torch",
                                          "children": []
                                        },
                                        {
                                          "type": ".",
                                          "text": ".",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "sign",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "text": "(denominator)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "denominator",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "+",
                                  "text": "+",
                                  "children": []
                                },
                                {
                                  "type": "float",
                                  "text": "0.1",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "text": "if denominator.abs() < MIN_NORM:\n        denominator = s * MIN_NORM",
              "children": [
                {
                  "type": "if",
                  "text": "if",
                  "children": []
                },
                {
                  "type": "comparison_operator",
                  "text": "denominator.abs() < MIN_NORM",
                  "children": [
                    {
                      "type": "call",
                      "text": "denominator.abs()",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "denominator.abs",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "denominator",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "abs",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "()",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "<",
                      "text": "<",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "MIN_NORM",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "denominator = s * MIN_NORM",
                  "children": [
                    {
                      "type": "expression_statement",
                      "text": "denominator = s * MIN_NORM",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "denominator = s * MIN_NORM",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "denominator",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "s * MIN_NORM",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "s",
                                  "children": []
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "MIN_NORM",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "linear_weights = w_times_lam_x / denominator",
              "children": [
                {
                  "type": "assignment",
                  "text": "linear_weights = w_times_lam_x / denominator",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "linear_weights",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "w_times_lam_x / denominator",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "w_times_lam_x",
                          "children": []
                        },
                        {
                          "type": "/",
                          "text": "/",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "denominator",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "text": "# multiply rows of X by linear weights",
              "children": []
            },
            {
              "type": "comment",
              "text": "# TODO: incorporate dimension independence in next two lines",
              "children": []
            },
            {
              "type": "expression_statement",
              "text": "x = x.t()",
              "children": [
                {
                  "type": "assignment",
                  "text": "x = x.t()",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "x.t()",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "x.t",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "t",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "()",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "rhs = torch.matmul(x, linear_weights).t()",
              "children": [
                {
                  "type": "assignment",
                  "text": "rhs = torch.matmul(x, linear_weights).t()",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "rhs",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "torch.matmul(x, linear_weights).t()",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "torch.matmul(x, linear_weights).t",
                          "children": [
                            {
                              "type": "call",
                              "text": "torch.matmul(x, linear_weights)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "torch.matmul",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "torch",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "matmul",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(x, linear_weights)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "linear_weights",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "t",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "()",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "x = x.t()",
              "children": [
                {
                  "type": "assignment",
                  "text": "x = x.t()",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "x",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "x.t()",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "x.t",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "t",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "()",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "text": "# restore",
              "children": []
            },
            {
              "type": "comment",
              "text": "# TODO: remove dimension appropriately (the specified one)",
              "children": []
            },
            {
              "type": "if_statement",
              "text": "if not keepdim:\n        rhs = rhs.squeeze()",
              "children": [
                {
                  "type": "if",
                  "text": "if",
                  "children": []
                },
                {
                  "type": "not_operator",
                  "text": "not keepdim",
                  "children": [
                    {
                      "type": "not",
                      "text": "not",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "text": "keepdim",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "rhs = rhs.squeeze()",
                  "children": [
                    {
                      "type": "expression_statement",
                      "text": "rhs = rhs.squeeze()",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "rhs = rhs.squeeze()",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "rhs",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "rhs.squeeze()",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "rhs.squeeze",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "rhs",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "squeeze",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "text": "# determine midpoint",
              "children": []
            },
            {
              "type": "expression_statement",
              "text": "midpoint = None",
              "children": [
                {
                  "type": "assignment",
                  "text": "midpoint = None",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "midpoint",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "none",
                      "text": "None",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "m = _mobius_scalar_mul(0.5, rhs, K, dim=dim)",
              "children": [
                {
                  "type": "assignment",
                  "text": "m = _mobius_scalar_mul(0.5, rhs, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "m",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "_mobius_scalar_mul(0.5, rhs, K, dim=dim)",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "_mobius_scalar_mul",
                          "children": []
                        },
                        {
                          "type": "argument_list",
                          "text": "(0.5, rhs, K, dim=dim)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "float",
                              "text": "0.5",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "rhs",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "text": "# also compute and compare to antipode of m for positive curvature",
              "children": []
            },
            {
              "type": "if_statement",
              "text": "if K > 0:\n        m_a = _antipode(m, K, dim=dim)\n        # determine whether m or m_a minimizes the sum of distances\n        d = _dist(x, m, K, keepdim=keepdim, dim=dim).sum(dim=dim, keepdim=False)\n        d_a = _dist(x, m_a, K, keepdim=keepdim, dim=dim).sum(dim=dim, keepdim=False)\n        # use midpoint that has smaller sum of squared distances\n        midpoint = m if d < d_a else m_a\n    else:\n        midpoint = m",
              "children": [
                {
                  "type": "if",
                  "text": "if",
                  "children": []
                },
                {
                  "type": "comparison_operator",
                  "text": "K > 0",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "K",
                      "children": []
                    },
                    {
                      "type": ">",
                      "text": ">",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "block",
                  "text": "m_a = _antipode(m, K, dim=dim)\n        # determine whether m or m_a minimizes the sum of distances\n        d = _dist(x, m, K, keepdim=keepdim, dim=dim).sum(dim=dim, keepdim=False)\n        d_a = _dist(x, m_a, K, keepdim=keepdim, dim=dim).sum(dim=dim, keepdim=False)\n        # use midpoint that has smaller sum of squared distances\n        midpoint = m if d < d_a else m_a",
                  "children": [
                    {
                      "type": "expression_statement",
                      "text": "m_a = _antipode(m, K, dim=dim)",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "m_a = _antipode(m, K, dim=dim)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "m_a",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "_antipode(m, K, dim=dim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "_antipode",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(m, K, dim=dim)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "m",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "K",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "comment",
                      "text": "# determine whether m or m_a minimizes the sum of distances",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "text": "d = _dist(x, m, K, keepdim=keepdim, dim=dim).sum(dim=dim, keepdim=False)",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "d = _dist(x, m, K, keepdim=keepdim, dim=dim).sum(dim=dim, keepdim=False)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "d",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "_dist(x, m, K, keepdim=keepdim, dim=dim).sum(dim=dim, keepdim=False)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "_dist(x, m, K, keepdim=keepdim, dim=dim).sum",
                                  "children": [
                                    {
                                      "type": "call",
                                      "text": "_dist(x, m, K, keepdim=keepdim, dim=dim)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "_dist",
                                          "children": []
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(x, m, K, keepdim=keepdim, dim=dim)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "m",
                                              "children": []
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "K",
                                              "children": []
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "keyword_argument",
                                              "text": "keepdim=keepdim",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "keepdim",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "keepdim",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "keyword_argument",
                                              "text": "dim=dim",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "dim",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "dim",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "sum",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim=dim, keepdim=False)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=False",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "false",
                                          "text": "False",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "text": "d_a = _dist(x, m_a, K, keepdim=keepdim, dim=dim).sum(dim=dim, keepdim=False)",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "d_a = _dist(x, m_a, K, keepdim=keepdim, dim=dim).sum(dim=dim, keepdim=False)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "d_a",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "_dist(x, m_a, K, keepdim=keepdim, dim=dim).sum(dim=dim, keepdim=False)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "_dist(x, m_a, K, keepdim=keepdim, dim=dim).sum",
                                  "children": [
                                    {
                                      "type": "call",
                                      "text": "_dist(x, m_a, K, keepdim=keepdim, dim=dim)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "_dist",
                                          "children": []
                                        },
                                        {
                                          "type": "argument_list",
                                          "text": "(x, m_a, K, keepdim=keepdim, dim=dim)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "x",
                                              "children": []
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "m_a",
                                              "children": []
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "text": "K",
                                              "children": []
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "keyword_argument",
                                              "text": "keepdim=keepdim",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "keepdim",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "keepdim",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ",",
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "keyword_argument",
                                              "text": "dim=dim",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "text": "dim",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "dim",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "sum",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(dim=dim, keepdim=False)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=False",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "false",
                                          "text": "False",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "comment",
                      "text": "# use midpoint that has smaller sum of squared distances",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "text": "midpoint = m if d < d_a else m_a",
                      "children": [
                        {
                          "type": "assignment",
                          "text": "midpoint = m if d < d_a else m_a",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "midpoint",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "conditional_expression",
                              "text": "m if d < d_a else m_a",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "m",
                                  "children": []
                                },
                                {
                                  "type": "if",
                                  "text": "if",
                                  "children": []
                                },
                                {
                                  "type": "comparison_operator",
                                  "text": "d < d_a",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "d",
                                      "children": []
                                    },
                                    {
                                      "type": "<",
                                      "text": "<",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "d_a",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "else",
                                  "text": "else",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "m_a",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "text": "else:\n        midpoint = m",
                  "children": [
                    {
                      "type": "else",
                      "text": "else",
                      "children": []
                    },
                    {
                      "type": ":",
                      "text": ":",
                      "children": []
                    },
                    {
                      "type": "block",
                      "text": "midpoint = m",
                      "children": [
                        {
                          "type": "expression_statement",
                          "text": "midpoint = m",
                          "children": [
                            {
                              "type": "assignment",
                              "text": "midpoint = m",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "midpoint",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "m",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return midpoint",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "text": "midpoint",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def gyration(a, b, u, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the gyration of :math:`u` by :math:`[a,b]`.\n\n    The gyration is a special operation of gyrovector spaces. The gyrovector\n    space addition operation :math:`\\oplus_\\kappa` is not associative (as\n    mentioned in :func:`mobius_add`), but it is gyroassociative, which means\n\n    .. math::\n\n        u \\oplus_\\kappa (v \\oplus_\\kappa w)\n        =\n        (u\\oplus_\\kappa v) \\oplus_\\kappa \\operatorname{gyr}[u, v]w,\n\n    where\n\n    .. math::\n\n        \\operatorname{gyr}[u, v]w\n        =\n        \\ominus (u \\oplus_\\kappa v) \\oplus (u \\oplus_\\kappa (v \\oplus_\\kappa w))\n\n    We can simplify this equation using the explicit formula for the Möbius\n    addition [1]. Recall,\n\n    .. math::\n\n        A = - \\kappa^2 \\langle u, w\\rangle \\langle v, v\\rangle\n            - \\kappa \\langle v, w\\rangle\n            + 2 \\kappa^2 \\langle u, v\\rangle \\langle v, w\\rangle\\\\\n        B = - \\kappa^2 \\langle v, w\\rangle \\langle u, u\\rangle\n            + \\kappa \\langle u, w\\rangle\\\\\n        D = 1 - 2 \\kappa \\langle u, v\\rangle\n            + \\kappa^2 \\langle u, u\\rangle \\langle v, v\\rangle\\\\\n\n        \\operatorname{gyr}[u, v]w = w + 2 \\frac{A u + B v}{D}.\n\n    Parameters\n    ----------\n    a : tensor\n        first point on manifold\n    b : tensor\n        second point on manifold\n    u : tensor\n        vector field for operation\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of automorphism\n\n    References\n    ----------\n    [1]  A. A. Ungar (2009), A Gyrovector Space Approach to Hyperbolic Geometry\n    \"\"\"\n    return _gyration(a, b, u, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "gyration",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(a, b, u, *, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "a",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "b",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "u",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the gyration of :math:`u` by :math:`[a,b]`.\n\n    The gyration is a special operation of gyrovector spaces. The gyrovector\n    space addition operation :math:`\\oplus_\\kappa` is not associative (as\n    mentioned in :func:`mobius_add`), but it is gyroassociative, which means\n\n    .. math::\n\n        u \\oplus_\\kappa (v \\oplus_\\kappa w)\n        =\n        (u\\oplus_\\kappa v) \\oplus_\\kappa \\operatorname{gyr}[u, v]w,\n\n    where\n\n    .. math::\n\n        \\operatorname{gyr}[u, v]w\n        =\n        \\ominus (u \\oplus_\\kappa v) \\oplus (u \\oplus_\\kappa (v \\oplus_\\kappa w))\n\n    We can simplify this equation using the explicit formula for the Möbius\n    addition [1]. Recall,\n\n    .. math::\n\n        A = - \\kappa^2 \\langle u, w\\rangle \\langle v, v\\rangle\n            - \\kappa \\langle v, w\\rangle\n            + 2 \\kappa^2 \\langle u, v\\rangle \\langle v, w\\rangle\\\\\n        B = - \\kappa^2 \\langle v, w\\rangle \\langle u, u\\rangle\n            + \\kappa \\langle u, w\\rangle\\\\\n        D = 1 - 2 \\kappa \\langle u, v\\rangle\n            + \\kappa^2 \\langle u, u\\rangle \\langle v, v\\rangle\\\\\n\n        \\operatorname{gyr}[u, v]w = w + 2 \\frac{A u + B v}{D}.\n\n    Parameters\n    ----------\n    a : tensor\n        first point on manifold\n    b : tensor\n        second point on manifold\n    u : tensor\n        vector field for operation\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of automorphism\n\n    References\n    ----------\n    [1]  A. A. Ungar (2009), A Gyrovector Space Approach to Hyperbolic Geometry\n    \"\"\"\n    return _gyration(a, b, u, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the gyration of :math:`u` by :math:`[a,b]`.\n\n    The gyration is a special operation of gyrovector spaces. The gyrovector\n    space addition operation :math:`\\oplus_\\kappa` is not associative (as\n    mentioned in :func:`mobius_add`), but it is gyroassociative, which means\n\n    .. math::\n\n        u \\oplus_\\kappa (v \\oplus_\\kappa w)\n        =\n        (u\\oplus_\\kappa v) \\oplus_\\kappa \\operatorname{gyr}[u, v]w,\n\n    where\n\n    .. math::\n\n        \\operatorname{gyr}[u, v]w\n        =\n        \\ominus (u \\oplus_\\kappa v) \\oplus (u \\oplus_\\kappa (v \\oplus_\\kappa w))\n\n    We can simplify this equation using the explicit formula for the Möbius\n    addition [1]. Recall,\n\n    .. math::\n\n        A = - \\kappa^2 \\langle u, w\\rangle \\langle v, v\\rangle\n            - \\kappa \\langle v, w\\rangle\n            + 2 \\kappa^2 \\langle u, v\\rangle \\langle v, w\\rangle\\\\\n        B = - \\kappa^2 \\langle v, w\\rangle \\langle u, u\\rangle\n            + \\kappa \\langle u, w\\rangle\\\\\n        D = 1 - 2 \\kappa \\langle u, v\\rangle\n            + \\kappa^2 \\langle u, u\\rangle \\langle v, v\\rangle\\\\\n\n        \\operatorname{gyr}[u, v]w = w + 2 \\frac{A u + B v}{D}.\n\n    Parameters\n    ----------\n    a : tensor\n        first point on manifold\n    b : tensor\n        second point on manifold\n    u : tensor\n        vector field for operation\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of automorphism\n\n    References\n    ----------\n    [1]  A. A. Ungar (2009), A Gyrovector Space Approach to Hyperbolic Geometry\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the gyration of :math:`u` by :math:`[a,b]`.\n\n    The gyration is a special operation of gyrovector spaces. The gyrovector\n    space addition operation :math:`\\oplus_\\kappa` is not associative (as\n    mentioned in :func:`mobius_add`), but it is gyroassociative, which means\n\n    .. math::\n\n        u \\oplus_\\kappa (v \\oplus_\\kappa w)\n        =\n        (u\\oplus_\\kappa v) \\oplus_\\kappa \\operatorname{gyr}[u, v]w,\n\n    where\n\n    .. math::\n\n        \\operatorname{gyr}[u, v]w\n        =\n        \\ominus (u \\oplus_\\kappa v) \\oplus (u \\oplus_\\kappa (v \\oplus_\\kappa w))\n\n    We can simplify this equation using the explicit formula for the Möbius\n    addition [1]. Recall,\n\n    .. math::\n\n        A = - \\kappa^2 \\langle u, w\\rangle \\langle v, v\\rangle\n            - \\kappa \\langle v, w\\rangle\n            + 2 \\kappa^2 \\langle u, v\\rangle \\langle v, w\\rangle\\\\\n        B = - \\kappa^2 \\langle v, w\\rangle \\langle u, u\\rangle\n            + \\kappa \\langle u, w\\rangle\\\\\n        D = 1 - 2 \\kappa \\langle u, v\\rangle\n            + \\kappa^2 \\langle u, u\\rangle \\langle v, v\\rangle\\\\\n\n        \\operatorname{gyr}[u, v]w = w + 2 \\frac{A u + B v}{D}.\n\n    Parameters\n    ----------\n    a : tensor\n        first point on manifold\n    b : tensor\n        second point on manifold\n    u : tensor\n        vector field for operation\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        the result of automorphism\n\n    References\n    ----------\n    [1]  A. A. Ungar (2009), A Gyrovector Space Approach to Hyperbolic Geometry\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _gyration(a, b, u, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_gyration(a, b, u, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_gyration",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(a, b, u, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "a",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "b",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "u",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _gyration(u, v, w, K, dim: int = -1):\n    # non-simplified\n    # mupv = -_mobius_add(u, v, K)\n    # vpw = _mobius_add(u, w, K)\n    # upvpw = _mobius_add(u, vpw, K)\n    # return _mobius_add(mupv, upvpw, K)\n    # simplified\n    u2 = u.pow(2).sum(dim=dim, keepdim=True)\n    v2 = v.pow(2).sum(dim=dim, keepdim=True)\n    uv = (u * v).sum(dim=dim, keepdim=True)\n    uw = (u * w).sum(dim=dim, keepdim=True)\n    vw = (v * w).sum(dim=dim, keepdim=True)\n    K2 = K ** 2\n    a = -K2 * uw * v2 - K * vw + 2 * K2 * uv * vw\n    b = -K2 * vw * u2 + K * uw\n    d = 1 - 2 * K * uv + K2 * u2 * v2\n    return w + 2 * (a * u + b * v) / d.clamp_min(MIN_NORM)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_gyration",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(u, v, w, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "u",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "v",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "w",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "comment",
          "text": "# non-simplified",
          "children": []
        },
        {
          "type": "comment",
          "text": "# mupv = -_mobius_add(u, v, K)",
          "children": []
        },
        {
          "type": "comment",
          "text": "# vpw = _mobius_add(u, w, K)",
          "children": []
        },
        {
          "type": "comment",
          "text": "# upvpw = _mobius_add(u, vpw, K)",
          "children": []
        },
        {
          "type": "comment",
          "text": "# return _mobius_add(mupv, upvpw, K)",
          "children": []
        },
        {
          "type": "comment",
          "text": "# simplified",
          "children": []
        },
        {
          "type": "block",
          "text": "u2 = u.pow(2).sum(dim=dim, keepdim=True)\n    v2 = v.pow(2).sum(dim=dim, keepdim=True)\n    uv = (u * v).sum(dim=dim, keepdim=True)\n    uw = (u * w).sum(dim=dim, keepdim=True)\n    vw = (v * w).sum(dim=dim, keepdim=True)\n    K2 = K ** 2\n    a = -K2 * uw * v2 - K * vw + 2 * K2 * uv * vw\n    b = -K2 * vw * u2 + K * uw\n    d = 1 - 2 * K * uv + K2 * u2 * v2\n    return w + 2 * (a * u + b * v) / d.clamp_min(MIN_NORM)",
          "children": [
            {
              "type": "expression_statement",
              "text": "u2 = u.pow(2).sum(dim=dim, keepdim=True)",
              "children": [
                {
                  "type": "assignment",
                  "text": "u2 = u.pow(2).sum(dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "u2",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "u.pow(2).sum(dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "u.pow(2).sum",
                          "children": [
                            {
                              "type": "call",
                              "text": "u.pow(2)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "u.pow",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "u",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "pow",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(2)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "2",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "sum",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=True",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "true",
                                  "text": "True",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "v2 = v.pow(2).sum(dim=dim, keepdim=True)",
              "children": [
                {
                  "type": "assignment",
                  "text": "v2 = v.pow(2).sum(dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "v2",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "v.pow(2).sum(dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "v.pow(2).sum",
                          "children": [
                            {
                              "type": "call",
                              "text": "v.pow(2)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "text": "v.pow",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "v",
                                      "children": []
                                    },
                                    {
                                      "type": ".",
                                      "text": ".",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "pow",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(2)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "integer",
                                      "text": "2",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "sum",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=True",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "true",
                                  "text": "True",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "uv = (u * v).sum(dim=dim, keepdim=True)",
              "children": [
                {
                  "type": "assignment",
                  "text": "uv = (u * v).sum(dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "uv",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "(u * v).sum(dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "(u * v).sum",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(u * v)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "u * v",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "u",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "v",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "sum",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=True",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "true",
                                  "text": "True",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "uw = (u * w).sum(dim=dim, keepdim=True)",
              "children": [
                {
                  "type": "assignment",
                  "text": "uw = (u * w).sum(dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "uw",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "(u * w).sum(dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "(u * w).sum",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(u * w)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "u * w",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "u",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "w",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "sum",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=True",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "true",
                                  "text": "True",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "vw = (v * w).sum(dim=dim, keepdim=True)",
              "children": [
                {
                  "type": "assignment",
                  "text": "vw = (v * w).sum(dim=dim, keepdim=True)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "vw",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "(v * w).sum(dim=dim, keepdim=True)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "(v * w).sum",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(v * w)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "v * w",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "v",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "w",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "sum",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(dim=dim, keepdim=True)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "dim=dim",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "dim",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "keyword_argument",
                              "text": "keepdim=True",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "keepdim",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "true",
                                  "text": "True",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "K2 = K ** 2",
              "children": [
                {
                  "type": "assignment",
                  "text": "K2 = K ** 2",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "K2",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "K ** 2",
                      "children": [
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": "**",
                          "text": "**",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "2",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "a = -K2 * uw * v2 - K * vw + 2 * K2 * uv * vw",
              "children": [
                {
                  "type": "assignment",
                  "text": "a = -K2 * uw * v2 - K * vw + 2 * K2 * uv * vw",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "a",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "-K2 * uw * v2 - K * vw + 2 * K2 * uv * vw",
                      "children": [
                        {
                          "type": "binary_operator",
                          "text": "-K2 * uw * v2 - K * vw",
                          "children": [
                            {
                              "type": "binary_operator",
                              "text": "-K2 * uw * v2",
                              "children": [
                                {
                                  "type": "binary_operator",
                                  "text": "-K2 * uw",
                                  "children": [
                                    {
                                      "type": "unary_operator",
                                      "text": "-K2",
                                      "children": [
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "K2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "uw",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "v2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "-",
                              "text": "-",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "K * vw",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "K",
                                  "children": []
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "vw",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "+",
                          "text": "+",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "2 * K2 * uv * vw",
                          "children": [
                            {
                              "type": "binary_operator",
                              "text": "2 * K2 * uv",
                              "children": [
                                {
                                  "type": "binary_operator",
                                  "text": "2 * K2",
                                  "children": [
                                    {
                                      "type": "integer",
                                      "text": "2",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "K2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "uv",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "vw",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "b = -K2 * vw * u2 + K * uw",
              "children": [
                {
                  "type": "assignment",
                  "text": "b = -K2 * vw * u2 + K * uw",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "b",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "-K2 * vw * u2 + K * uw",
                      "children": [
                        {
                          "type": "binary_operator",
                          "text": "-K2 * vw * u2",
                          "children": [
                            {
                              "type": "binary_operator",
                              "text": "-K2 * vw",
                              "children": [
                                {
                                  "type": "unary_operator",
                                  "text": "-K2",
                                  "children": [
                                    {
                                      "type": "-",
                                      "text": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "K2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "vw",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "u2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "+",
                          "text": "+",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "K * uw",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "uw",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "text": "d = 1 - 2 * K * uv + K2 * u2 * v2",
              "children": [
                {
                  "type": "assignment",
                  "text": "d = 1 - 2 * K * uv + K2 * u2 * v2",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "d",
                      "children": []
                    },
                    {
                      "type": "=",
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "1 - 2 * K * uv + K2 * u2 * v2",
                      "children": [
                        {
                          "type": "binary_operator",
                          "text": "1 - 2 * K * uv",
                          "children": [
                            {
                              "type": "integer",
                              "text": "1",
                              "children": []
                            },
                            {
                              "type": "-",
                              "text": "-",
                              "children": []
                            },
                            {
                              "type": "binary_operator",
                              "text": "2 * K * uv",
                              "children": [
                                {
                                  "type": "binary_operator",
                                  "text": "2 * K",
                                  "children": [
                                    {
                                      "type": "integer",
                                      "text": "2",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "K",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "uv",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "+",
                          "text": "+",
                          "children": []
                        },
                        {
                          "type": "binary_operator",
                          "text": "K2 * u2 * v2",
                          "children": [
                            {
                              "type": "binary_operator",
                              "text": "K2 * u2",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "K2",
                                  "children": []
                                },
                                {
                                  "type": "*",
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "u2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "v2",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return w + 2 * (a * u + b * v) / d.clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "binary_operator",
                  "text": "w + 2 * (a * u + b * v) / d.clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "w",
                      "children": []
                    },
                    {
                      "type": "+",
                      "text": "+",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "2 * (a * u + b * v) / d.clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "binary_operator",
                          "text": "2 * (a * u + b * v)",
                          "children": [
                            {
                              "type": "integer",
                              "text": "2",
                              "children": []
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "parenthesized_expression",
                              "text": "(a * u + b * v)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "a * u + b * v",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "text": "a * u",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "a",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "u",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "+",
                                      "text": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "b * v",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "b",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "v",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "/",
                          "text": "/",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "d.clamp_min(MIN_NORM)",
                          "children": [
                            {
                              "type": "attribute",
                              "text": "d.clamp_min",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "d",
                                  "children": []
                                },
                                {
                                  "type": ".",
                                  "text": ".",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "clamp_min",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "text": "(MIN_NORM)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "MIN_NORM",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def parallel_transport(x, y, v, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the parallel transport of :math:`v` from :math:`x` to :math:`y`.\n\n    The parallel transport is essential for adaptive algorithms on Riemannian\n    manifolds. For gyrovector spaces the parallel transport is expressed through\n    the gyration.\n\n    .. plot:: plots/extended/universal/gyrovector_parallel_transport.py\n\n    To recover parallel transport we first need to study isomorphisms between\n    gyrovectors and vectors. The reason is that originally, parallel transport\n    is well defined for gyrovectors as\n\n    .. math::\n\n        P_{x\\to y}(z) = \\operatorname{gyr}[y, -x]z,\n\n    where :math:`x,\\:y,\\:z \\in \\mathcal{M}_\\kappa^n` and\n    :math:`\\operatorname{gyr}[a, b]c = \\ominus (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa c))`\n\n    But we want to obtain parallel transport for vectors, not for gyrovectors.\n    The blessing is the isomorphism mentioned above. This mapping is given by\n\n    .. math::\n\n        U^\\kappa_p \\: : \\: T_p\\mathcal{M}_\\kappa^n \\to \\mathbb{G}\n        =\n        v \\mapsto \\lambda^\\kappa_p v\n\n\n    Finally, having the points :math:`x,\\:y \\in \\mathcal{M}_\\kappa^n` and a\n    tangent vector :math:`u\\in T_x\\mathcal{M}_\\kappa^n` we obtain\n\n    .. math::\n\n        P^\\kappa_{x\\to y}(v)\n        =\n        (U^\\kappa_y)^{-1}\\left(\\operatorname{gyr}[y, -x] U^\\kappa_x(v)\\right)\\\\\n        =\n        \\operatorname{gyr}[y, -x] v \\lambda^\\kappa_x / \\lambda^\\kappa_y\n\n    .. plot:: plots/extended/universal/parallel_transport.py\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point\n    y : tensor\n        end point\n    v : tensor\n        tangent vector at x to be transported to y\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        transported vector\n    \"\"\"\n    return _parallel_transport(x, y, v, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "parallel_transport",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, y, v, *, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "v",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the parallel transport of :math:`v` from :math:`x` to :math:`y`.\n\n    The parallel transport is essential for adaptive algorithms on Riemannian\n    manifolds. For gyrovector spaces the parallel transport is expressed through\n    the gyration.\n\n    .. plot:: plots/extended/universal/gyrovector_parallel_transport.py\n\n    To recover parallel transport we first need to study isomorphisms between\n    gyrovectors and vectors. The reason is that originally, parallel transport\n    is well defined for gyrovectors as\n\n    .. math::\n\n        P_{x\\to y}(z) = \\operatorname{gyr}[y, -x]z,\n\n    where :math:`x,\\:y,\\:z \\in \\mathcal{M}_\\kappa^n` and\n    :math:`\\operatorname{gyr}[a, b]c = \\ominus (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa c))`\n\n    But we want to obtain parallel transport for vectors, not for gyrovectors.\n    The blessing is the isomorphism mentioned above. This mapping is given by\n\n    .. math::\n\n        U^\\kappa_p \\: : \\: T_p\\mathcal{M}_\\kappa^n \\to \\mathbb{G}\n        =\n        v \\mapsto \\lambda^\\kappa_p v\n\n\n    Finally, having the points :math:`x,\\:y \\in \\mathcal{M}_\\kappa^n` and a\n    tangent vector :math:`u\\in T_x\\mathcal{M}_\\kappa^n` we obtain\n\n    .. math::\n\n        P^\\kappa_{x\\to y}(v)\n        =\n        (U^\\kappa_y)^{-1}\\left(\\operatorname{gyr}[y, -x] U^\\kappa_x(v)\\right)\\\\\n        =\n        \\operatorname{gyr}[y, -x] v \\lambda^\\kappa_x / \\lambda^\\kappa_y\n\n    .. plot:: plots/extended/universal/parallel_transport.py\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point\n    y : tensor\n        end point\n    v : tensor\n        tangent vector at x to be transported to y\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        transported vector\n    \"\"\"\n    return _parallel_transport(x, y, v, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the parallel transport of :math:`v` from :math:`x` to :math:`y`.\n\n    The parallel transport is essential for adaptive algorithms on Riemannian\n    manifolds. For gyrovector spaces the parallel transport is expressed through\n    the gyration.\n\n    .. plot:: plots/extended/universal/gyrovector_parallel_transport.py\n\n    To recover parallel transport we first need to study isomorphisms between\n    gyrovectors and vectors. The reason is that originally, parallel transport\n    is well defined for gyrovectors as\n\n    .. math::\n\n        P_{x\\to y}(z) = \\operatorname{gyr}[y, -x]z,\n\n    where :math:`x,\\:y,\\:z \\in \\mathcal{M}_\\kappa^n` and\n    :math:`\\operatorname{gyr}[a, b]c = \\ominus (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa c))`\n\n    But we want to obtain parallel transport for vectors, not for gyrovectors.\n    The blessing is the isomorphism mentioned above. This mapping is given by\n\n    .. math::\n\n        U^\\kappa_p \\: : \\: T_p\\mathcal{M}_\\kappa^n \\to \\mathbb{G}\n        =\n        v \\mapsto \\lambda^\\kappa_p v\n\n\n    Finally, having the points :math:`x,\\:y \\in \\mathcal{M}_\\kappa^n` and a\n    tangent vector :math:`u\\in T_x\\mathcal{M}_\\kappa^n` we obtain\n\n    .. math::\n\n        P^\\kappa_{x\\to y}(v)\n        =\n        (U^\\kappa_y)^{-1}\\left(\\operatorname{gyr}[y, -x] U^\\kappa_x(v)\\right)\\\\\n        =\n        \\operatorname{gyr}[y, -x] v \\lambda^\\kappa_x / \\lambda^\\kappa_y\n\n    .. plot:: plots/extended/universal/parallel_transport.py\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point\n    y : tensor\n        end point\n    v : tensor\n        tangent vector at x to be transported to y\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        transported vector\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the parallel transport of :math:`v` from :math:`x` to :math:`y`.\n\n    The parallel transport is essential for adaptive algorithms on Riemannian\n    manifolds. For gyrovector spaces the parallel transport is expressed through\n    the gyration.\n\n    .. plot:: plots/extended/universal/gyrovector_parallel_transport.py\n\n    To recover parallel transport we first need to study isomorphisms between\n    gyrovectors and vectors. The reason is that originally, parallel transport\n    is well defined for gyrovectors as\n\n    .. math::\n\n        P_{x\\to y}(z) = \\operatorname{gyr}[y, -x]z,\n\n    where :math:`x,\\:y,\\:z \\in \\mathcal{M}_\\kappa^n` and\n    :math:`\\operatorname{gyr}[a, b]c = \\ominus (a \\oplus_\\kappa b)\n    \\oplus_\\kappa (a \\oplus_\\kappa (b \\oplus_\\kappa c))`\n\n    But we want to obtain parallel transport for vectors, not for gyrovectors.\n    The blessing is the isomorphism mentioned above. This mapping is given by\n\n    .. math::\n\n        U^\\kappa_p \\: : \\: T_p\\mathcal{M}_\\kappa^n \\to \\mathbb{G}\n        =\n        v \\mapsto \\lambda^\\kappa_p v\n\n\n    Finally, having the points :math:`x,\\:y \\in \\mathcal{M}_\\kappa^n` and a\n    tangent vector :math:`u\\in T_x\\mathcal{M}_\\kappa^n` we obtain\n\n    .. math::\n\n        P^\\kappa_{x\\to y}(v)\n        =\n        (U^\\kappa_y)^{-1}\\left(\\operatorname{gyr}[y, -x] U^\\kappa_x(v)\\right)\\\\\n        =\n        \\operatorname{gyr}[y, -x] v \\lambda^\\kappa_x / \\lambda^\\kappa_y\n\n    .. plot:: plots/extended/universal/parallel_transport.py\n\n\n    Parameters\n    ----------\n    x : tensor\n        starting point\n    y : tensor\n        end point\n    v : tensor\n        tangent vector at x to be transported to y\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        transported vector\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _parallel_transport(x, y, v, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_parallel_transport(x, y, v, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_parallel_transport",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, y, v, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "v",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _parallel_transport(x, y, u, K, dim: int = -1):\n    return (\n        _gyration(y, -x, u, K, dim=dim)\n        * _lambda_x(x, K, keepdim=True, dim=dim)\n        / _lambda_x(y, K, keepdim=True, dim=dim)\n    )",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_parallel_transport",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, y, u, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "u",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "return (\n        _gyration(y, -x, u, K, dim=dim)\n        * _lambda_x(x, K, keepdim=True, dim=dim)\n        / _lambda_x(y, K, keepdim=True, dim=dim)\n    )",
          "children": [
            {
              "type": "return_statement",
              "text": "return (\n        _gyration(y, -x, u, K, dim=dim)\n        * _lambda_x(x, K, keepdim=True, dim=dim)\n        / _lambda_x(y, K, keepdim=True, dim=dim)\n    )",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "parenthesized_expression",
                  "text": "(\n        _gyration(y, -x, u, K, dim=dim)\n        * _lambda_x(x, K, keepdim=True, dim=dim)\n        / _lambda_x(y, K, keepdim=True, dim=dim)\n    )",
                  "children": [
                    {
                      "type": "(",
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "_gyration(y, -x, u, K, dim=dim)\n        * _lambda_x(x, K, keepdim=True, dim=dim)\n        / _lambda_x(y, K, keepdim=True, dim=dim)",
                      "children": [
                        {
                          "type": "binary_operator",
                          "text": "_gyration(y, -x, u, K, dim=dim)\n        * _lambda_x(x, K, keepdim=True, dim=dim)",
                          "children": [
                            {
                              "type": "call",
                              "text": "_gyration(y, -x, u, K, dim=dim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "_gyration",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(y, -x, u, K, dim=dim)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "y",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "unary_operator",
                                      "text": "-x",
                                      "children": [
                                        {
                                          "type": "-",
                                          "text": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "x",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "u",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "K",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "*",
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "call",
                              "text": "_lambda_x(x, K, keepdim=True, dim=dim)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "text": "_lambda_x",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "text": "(x, K, keepdim=True, dim=dim)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "K",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "keepdim=True",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "keepdim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "true",
                                          "text": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "text": "dim=dim",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "text": "dim",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "/",
                          "text": "/",
                          "children": []
                        },
                        {
                          "type": "call",
                          "text": "_lambda_x(y, K, keepdim=True, dim=dim)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_lambda_x",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(y, K, keepdim=True, dim=dim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "y",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "K",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "text": ")",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def parallel_transport0(y, v, *, K=1.0, dim=-1):\n    r\"\"\"\n    Computes the parallel transport of :math:`v` from the origin :math:`0` to\n    :math:`y`.\n\n    This is just a special case of the parallel transport with the starting\n    point at the origin that can be computed more efficiently and more\n    numerically stable.\n\n    Parameters\n    ----------\n    y : tensor\n        target point\n    v : tensor\n        vector to be transported from the origin to y\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"\n    return _parallel_transport0(y, v, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "parallel_transport0",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(y, v, *, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "v",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Computes the parallel transport of :math:`v` from the origin :math:`0` to\n    :math:`y`.\n\n    This is just a special case of the parallel transport with the starting\n    point at the origin that can be computed more efficiently and more\n    numerically stable.\n\n    Parameters\n    ----------\n    y : tensor\n        target point\n    v : tensor\n        vector to be transported from the origin to y\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"\n    return _parallel_transport0(y, v, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Computes the parallel transport of :math:`v` from the origin :math:`0` to\n    :math:`y`.\n\n    This is just a special case of the parallel transport with the starting\n    point at the origin that can be computed more efficiently and more\n    numerically stable.\n\n    Parameters\n    ----------\n    y : tensor\n        target point\n    v : tensor\n        vector to be transported from the origin to y\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Computes the parallel transport of :math:`v` from the origin :math:`0` to\n    :math:`y`.\n\n    This is just a special case of the parallel transport with the starting\n    point at the origin that can be computed more efficiently and more\n    numerically stable.\n\n    Parameters\n    ----------\n    y : tensor\n        target point\n    v : tensor\n        vector to be transported from the origin to y\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _parallel_transport0(y, v, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_parallel_transport0(y, v, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_parallel_transport0",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(y, v, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "v",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _parallel_transport0(y, v, K, dim: int = -1):\n    return v * (1 + K * y.pow(2).sum(dim=dim, keepdim=True)).clamp_min(MIN_NORM)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_parallel_transport0",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(y, v, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "y",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "v",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "return v * (1 + K * y.pow(2).sum(dim=dim, keepdim=True)).clamp_min(MIN_NORM)",
          "children": [
            {
              "type": "return_statement",
              "text": "return v * (1 + K * y.pow(2).sum(dim=dim, keepdim=True)).clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "binary_operator",
                  "text": "v * (1 + K * y.pow(2).sum(dim=dim, keepdim=True)).clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "v",
                      "children": []
                    },
                    {
                      "type": "*",
                      "text": "*",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "(1 + K * y.pow(2).sum(dim=dim, keepdim=True)).clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "(1 + K * y.pow(2).sum(dim=dim, keepdim=True)).clamp_min",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(1 + K * y.pow(2).sum(dim=dim, keepdim=True))",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "1 + K * y.pow(2).sum(dim=dim, keepdim=True)",
                                  "children": [
                                    {
                                      "type": "integer",
                                      "text": "1",
                                      "children": []
                                    },
                                    {
                                      "type": "+",
                                      "text": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "K * y.pow(2).sum(dim=dim, keepdim=True)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "K",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "y.pow(2).sum(dim=dim, keepdim=True)",
                                          "children": [
                                            {
                                              "type": "attribute",
                                              "text": "y.pow(2).sum",
                                              "children": [
                                                {
                                                  "type": "call",
                                                  "text": "y.pow(2)",
                                                  "children": [
                                                    {
                                                      "type": "attribute",
                                                      "text": "y.pow",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "y",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": ".",
                                                          "text": ".",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "pow",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "argument_list",
                                                      "text": "(2)",
                                                      "children": [
                                                        {
                                                          "type": "(",
                                                          "text": "(",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "2",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": ")",
                                                          "text": ")",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ".",
                                                  "text": ".",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "sum",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(dim=dim, keepdim=True)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "keyword_argument",
                                                  "text": "dim=dim",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "dim",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "dim",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "keyword_argument",
                                                  "text": "keepdim=True",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "keepdim",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "true",
                                                      "text": "True",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "clamp_min",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(MIN_NORM)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MIN_NORM",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def parallel_transport0back(x, v, *, K=1.0, dim: int = -1):\n    r\"\"\"\n    Perform parallel transport to the zero point.\n\n    Special case parallel transport with last point at zero that\n    can be computed more efficiently and numerically stable\n\n    Parameters\n    ----------\n    x : tensor\n        target point\n    v : tensor\n        vector to be transported\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"\n    return _parallel_transport0back(x, v, K=K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "parallel_transport0back",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, v, *, K=1.0, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "v",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Perform parallel transport to the zero point.\n\n    Special case parallel transport with last point at zero that\n    can be computed more efficiently and numerically stable\n\n    Parameters\n    ----------\n    x : tensor\n        target point\n    v : tensor\n        vector to be transported\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"\n    return _parallel_transport0back(x, v, K=K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Perform parallel transport to the zero point.\n\n    Special case parallel transport with last point at zero that\n    can be computed more efficiently and numerically stable\n\n    Parameters\n    ----------\n    x : tensor\n        target point\n    v : tensor\n        vector to be transported\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Perform parallel transport to the zero point.\n\n    Special case parallel transport with last point at zero that\n    can be computed more efficiently and numerically stable\n\n    Parameters\n    ----------\n    x : tensor\n        target point\n    v : tensor\n        vector to be transported\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _parallel_transport0back(x, v, K=K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_parallel_transport0back(x, v, K=K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_parallel_transport0back",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, v, K=K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "v",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "K=K",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "K",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _parallel_transport0back(x, v, K, dim: int = -1):\n    return v / (1 + K * x.pow(2).sum(dim=dim, keepdim=True)).clamp_min(MIN_NORM)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_parallel_transport0back",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, v, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "v",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "return v / (1 + K * x.pow(2).sum(dim=dim, keepdim=True)).clamp_min(MIN_NORM)",
          "children": [
            {
              "type": "return_statement",
              "text": "return v / (1 + K * x.pow(2).sum(dim=dim, keepdim=True)).clamp_min(MIN_NORM)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "binary_operator",
                  "text": "v / (1 + K * x.pow(2).sum(dim=dim, keepdim=True)).clamp_min(MIN_NORM)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "v",
                      "children": []
                    },
                    {
                      "type": "/",
                      "text": "/",
                      "children": []
                    },
                    {
                      "type": "call",
                      "text": "(1 + K * x.pow(2).sum(dim=dim, keepdim=True)).clamp_min(MIN_NORM)",
                      "children": [
                        {
                          "type": "attribute",
                          "text": "(1 + K * x.pow(2).sum(dim=dim, keepdim=True)).clamp_min",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "text": "(1 + K * x.pow(2).sum(dim=dim, keepdim=True))",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "binary_operator",
                                  "text": "1 + K * x.pow(2).sum(dim=dim, keepdim=True)",
                                  "children": [
                                    {
                                      "type": "integer",
                                      "text": "1",
                                      "children": []
                                    },
                                    {
                                      "type": "+",
                                      "text": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_operator",
                                      "text": "K * x.pow(2).sum(dim=dim, keepdim=True)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "text": "K",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "call",
                                          "text": "x.pow(2).sum(dim=dim, keepdim=True)",
                                          "children": [
                                            {
                                              "type": "attribute",
                                              "text": "x.pow(2).sum",
                                              "children": [
                                                {
                                                  "type": "call",
                                                  "text": "x.pow(2)",
                                                  "children": [
                                                    {
                                                      "type": "attribute",
                                                      "text": "x.pow",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "text": "x",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": ".",
                                                          "text": ".",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "text": "pow",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "argument_list",
                                                      "text": "(2)",
                                                      "children": [
                                                        {
                                                          "type": "(",
                                                          "text": "(",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "text": "2",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": ")",
                                                          "text": ")",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ".",
                                                  "text": ".",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "text": "sum",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "text": "(dim=dim, keepdim=True)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "keyword_argument",
                                                  "text": "dim=dim",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "dim",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "text": "dim",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ",",
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "keyword_argument",
                                                  "text": "keepdim=True",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "text": "keepdim",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "true",
                                                      "text": "True",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "text": ".",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "clamp_min",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "text": "(MIN_NORM)",
                          "children": [
                            {
                              "type": "(",
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "MIN_NORM",
                              "children": []
                            },
                            {
                              "type": ")",
                              "text": ")",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def egrad2rgrad(x, grad, *, K=1.0, dim=-1):\n    r\"\"\"\n    Converts the Euclidean gradient to the Riemannian gradient in the tangent\n    space of :math:`x`.\n\n    .. math::\n\n        \\nabla_x = \\nabla^E_x / (\\lambda_x^\\kappa)^2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    grad : tensor\n        Euclidean gradient for :math:`x`\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Riemannian gradient :math:`u\\in T_x\\mathcal{M}_\\kappa^n`\n    \"\"\"\n    return _egrad2rgrad(x, grad, K, dim=dim)",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "egrad2rgrad",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, grad, *, K=1.0, dim=-1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "grad",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "keyword_separator",
              "text": "*",
              "children": [
                {
                  "type": "*",
                  "text": "*",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "K=1.0",
              "children": [
                {
                  "type": "identifier",
                  "text": "K",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "float",
                  "text": "1.0",
                  "children": []
                }
              ]
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "default_parameter",
              "text": "dim=-1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "r\"\"\"\n    Converts the Euclidean gradient to the Riemannian gradient in the tangent\n    space of :math:`x`.\n\n    .. math::\n\n        \\nabla_x = \\nabla^E_x / (\\lambda_x^\\kappa)^2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    grad : tensor\n        Euclidean gradient for :math:`x`\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Riemannian gradient :math:`u\\in T_x\\mathcal{M}_\\kappa^n`\n    \"\"\"\n    return _egrad2rgrad(x, grad, K, dim=dim)",
          "children": [
            {
              "type": "expression_statement",
              "text": "r\"\"\"\n    Converts the Euclidean gradient to the Riemannian gradient in the tangent\n    space of :math:`x`.\n\n    .. math::\n\n        \\nabla_x = \\nabla^E_x / (\\lambda_x^\\kappa)^2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    grad : tensor\n        Euclidean gradient for :math:`x`\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Riemannian gradient :math:`u\\in T_x\\mathcal{M}_\\kappa^n`\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "text": "r\"\"\"\n    Converts the Euclidean gradient to the Riemannian gradient in the tangent\n    space of :math:`x`.\n\n    .. math::\n\n        \\nabla_x = \\nabla^E_x / (\\lambda_x^\\kappa)^2\n\n    Parameters\n    ----------\n    x : tensor\n        point on the manifold\n    grad : tensor\n        Euclidean gradient for :math:`x`\n    K : float|tensor\n        sectional curvature of manifold\n    dim : int\n        reduction dimension for operations\n\n    Returns\n    -------\n    tensor\n        Riemannian gradient :math:`u\\in T_x\\mathcal{M}_\\kappa^n`\n    \"\"\"",
                  "children": [
                    {
                      "type": "\"",
                      "text": "r\"\"\"",
                      "children": []
                    },
                    {
                      "type": "\"",
                      "text": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "text": "return _egrad2rgrad(x, grad, K, dim=dim)",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call",
                  "text": "_egrad2rgrad(x, grad, K, dim=dim)",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "_egrad2rgrad",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "text": "(x, grad, K, dim=dim)",
                      "children": [
                        {
                          "type": "(",
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "grad",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "text": "K",
                          "children": []
                        },
                        {
                          "type": ",",
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "keyword_argument",
                          "text": "dim=dim",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            },
                            {
                              "type": "=",
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "text": "dim",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "text": "def _egrad2rgrad(x, grad, K, dim: int = -1):\n    return grad / _lambda_x(x, K, keepdim=True, dim=dim) ** 2",
      "children": [
        {
          "type": "def",
          "text": "def",
          "children": []
        },
        {
          "type": "identifier",
          "text": "_egrad2rgrad",
          "children": []
        },
        {
          "type": "parameters",
          "text": "(x, grad, K, dim: int = -1)",
          "children": [
            {
              "type": "(",
              "text": "(",
              "children": []
            },
            {
              "type": "identifier",
              "text": "x",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "grad",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "identifier",
              "text": "K",
              "children": []
            },
            {
              "type": ",",
              "text": ",",
              "children": []
            },
            {
              "type": "typed_default_parameter",
              "text": "dim: int = -1",
              "children": [
                {
                  "type": "identifier",
                  "text": "dim",
                  "children": []
                },
                {
                  "type": ":",
                  "text": ":",
                  "children": []
                },
                {
                  "type": "type",
                  "text": "int",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "=",
                  "text": "=",
                  "children": []
                },
                {
                  "type": "unary_operator",
                  "text": "-1",
                  "children": [
                    {
                      "type": "-",
                      "text": "-",
                      "children": []
                    },
                    {
                      "type": "integer",
                      "text": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "text": ")",
              "children": []
            }
          ]
        },
        {
          "type": ":",
          "text": ":",
          "children": []
        },
        {
          "type": "block",
          "text": "return grad / _lambda_x(x, K, keepdim=True, dim=dim) ** 2",
          "children": [
            {
              "type": "return_statement",
              "text": "return grad / _lambda_x(x, K, keepdim=True, dim=dim) ** 2",
              "children": [
                {
                  "type": "return",
                  "text": "return",
                  "children": []
                },
                {
                  "type": "binary_operator",
                  "text": "grad / _lambda_x(x, K, keepdim=True, dim=dim) ** 2",
                  "children": [
                    {
                      "type": "identifier",
                      "text": "grad",
                      "children": []
                    },
                    {
                      "type": "/",
                      "text": "/",
                      "children": []
                    },
                    {
                      "type": "binary_operator",
                      "text": "_lambda_x(x, K, keepdim=True, dim=dim) ** 2",
                      "children": [
                        {
                          "type": "call",
                          "text": "_lambda_x(x, K, keepdim=True, dim=dim)",
                          "children": [
                            {
                              "type": "identifier",
                              "text": "_lambda_x",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "text": "(x, K, keepdim=True, dim=dim)",
                              "children": [
                                {
                                  "type": "(",
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "text": "K",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "keepdim=True",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "keepdim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "true",
                                      "text": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "keyword_argument",
                                  "text": "dim=dim",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "text": "dim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "**",
                          "text": "**",
                          "children": []
                        },
                        {
                          "type": "integer",
                          "text": "2",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}